/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { ExternalWalletAsset } from '../model/externalWalletAsset';
    import { ExternalWalletsWalletIdAssetIdPostRequest } from '../model/externalWalletsWalletIdAssetIdPostRequest';
    import { InternalWalletsPostRequest } from '../model/internalWalletsPostRequest';
    import { UnmanagedWallet } from '../model/unmanagedWallet';
    import { VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest } from '../model/vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class ExternalWalletsApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Gets a list of external wallets under the workspace.
                * @summary List external wallets
            */
        public async externalWalletsGet () : Promise<Array<UnmanagedWallet>> {
                const path = this.configuration.basePath + '/external_wallets';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<UnmanagedWallet>>(requestOptions);
        }
            /**
            * Creates a new external wallet with the requested name.
                * @summary Create an external wallet
                * @param internalWalletsPostRequest 
            */
        public async externalWalletsPost (internalWalletsPostRequest?: InternalWalletsPostRequest, ) : Promise<UnmanagedWallet> {
                const path = this.configuration.basePath + '/external_wallets';
                let params: any = {};
                let headers: any = {}

                    if (typeof internalWalletsPostRequest === 'object') {
                        for( const [key,value] of Object.entries(internalWalletsPostRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['InternalWalletsPostRequest'] = ObjectSerializer.serialize(internalWalletsPostRequest, "InternalWalletsPostRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<UnmanagedWallet>(requestOptions);
        }
            /**
            * Deletes an external wallet asset by ID.
                * @summary Delete an asset from an external wallet
                * @param walletId The ID of the wallet
                * @param assetId The ID of the asset to delete
            */
        public async externalWalletsWalletIdAssetIdDelete (walletId: string, assetId: string, ) : Promise<any> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}/{assetId}'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)))
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling externalWalletsWalletIdAssetIdDelete.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling externalWalletsWalletIdAssetIdDelete.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            * Returns an external wallet by wallet ID and asset ID.
                * @summary Get an asset from an external wallet
                * @param walletId The ID of the wallet
                * @param assetId The ID of the asset to return
            */
        public async externalWalletsWalletIdAssetIdGet (walletId: string, assetId: string, ) : Promise<ExternalWalletAsset> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}/{assetId}'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)))
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling externalWalletsWalletIdAssetIdGet.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling externalWalletsWalletIdAssetIdGet.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<ExternalWalletAsset>(requestOptions);
        }
            /**
            * Adds an asset to an existing external wallet.
                * @summary Add an asset to an external wallet.
                * @param walletId The ID of the wallet
                * @param assetId The ID of the asset to add
                * @param externalWalletsWalletIdAssetIdPostRequest 
            */
        public async externalWalletsWalletIdAssetIdPost (walletId: string, assetId: string, externalWalletsWalletIdAssetIdPostRequest?: ExternalWalletsWalletIdAssetIdPostRequest, ) : Promise<ExternalWalletAsset> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}/{assetId}'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)))
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling externalWalletsWalletIdAssetIdPost.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling externalWalletsWalletIdAssetIdPost.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                    if (typeof externalWalletsWalletIdAssetIdPostRequest === 'object') {
                        for( const [key,value] of Object.entries(externalWalletsWalletIdAssetIdPostRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['ExternalWalletsWalletIdAssetIdPostRequest'] = ObjectSerializer.serialize(externalWalletsWalletIdAssetIdPostRequest, "ExternalWalletsWalletIdAssetIdPostRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<ExternalWalletAsset>(requestOptions);
        }
            /**
            * Deletes an external wallet by ID.
                * @summary Delete an external wallet
                * @param walletId The ID of the wallet to delete
            */
        public async externalWalletsWalletIdDelete (walletId: string, ) : Promise<any> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling externalWalletsWalletIdDelete.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            * Returns an external wallet by ID.
                * @summary Find an external wallet
                * @param walletId The ID of the wallet to return
            */
        public async externalWalletsWalletIdGet (walletId: string, ) : Promise<UnmanagedWallet> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling externalWalletsWalletIdGet.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<UnmanagedWallet>(requestOptions);
        }
            /**
            * Sets an AML/KYT customer reference ID for the specific external wallet.
                * @summary Set an AML customer reference ID for an external wallet
                * @param walletId The wallet ID
                * @param vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest 
            */
        public async externalWalletsWalletIdSetCustomerRefIdPost (walletId: string, vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest: VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, ) : Promise<any> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}/set_customer_ref_id'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling externalWalletsWalletIdSetCustomerRefIdPost.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }
                        // verify required parameter 'vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest' is not null or undefined
                        if (vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest === null || vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest === undefined) {
                        throw new Error('Required parameter vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest was null or undefined when calling externalWalletsWalletIdSetCustomerRefIdPost.');
                        }


                    if (typeof vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest === 'object') {
                        for( const [key,value] of Object.entries(vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest'] = ObjectSerializer.serialize(vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, "VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
        }
