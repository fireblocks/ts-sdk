/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { AddAssetToExternalWalletRequest } from '../model/addAssetToExternalWalletRequest';
    import { CreateInternalWalletRequest } from '../model/createInternalWalletRequest';
    import { ExternalWalletAsset } from '../model/externalWalletAsset';
    import { SetCustomerRefIdForVaultAccountRequest } from '../model/setCustomerRefIdForVaultAccountRequest';
    import { UnmanagedWallet } from '../model/unmanagedWallet';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class ExternalWalletsApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Adds an asset to an existing external wallet.
                * @summary Add an asset to an external wallet.
                * @param walletId The ID of the wallet
                * @param assetId The ID of the asset to add
                * @param addAssetToExternalWalletRequest 
            */
        public async addAssetToExternalWallet (walletId: string, assetId: string, addAssetToExternalWalletRequest?: AddAssetToExternalWalletRequest, ) : Promise<ExternalWalletAsset> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}/{assetId}'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)))
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling addAssetToExternalWallet.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling addAssetToExternalWallet.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                    if (typeof addAssetToExternalWalletRequest === 'object') {
                        for( const [key,value] of Object.entries(addAssetToExternalWalletRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['AddAssetToExternalWalletRequest'] = ObjectSerializer.serialize(addAssetToExternalWalletRequest, "AddAssetToExternalWalletRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<ExternalWalletAsset>(requestOptions);
        }
            /**
            * Creates a new external wallet with the requested name.
                * @summary Create an external wallet
                * @param createInternalWalletRequest 
            */
        public async createExternalWallet (createInternalWalletRequest?: CreateInternalWalletRequest, ) : Promise<UnmanagedWallet> {
                const path = this.configuration.basePath + '/external_wallets';
                let params: any = {};
                let headers: any = {}

                    if (typeof createInternalWalletRequest === 'object') {
                        for( const [key,value] of Object.entries(createInternalWalletRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['CreateInternalWalletRequest'] = ObjectSerializer.serialize(createInternalWalletRequest, "CreateInternalWalletRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<UnmanagedWallet>(requestOptions);
        }
            /**
            * Deletes an external wallet by ID.
                * @summary Delete an external wallet
                * @param walletId The ID of the wallet to delete
            */
        public async deleteExternalWallet (walletId: string, ) : Promise<any> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling deleteExternalWallet.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            * Returns an external wallet by wallet ID and asset ID.
                * @summary Get an asset from an external wallet
                * @param walletId The ID of the wallet
                * @param assetId The ID of the asset to return
            */
        public async getAssetInExternalWallet (walletId: string, assetId: string, ) : Promise<ExternalWalletAsset> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}/{assetId}'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)))
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling getAssetInExternalWallet.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling getAssetInExternalWallet.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<ExternalWalletAsset>(requestOptions);
        }
            /**
            * Returns an external wallet by ID.
                * @summary Find an external wallet
                * @param walletId The ID of the wallet to return
            */
        public async getExternalWalletById (walletId: string, ) : Promise<UnmanagedWallet> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling getExternalWalletById.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<UnmanagedWallet>(requestOptions);
        }
            /**
            * Gets a list of external wallets under the workspace.
                * @summary List external wallets
            */
        public async getExternalWallets () : Promise<Array<UnmanagedWallet>> {
                const path = this.configuration.basePath + '/external_wallets';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<UnmanagedWallet>>(requestOptions);
        }
            /**
            * Deletes an external wallet asset by ID.
                * @summary Delete an asset from an external wallet
                * @param walletId The ID of the wallet
                * @param assetId The ID of the asset to delete
            */
        public async removeAssetFromExternalWallet (walletId: string, assetId: string, ) : Promise<any> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}/{assetId}'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)))
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling removeAssetFromExternalWallet.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling removeAssetFromExternalWallet.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            * Sets an AML/KYT customer reference ID for the specific external wallet.
                * @summary Set an AML customer reference ID for an external wallet
                * @param walletId The wallet ID
                * @param setCustomerRefIdForVaultAccountRequest 
            */
        public async setCustomerRefIdForExternalWallet (walletId: string, setCustomerRefIdForVaultAccountRequest: SetCustomerRefIdForVaultAccountRequest, ) : Promise<any> {
                const path = this.configuration.basePath + '/external_wallets/{walletId}/set_customer_ref_id'
                .replace('{' + 'walletId' + '}', encodeURIComponent(String(walletId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'walletId' is not null or undefined
                        if (walletId === null || walletId === undefined) {
                        throw new Error('Required parameter walletId was null or undefined when calling setCustomerRefIdForExternalWallet.');
                        }


                    if (typeof walletId === 'object') {
                        for( const [key,value] of Object.entries(walletId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['walletId'] = ObjectSerializer.serialize(walletId, "string");
                    }
                        // verify required parameter 'setCustomerRefIdForVaultAccountRequest' is not null or undefined
                        if (setCustomerRefIdForVaultAccountRequest === null || setCustomerRefIdForVaultAccountRequest === undefined) {
                        throw new Error('Required parameter setCustomerRefIdForVaultAccountRequest was null or undefined when calling setCustomerRefIdForExternalWallet.');
                        }


                    if (typeof setCustomerRefIdForVaultAccountRequest === 'object') {
                        for( const [key,value] of Object.entries(setCustomerRefIdForVaultAccountRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['SetCustomerRefIdForVaultAccountRequest'] = ObjectSerializer.serialize(setCustomerRefIdForVaultAccountRequest, "SetCustomerRefIdForVaultAccountRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
        }
