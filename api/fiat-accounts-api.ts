/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";

// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { FiatAccount } from '../models';
// @ts-ignore
import { RedeemFundsToLinkedDDARequest } from '../models';



    /**
 * FiatAccountsApi - axios parameter creator
 * @export
 */
export const FiatAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deposits funds from the linked DDA.
         * @summary Deposit funds from DDA
         * @param {string} accountId The ID of the fiat account to use
         * @param {RedeemFundsToLinkedDDARequest} [redeemFundsToLinkedDDARequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        depositFundsFromLinkedDDA: async (accountId: string, redeemFundsToLinkedDDARequest?: RedeemFundsToLinkedDDARequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('depositFundsFromLinkedDDA', 'accountId', accountId)
            const localVarPath = `/fiat_accounts/{accountId}/deposit_from_linked_dda`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = redeemFundsToLinkedDDARequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns a fiat account by ID.
         * @summary Find a specific fiat account
         * @param {string} accountId The ID of the fiat account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiatAccountById: async (accountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getFiatAccountById', 'accountId', accountId)
            const localVarPath = `/fiat_accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns all fiat accounts.
         * @summary List fiat accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiatAccounts: async (): Promise<AxiosRequestConfig> => {
            const localVarPath = `/fiat_accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Redeems funds to the linked DDA.
         * @summary Redeem funds to DDA
         * @param {string} accountId The ID of the fiat account to use
         * @param {RedeemFundsToLinkedDDARequest} [redeemFundsToLinkedDDARequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redeemFundsToLinkedDDA: async (accountId: string, redeemFundsToLinkedDDARequest?: RedeemFundsToLinkedDDARequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('redeemFundsToLinkedDDA', 'accountId', accountId)
            const localVarPath = `/fiat_accounts/{accountId}/redeem_to_linked_dda`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = redeemFundsToLinkedDDARequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * FiatAccountsApi - functional programming interface
 * @export
 */
export const FiatAccountsApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = FiatAccountsApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * Deposits funds from the linked DDA.
         * @summary Deposit funds from DDA
         * @param {string} accountId The ID of the fiat account to use
         * @param {RedeemFundsToLinkedDDARequest} [redeemFundsToLinkedDDARequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async depositFundsFromLinkedDDA(accountId: string, redeemFundsToLinkedDDARequest?: RedeemFundsToLinkedDDARequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.depositFundsFromLinkedDDA(accountId, redeemFundsToLinkedDDARequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns a fiat account by ID.
         * @summary Find a specific fiat account
         * @param {string} accountId The ID of the fiat account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiatAccountById(accountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FiatAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFiatAccountById(accountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns all fiat accounts.
         * @summary List fiat accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiatAccounts(): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FiatAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFiatAccounts();
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Redeems funds to the linked DDA.
         * @summary Redeem funds to DDA
         * @param {string} accountId The ID of the fiat account to use
         * @param {RedeemFundsToLinkedDDARequest} [redeemFundsToLinkedDDARequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redeemFundsToLinkedDDA(accountId: string, redeemFundsToLinkedDDARequest?: RedeemFundsToLinkedDDARequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redeemFundsToLinkedDDA(accountId, redeemFundsToLinkedDDARequest, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for depositFundsFromLinkedDDA operation in FiatAccountsApi.
 * @export
 * @interface FiatAccountsApiDepositFundsFromLinkedDDARequest
 */
export interface FiatAccountsApiDepositFundsFromLinkedDDARequest {
    /**
     * The ID of the fiat account to use
     * @type {string}
     * @memberof FiatAccountsApiDepositFundsFromLinkedDDA
     */
    readonly accountId: string

    /**
     * 
     * @type {RedeemFundsToLinkedDDARequest}
     * @memberof FiatAccountsApiDepositFundsFromLinkedDDA
     */
    readonly redeemFundsToLinkedDDARequest?: RedeemFundsToLinkedDDARequest
}

/**
 * Request parameters for getFiatAccountById operation in FiatAccountsApi.
 * @export
 * @interface FiatAccountsApiGetFiatAccountByIdRequest
 */
export interface FiatAccountsApiGetFiatAccountByIdRequest {
    /**
     * The ID of the fiat account to return
     * @type {string}
     * @memberof FiatAccountsApiGetFiatAccountById
     */
    readonly accountId: string
}

/**
 * Request parameters for redeemFundsToLinkedDDA operation in FiatAccountsApi.
 * @export
 * @interface FiatAccountsApiRedeemFundsToLinkedDDARequest
 */
export interface FiatAccountsApiRedeemFundsToLinkedDDARequest {
    /**
     * The ID of the fiat account to use
     * @type {string}
     * @memberof FiatAccountsApiRedeemFundsToLinkedDDA
     */
    readonly accountId: string

    /**
     * 
     * @type {RedeemFundsToLinkedDDARequest}
     * @memberof FiatAccountsApiRedeemFundsToLinkedDDA
     */
    readonly redeemFundsToLinkedDDARequest?: RedeemFundsToLinkedDDARequest
}

/**
 * FiatAccountsApi - object-oriented interface
 * @export
 * @class FiatAccountsApi
 * @extends {BaseAPI}
 */
export class FiatAccountsApi extends BaseAPI {
    /**
     * Deposits funds from the linked DDA.
     * @summary Deposit funds from DDA
     * @param {FiatAccountsApiDepositFundsFromLinkedDDARequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiatAccountsApi
     */
    public depositFundsFromLinkedDDA(requestParameters: FiatAccountsApiDepositFundsFromLinkedDDARequest, ) {
        return FiatAccountsApiFp(this.httpClient).depositFundsFromLinkedDDA(requestParameters.accountId, requestParameters.redeemFundsToLinkedDDARequest, );
    }

    /**
     * Returns a fiat account by ID.
     * @summary Find a specific fiat account
     * @param {FiatAccountsApiGetFiatAccountByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiatAccountsApi
     */
    public getFiatAccountById(requestParameters: FiatAccountsApiGetFiatAccountByIdRequest, ) {
        return FiatAccountsApiFp(this.httpClient).getFiatAccountById(requestParameters.accountId, );
    }

    /**
     * Returns all fiat accounts.
     * @summary List fiat accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiatAccountsApi
     */
    public getFiatAccounts() {
        return FiatAccountsApiFp(this.httpClient).getFiatAccounts();
    }

    /**
     * Redeems funds to the linked DDA.
     * @summary Redeem funds to DDA
     * @param {FiatAccountsApiRedeemFundsToLinkedDDARequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FiatAccountsApi
     */
    public redeemFundsToLinkedDDA(requestParameters: FiatAccountsApiRedeemFundsToLinkedDDARequest, ) {
        return FiatAccountsApiFp(this.httpClient).redeemFundsToLinkedDDA(requestParameters.accountId, requestParameters.redeemFundsToLinkedDDARequest, );
    }
}
