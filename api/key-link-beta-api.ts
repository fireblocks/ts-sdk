/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateSigningKeyDto } from '../models';
// @ts-ignore
import { CreateValidationKeyDto } from '../models';
// @ts-ignore
import { CreateValidationKeyResponseDto } from '../models';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { GetSigningKeyResponseDto } from '../models';
// @ts-ignore
import { GetValidationKeyResponseDto } from '../models';
// @ts-ignore
import { ModifySigningKeyAgentIdDto } from '../models';
// @ts-ignore
import { ModifySigningKeyDto } from '../models';
// @ts-ignore
import { ModifyValidationKeyDto } from '../models';
// @ts-ignore
import { SigningKeyDto } from '../models';
// @ts-ignore
import { ValidationKeyDto } from '../models';
/**
 * KeyLinkBetaApi - axios parameter creator
 * @export
 */
export const KeyLinkBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a new signing key to the workspace. The added key will be linked to the specific Fireblocks agent user ID. The same user will receive the proof of ownership message to be signed, and upon successful proof, the key will become enabled. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Add a new signing key
         * @param {CreateSigningKeyDto} createSigningKeyDto 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSigningKey: async (createSigningKeyDto: CreateSigningKeyDto, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('createSigningKey', 'createSigningKeyDto', createSigningKeyDto)
            const localVarPath = `/key_link/signing_keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSigningKeyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a new validation key used to validate signing keys. The new validation key will undergo an approval process by the workspace quorum. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Add a new validation key
         * @param {CreateValidationKeyDto} createValidationKeyDto 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createValidationKey: async (createValidationKeyDto: CreateValidationKeyDto, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('createValidationKey', 'createValidationKeyDto', createValidationKeyDto)
            const localVarPath = `/key_link/validation_keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createValidationKeyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows disabling validation key even if it has not expired yet. It is not allowed to enable the validation key back. Another key has to be used for future validations. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Disables a validation key
         * @param {ModifyValidationKeyDto} modifyValidationKeyDto 
         * @param {string} keyId The unique identifier for the validation key provided by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableValidationKey: async (modifyValidationKeyDto: ModifyValidationKeyDto, keyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('disableValidationKey', 'modifyValidationKeyDto', modifyValidationKeyDto)
            assertParamExistsAndNotEmpty('disableValidationKey', 'keyId', keyId)
            const localVarPath = `/key_link/validation_keys/{keyId}`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyValidationKeyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a signing key if it exists, identified by the specified Fireblocks provided `keyId`. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get a signing key by `keyId`
         * @param {string} keyId The unique identifier for the signing key provided by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigningKey: async (keyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getSigningKey', 'keyId', keyId)
            const localVarPath = `/key_link/signing_keys/{keyId}`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of signing keys in the workspace Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get list of signing keys
         * @param {string} [pageCursor] Cursor to the next page
         * @param {number} [pageSize] Amount of results to return in the next page
         * @param {GetSigningKeysListSortByEnum} [sortBy] Field(s) to use for sorting
         * @param {GetSigningKeysListOrderEnum} [order] Is the order ascending or descending
         * @param {number} [vaultAccountId] Return keys assigned to a specific vault
         * @param {string} [agentUserId] Return keys associated with a specific agent user
         * @param {GetSigningKeysListAlgorithmEnum} [algorithm] Return only keys with a specific algorithm
         * @param {boolean} [enabled] Return keys that have been proof of ownership
         * @param {boolean} [available] Return keys that are proof of ownership but not assigned. Available filter can be used only when vaultAccountId and enabled filters are not set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigningKeysList: async (pageCursor?: string, pageSize?: number, sortBy?: GetSigningKeysListSortByEnum, order?: GetSigningKeysListOrderEnum, vaultAccountId?: number, agentUserId?: string, algorithm?: GetSigningKeysListAlgorithmEnum, enabled?: boolean, available?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/key_link/signing_keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (vaultAccountId !== undefined) {
                localVarQueryParameter['vaultAccountId'] = vaultAccountId;
            }

            if (agentUserId !== undefined) {
                localVarQueryParameter['agentUserId'] = agentUserId;
            }

            if (algorithm !== undefined) {
                localVarQueryParameter['algorithm'] = algorithm;
            }

            if (enabled !== undefined) {
                localVarQueryParameter['enabled'] = enabled;
            }

            if (available !== undefined) {
                localVarQueryParameter['available'] = available;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a validation key if it exists, identified by the specified `keyId`. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get a validation key by `keyId`
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidationKey: async (keyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getValidationKey', 'keyId', keyId)
            const localVarPath = `/key_link/validation_keys/{keyId}`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of validation keys in the workspace Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get list of registered validation keys
         * @param {string} [pageCursor] Cursor to the next page
         * @param {number} [pageSize] Amount of results to return in the next page
         * @param {GetValidationKeysListSortByEnum} [sortBy] Field(s) to use for sorting
         * @param {GetValidationKeysListOrderEnum} [order] Is the order ascending or descending
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidationKeysList: async (pageCursor?: string, pageSize?: number, sortBy?: GetValidationKeysListSortByEnum, order?: GetValidationKeysListOrderEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/key_link/validation_keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Can modify existing signing key id if the key is not enabled. The change done in background and will be visible once applied. If key is already enabled (after proof of ownership) the user cannot be changed. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Set agent user id that can sign with the signing key identified by the Fireblocks provided `keyId`
         * @param {ModifySigningKeyAgentIdDto} modifySigningKeyAgentIdDto 
         * @param {string} keyId The unique identifier for the signing key provided by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAgentId: async (modifySigningKeyAgentIdDto: ModifySigningKeyAgentIdDto, keyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('setAgentId', 'modifySigningKeyAgentIdDto', modifySigningKeyAgentIdDto)
            assertParamExistsAndNotEmpty('setAgentId', 'keyId', keyId)
            const localVarPath = `/key_link/signing_keys/{keyId}/agent_user_id`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifySigningKeyAgentIdDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows assigning the signing key to a vault account, if it hasn\'t been assigned to any other vault accounts yet. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Modify the signing by Fireblocks provided `keyId`
         * @param {ModifySigningKeyDto} modifySigningKeyDto 
         * @param {string} keyId The unique identifier for the signing key provided by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSigningKey: async (modifySigningKeyDto: ModifySigningKeyDto, keyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('updateSigningKey', 'modifySigningKeyDto', modifySigningKeyDto)
            assertParamExistsAndNotEmpty('updateSigningKey', 'keyId', keyId)
            const localVarPath = `/key_link/signing_keys/{keyId}`
                .replace(`{${"keyId"}}`, encodeURIComponent(String(keyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifySigningKeyDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeyLinkBetaApi - functional programming interface
 * @export
 */
export const KeyLinkBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeyLinkBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a new signing key to the workspace. The added key will be linked to the specific Fireblocks agent user ID. The same user will receive the proof of ownership message to be signed, and upon successful proof, the key will become enabled. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Add a new signing key
         * @param {CreateSigningKeyDto} createSigningKeyDto 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSigningKey(createSigningKeyDto: CreateSigningKeyDto, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SigningKeyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSigningKey(createSigningKeyDto, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyLinkBetaApi.createSigningKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Adds a new validation key used to validate signing keys. The new validation key will undergo an approval process by the workspace quorum. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Add a new validation key
         * @param {CreateValidationKeyDto} createValidationKeyDto 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createValidationKey(createValidationKeyDto: CreateValidationKeyDto, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateValidationKeyResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createValidationKey(createValidationKeyDto, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyLinkBetaApi.createValidationKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows disabling validation key even if it has not expired yet. It is not allowed to enable the validation key back. Another key has to be used for future validations. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Disables a validation key
         * @param {ModifyValidationKeyDto} modifyValidationKeyDto 
         * @param {string} keyId The unique identifier for the validation key provided by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disableValidationKey(modifyValidationKeyDto: ModifyValidationKeyDto, keyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidationKeyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disableValidationKey(modifyValidationKeyDto, keyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyLinkBetaApi.disableValidationKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns a signing key if it exists, identified by the specified Fireblocks provided `keyId`. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get a signing key by `keyId`
         * @param {string} keyId The unique identifier for the signing key provided by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSigningKey(keyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SigningKeyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSigningKey(keyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyLinkBetaApi.getSigningKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns the list of signing keys in the workspace Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get list of signing keys
         * @param {string} [pageCursor] Cursor to the next page
         * @param {number} [pageSize] Amount of results to return in the next page
         * @param {GetSigningKeysListSortByEnum} [sortBy] Field(s) to use for sorting
         * @param {GetSigningKeysListOrderEnum} [order] Is the order ascending or descending
         * @param {number} [vaultAccountId] Return keys assigned to a specific vault
         * @param {string} [agentUserId] Return keys associated with a specific agent user
         * @param {GetSigningKeysListAlgorithmEnum} [algorithm] Return only keys with a specific algorithm
         * @param {boolean} [enabled] Return keys that have been proof of ownership
         * @param {boolean} [available] Return keys that are proof of ownership but not assigned. Available filter can be used only when vaultAccountId and enabled filters are not set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSigningKeysList(pageCursor?: string, pageSize?: number, sortBy?: GetSigningKeysListSortByEnum, order?: GetSigningKeysListOrderEnum, vaultAccountId?: number, agentUserId?: string, algorithm?: GetSigningKeysListAlgorithmEnum, enabled?: boolean, available?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSigningKeyResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSigningKeysList(pageCursor, pageSize, sortBy, order, vaultAccountId, agentUserId, algorithm, enabled, available, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyLinkBetaApi.getSigningKeysList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns a validation key if it exists, identified by the specified `keyId`. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get a validation key by `keyId`
         * @param {string} keyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidationKey(keyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidationKeyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidationKey(keyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyLinkBetaApi.getValidationKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns the list of validation keys in the workspace Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get list of registered validation keys
         * @param {string} [pageCursor] Cursor to the next page
         * @param {number} [pageSize] Amount of results to return in the next page
         * @param {GetValidationKeysListSortByEnum} [sortBy] Field(s) to use for sorting
         * @param {GetValidationKeysListOrderEnum} [order] Is the order ascending or descending
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidationKeysList(pageCursor?: string, pageSize?: number, sortBy?: GetValidationKeysListSortByEnum, order?: GetValidationKeysListOrderEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetValidationKeyResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidationKeysList(pageCursor, pageSize, sortBy, order, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyLinkBetaApi.getValidationKeysList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Can modify existing signing key id if the key is not enabled. The change done in background and will be visible once applied. If key is already enabled (after proof of ownership) the user cannot be changed. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Set agent user id that can sign with the signing key identified by the Fireblocks provided `keyId`
         * @param {ModifySigningKeyAgentIdDto} modifySigningKeyAgentIdDto 
         * @param {string} keyId The unique identifier for the signing key provided by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAgentId(modifySigningKeyAgentIdDto: ModifySigningKeyAgentIdDto, keyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAgentId(modifySigningKeyAgentIdDto, keyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyLinkBetaApi.setAgentId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Allows assigning the signing key to a vault account, if it hasn\'t been assigned to any other vault accounts yet. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Modify the signing by Fireblocks provided `keyId`
         * @param {ModifySigningKeyDto} modifySigningKeyDto 
         * @param {string} keyId The unique identifier for the signing key provided by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSigningKey(modifySigningKeyDto: ModifySigningKeyDto, keyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SigningKeyDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSigningKey(modifySigningKeyDto, keyId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeyLinkBetaApi.updateSigningKey']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * KeyLinkBetaApi - factory interface
 * @export
 */
export const KeyLinkBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeyLinkBetaApiFp(configuration)
    return {
        /**
         * Adds a new signing key to the workspace. The added key will be linked to the specific Fireblocks agent user ID. The same user will receive the proof of ownership message to be signed, and upon successful proof, the key will become enabled. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Add a new signing key
         * @param {KeyLinkBetaApiCreateSigningKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSigningKey(requestParameters: KeyLinkBetaApiCreateSigningKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<SigningKeyDto> {
            return localVarFp.createSigningKey(requestParameters.createSigningKeyDto, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a new validation key used to validate signing keys. The new validation key will undergo an approval process by the workspace quorum. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Add a new validation key
         * @param {KeyLinkBetaApiCreateValidationKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createValidationKey(requestParameters: KeyLinkBetaApiCreateValidationKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateValidationKeyResponseDto> {
            return localVarFp.createValidationKey(requestParameters.createValidationKeyDto, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows disabling validation key even if it has not expired yet. It is not allowed to enable the validation key back. Another key has to be used for future validations. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Disables a validation key
         * @param {KeyLinkBetaApiDisableValidationKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableValidationKey(requestParameters: KeyLinkBetaApiDisableValidationKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidationKeyDto> {
            return localVarFp.disableValidationKey(requestParameters.modifyValidationKeyDto, requestParameters.keyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a signing key if it exists, identified by the specified Fireblocks provided `keyId`. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get a signing key by `keyId`
         * @param {KeyLinkBetaApiGetSigningKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigningKey(requestParameters: KeyLinkBetaApiGetSigningKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<SigningKeyDto> {
            return localVarFp.getSigningKey(requestParameters.keyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of signing keys in the workspace Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get list of signing keys
         * @param {KeyLinkBetaApiGetSigningKeysListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSigningKeysList(requestParameters: KeyLinkBetaApiGetSigningKeysListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetSigningKeyResponseDto> {
            return localVarFp.getSigningKeysList(requestParameters.pageCursor, requestParameters.pageSize, requestParameters.sortBy, requestParameters.order, requestParameters.vaultAccountId, requestParameters.agentUserId, requestParameters.algorithm, requestParameters.enabled, requestParameters.available, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a validation key if it exists, identified by the specified `keyId`. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get a validation key by `keyId`
         * @param {KeyLinkBetaApiGetValidationKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidationKey(requestParameters: KeyLinkBetaApiGetValidationKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<ValidationKeyDto> {
            return localVarFp.getValidationKey(requestParameters.keyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of validation keys in the workspace Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Get list of registered validation keys
         * @param {KeyLinkBetaApiGetValidationKeysListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidationKeysList(requestParameters: KeyLinkBetaApiGetValidationKeysListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetValidationKeyResponseDto> {
            return localVarFp.getValidationKeysList(requestParameters.pageCursor, requestParameters.pageSize, requestParameters.sortBy, requestParameters.order, options).then((request) => request(axios, basePath));
        },
        /**
         * Can modify existing signing key id if the key is not enabled. The change done in background and will be visible once applied. If key is already enabled (after proof of ownership) the user cannot be changed. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Set agent user id that can sign with the signing key identified by the Fireblocks provided `keyId`
         * @param {KeyLinkBetaApiSetAgentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAgentId(requestParameters: KeyLinkBetaApiSetAgentIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setAgentId(requestParameters.modifySigningKeyAgentIdDto, requestParameters.keyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows assigning the signing key to a vault account, if it hasn\'t been assigned to any other vault accounts yet. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
         * @summary Modify the signing by Fireblocks provided `keyId`
         * @param {KeyLinkBetaApiUpdateSigningKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSigningKey(requestParameters: KeyLinkBetaApiUpdateSigningKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<SigningKeyDto> {
            return localVarFp.updateSigningKey(requestParameters.modifySigningKeyDto, requestParameters.keyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSigningKey operation in KeyLinkBetaApi.
 * @export
 * @interface KeyLinkBetaApiCreateSigningKeyRequest
 */
export interface KeyLinkBetaApiCreateSigningKeyRequest {
    /**
     * 
     * @type {CreateSigningKeyDto}
     * @memberof KeyLinkBetaApiCreateSigningKey
     */
    readonly createSigningKeyDto: CreateSigningKeyDto

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof KeyLinkBetaApiCreateSigningKey
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for createValidationKey operation in KeyLinkBetaApi.
 * @export
 * @interface KeyLinkBetaApiCreateValidationKeyRequest
 */
export interface KeyLinkBetaApiCreateValidationKeyRequest {
    /**
     * 
     * @type {CreateValidationKeyDto}
     * @memberof KeyLinkBetaApiCreateValidationKey
     */
    readonly createValidationKeyDto: CreateValidationKeyDto

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof KeyLinkBetaApiCreateValidationKey
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for disableValidationKey operation in KeyLinkBetaApi.
 * @export
 * @interface KeyLinkBetaApiDisableValidationKeyRequest
 */
export interface KeyLinkBetaApiDisableValidationKeyRequest {
    /**
     * 
     * @type {ModifyValidationKeyDto}
     * @memberof KeyLinkBetaApiDisableValidationKey
     */
    readonly modifyValidationKeyDto: ModifyValidationKeyDto

    /**
     * The unique identifier for the validation key provided by Fireblocks
     * @type {string}
     * @memberof KeyLinkBetaApiDisableValidationKey
     */
    readonly keyId: string
}

/**
 * Request parameters for getSigningKey operation in KeyLinkBetaApi.
 * @export
 * @interface KeyLinkBetaApiGetSigningKeyRequest
 */
export interface KeyLinkBetaApiGetSigningKeyRequest {
    /**
     * The unique identifier for the signing key provided by Fireblocks
     * @type {string}
     * @memberof KeyLinkBetaApiGetSigningKey
     */
    readonly keyId: string
}

/**
 * Request parameters for getSigningKeysList operation in KeyLinkBetaApi.
 * @export
 * @interface KeyLinkBetaApiGetSigningKeysListRequest
 */
export interface KeyLinkBetaApiGetSigningKeysListRequest {
    /**
     * Cursor to the next page
     * @type {string}
     * @memberof KeyLinkBetaApiGetSigningKeysList
     */
    readonly pageCursor?: string

    /**
     * Amount of results to return in the next page
     * @type {number}
     * @memberof KeyLinkBetaApiGetSigningKeysList
     */
    readonly pageSize?: number

    /**
     * Field(s) to use for sorting
     * @type {'createdAt'}
     * @memberof KeyLinkBetaApiGetSigningKeysList
     */
    readonly sortBy?: GetSigningKeysListSortByEnum

    /**
     * Is the order ascending or descending
     * @type {'ASC' | 'DESC'}
     * @memberof KeyLinkBetaApiGetSigningKeysList
     */
    readonly order?: GetSigningKeysListOrderEnum

    /**
     * Return keys assigned to a specific vault
     * @type {number}
     * @memberof KeyLinkBetaApiGetSigningKeysList
     */
    readonly vaultAccountId?: number

    /**
     * Return keys associated with a specific agent user
     * @type {string}
     * @memberof KeyLinkBetaApiGetSigningKeysList
     */
    readonly agentUserId?: string

    /**
     * Return only keys with a specific algorithm
     * @type {'ECDSA_SECP256K1' | 'EDDSA_ED25519'}
     * @memberof KeyLinkBetaApiGetSigningKeysList
     */
    readonly algorithm?: GetSigningKeysListAlgorithmEnum

    /**
     * Return keys that have been proof of ownership
     * @type {boolean}
     * @memberof KeyLinkBetaApiGetSigningKeysList
     */
    readonly enabled?: boolean

    /**
     * Return keys that are proof of ownership but not assigned. Available filter can be used only when vaultAccountId and enabled filters are not set
     * @type {boolean}
     * @memberof KeyLinkBetaApiGetSigningKeysList
     */
    readonly available?: boolean
}

/**
 * Request parameters for getValidationKey operation in KeyLinkBetaApi.
 * @export
 * @interface KeyLinkBetaApiGetValidationKeyRequest
 */
export interface KeyLinkBetaApiGetValidationKeyRequest {
    /**
     * 
     * @type {string}
     * @memberof KeyLinkBetaApiGetValidationKey
     */
    readonly keyId: string
}

/**
 * Request parameters for getValidationKeysList operation in KeyLinkBetaApi.
 * @export
 * @interface KeyLinkBetaApiGetValidationKeysListRequest
 */
export interface KeyLinkBetaApiGetValidationKeysListRequest {
    /**
     * Cursor to the next page
     * @type {string}
     * @memberof KeyLinkBetaApiGetValidationKeysList
     */
    readonly pageCursor?: string

    /**
     * Amount of results to return in the next page
     * @type {number}
     * @memberof KeyLinkBetaApiGetValidationKeysList
     */
    readonly pageSize?: number

    /**
     * Field(s) to use for sorting
     * @type {'createdAt'}
     * @memberof KeyLinkBetaApiGetValidationKeysList
     */
    readonly sortBy?: GetValidationKeysListSortByEnum

    /**
     * Is the order ascending or descending
     * @type {'ASC' | 'DESC'}
     * @memberof KeyLinkBetaApiGetValidationKeysList
     */
    readonly order?: GetValidationKeysListOrderEnum
}

/**
 * Request parameters for setAgentId operation in KeyLinkBetaApi.
 * @export
 * @interface KeyLinkBetaApiSetAgentIdRequest
 */
export interface KeyLinkBetaApiSetAgentIdRequest {
    /**
     * 
     * @type {ModifySigningKeyAgentIdDto}
     * @memberof KeyLinkBetaApiSetAgentId
     */
    readonly modifySigningKeyAgentIdDto: ModifySigningKeyAgentIdDto

    /**
     * The unique identifier for the signing key provided by Fireblocks
     * @type {string}
     * @memberof KeyLinkBetaApiSetAgentId
     */
    readonly keyId: string
}

/**
 * Request parameters for updateSigningKey operation in KeyLinkBetaApi.
 * @export
 * @interface KeyLinkBetaApiUpdateSigningKeyRequest
 */
export interface KeyLinkBetaApiUpdateSigningKeyRequest {
    /**
     * 
     * @type {ModifySigningKeyDto}
     * @memberof KeyLinkBetaApiUpdateSigningKey
     */
    readonly modifySigningKeyDto: ModifySigningKeyDto

    /**
     * The unique identifier for the signing key provided by Fireblocks
     * @type {string}
     * @memberof KeyLinkBetaApiUpdateSigningKey
     */
    readonly keyId: string
}

/**
 * KeyLinkBetaApi - object-oriented interface
 * @export
 * @class KeyLinkBetaApi
 * @extends {BaseAPI}
 */
export class KeyLinkBetaApi extends BaseAPI {
    /**
     * Adds a new signing key to the workspace. The added key will be linked to the specific Fireblocks agent user ID. The same user will receive the proof of ownership message to be signed, and upon successful proof, the key will become enabled. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     * @summary Add a new signing key
     * @param {KeyLinkBetaApiCreateSigningKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyLinkBetaApi
     */
    public createSigningKey(requestParameters: KeyLinkBetaApiCreateSigningKeyRequest) {
        return KeyLinkBetaApiFp(this.configuration).createSigningKey(requestParameters.createSigningKeyDto, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Adds a new validation key used to validate signing keys. The new validation key will undergo an approval process by the workspace quorum. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     * @summary Add a new validation key
     * @param {KeyLinkBetaApiCreateValidationKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyLinkBetaApi
     */
    public createValidationKey(requestParameters: KeyLinkBetaApiCreateValidationKeyRequest) {
        return KeyLinkBetaApiFp(this.configuration).createValidationKey(requestParameters.createValidationKeyDto, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Allows disabling validation key even if it has not expired yet. It is not allowed to enable the validation key back. Another key has to be used for future validations. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     * @summary Disables a validation key
     * @param {KeyLinkBetaApiDisableValidationKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyLinkBetaApi
     */
    public disableValidationKey(requestParameters: KeyLinkBetaApiDisableValidationKeyRequest) {
        return KeyLinkBetaApiFp(this.configuration).disableValidationKey(requestParameters.modifyValidationKeyDto, requestParameters.keyId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns a signing key if it exists, identified by the specified Fireblocks provided `keyId`. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     * @summary Get a signing key by `keyId`
     * @param {KeyLinkBetaApiGetSigningKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyLinkBetaApi
     */
    public getSigningKey(requestParameters: KeyLinkBetaApiGetSigningKeyRequest) {
        return KeyLinkBetaApiFp(this.configuration).getSigningKey(requestParameters.keyId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns the list of signing keys in the workspace Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     * @summary Get list of signing keys
     * @param {KeyLinkBetaApiGetSigningKeysListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyLinkBetaApi
     */
    public getSigningKeysList(requestParameters: KeyLinkBetaApiGetSigningKeysListRequest = {}) {
        return KeyLinkBetaApiFp(this.configuration).getSigningKeysList(requestParameters.pageCursor, requestParameters.pageSize, requestParameters.sortBy, requestParameters.order, requestParameters.vaultAccountId, requestParameters.agentUserId, requestParameters.algorithm, requestParameters.enabled, requestParameters.available).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns a validation key if it exists, identified by the specified `keyId`. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     * @summary Get a validation key by `keyId`
     * @param {KeyLinkBetaApiGetValidationKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyLinkBetaApi
     */
    public getValidationKey(requestParameters: KeyLinkBetaApiGetValidationKeyRequest) {
        return KeyLinkBetaApiFp(this.configuration).getValidationKey(requestParameters.keyId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns the list of validation keys in the workspace Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     * @summary Get list of registered validation keys
     * @param {KeyLinkBetaApiGetValidationKeysListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyLinkBetaApi
     */
    public getValidationKeysList(requestParameters: KeyLinkBetaApiGetValidationKeysListRequest = {}) {
        return KeyLinkBetaApiFp(this.configuration).getValidationKeysList(requestParameters.pageCursor, requestParameters.pageSize, requestParameters.sortBy, requestParameters.order).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Can modify existing signing key id if the key is not enabled. The change done in background and will be visible once applied. If key is already enabled (after proof of ownership) the user cannot be changed. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     * @summary Set agent user id that can sign with the signing key identified by the Fireblocks provided `keyId`
     * @param {KeyLinkBetaApiSetAgentIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyLinkBetaApi
     */
    public setAgentId(requestParameters: KeyLinkBetaApiSetAgentIdRequest) {
        return KeyLinkBetaApiFp(this.configuration).setAgentId(requestParameters.modifySigningKeyAgentIdDto, requestParameters.keyId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Allows assigning the signing key to a vault account, if it hasn\'t been assigned to any other vault accounts yet. Please note that this endpoint is available only for Key Link enabled workspaces. **Note:**  This endpoint is currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Key Link, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.
     * @summary Modify the signing by Fireblocks provided `keyId`
     * @param {KeyLinkBetaApiUpdateSigningKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeyLinkBetaApi
     */
    public updateSigningKey(requestParameters: KeyLinkBetaApiUpdateSigningKeyRequest) {
        return KeyLinkBetaApiFp(this.configuration).updateSigningKey(requestParameters.modifySigningKeyDto, requestParameters.keyId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

/**
 * @export
 */
export const GetSigningKeysListSortByEnum = {
    CreatedAt: 'createdAt'
} as const;
export type GetSigningKeysListSortByEnum = typeof GetSigningKeysListSortByEnum[keyof typeof GetSigningKeysListSortByEnum];
/**
 * @export
 */
export const GetSigningKeysListOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetSigningKeysListOrderEnum = typeof GetSigningKeysListOrderEnum[keyof typeof GetSigningKeysListOrderEnum];
/**
 * @export
 */
export const GetSigningKeysListAlgorithmEnum = {
    EcdsaSecp256K1: 'ECDSA_SECP256K1',
    EddsaEd25519: 'EDDSA_ED25519'
} as const;
export type GetSigningKeysListAlgorithmEnum = typeof GetSigningKeysListAlgorithmEnum[keyof typeof GetSigningKeysListAlgorithmEnum];
/**
 * @export
 */
export const GetValidationKeysListSortByEnum = {
    CreatedAt: 'createdAt'
} as const;
export type GetValidationKeysListSortByEnum = typeof GetValidationKeysListSortByEnum[keyof typeof GetValidationKeysListSortByEnum];
/**
 * @export
 */
export const GetValidationKeysListOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetValidationKeysListOrderEnum = typeof GetValidationKeysListOrderEnum[keyof typeof GetValidationKeysListOrderEnum];
