/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { NetworkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet200Response } from '../model/networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet200Response';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class NetworkConnectionApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * 
                * @summary The Fireblocks Network allows for flexibility around incoming deposits. A receiver can receive network deposits to locations other than Fireblocks. This endpoint validates whether future transactions are routed to the displayed recipient or to a 3rd party.
                * @param connectionId The ID of the network connection
                * @param assetType The destination asset type
            */
        public async networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet (connectionId: string, assetType: 'CRYPTO' | 'SIGNET' | 'SEN' | 'SIGNET_TEST' | 'SEN_TEST', ) : Promise<NetworkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet200Response> {
                const path = this.configuration.basePath + '/network_connections/{connectionId}/is_third_party_routing/{assetType}'
                .replace('{' + 'connectionId' + '}', encodeURIComponent(String(connectionId)))
                .replace('{' + 'assetType' + '}', encodeURIComponent(String(assetType)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'connectionId' is not null or undefined
                        if (connectionId === null || connectionId === undefined) {
                        throw new Error('Required parameter connectionId was null or undefined when calling networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet.');
                        }


                    if (typeof connectionId === 'object') {
                        for( const [key,value] of Object.entries(connectionId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['connectionId'] = ObjectSerializer.serialize(connectionId, "string");
                    }
                        // verify required parameter 'assetType' is not null or undefined
                        if (assetType === null || assetType === undefined) {
                        throw new Error('Required parameter assetType was null or undefined when calling networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet.');
                        }


                    if (typeof assetType === 'object') {
                        for( const [key,value] of Object.entries(assetType)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetType'] = ObjectSerializer.serialize(assetType, "'CRYPTO' | 'SIGNET' | 'SEN' | 'SIGNET_TEST' | 'SEN_TEST'");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<NetworkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet200Response>(requestOptions);
        }
        }
