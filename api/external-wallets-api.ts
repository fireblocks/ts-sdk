/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AddAssetToExternalWalletRequest } from '../models';
// @ts-ignore
import { CreateWalletRequest } from '../models';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { ExternalWalletAsset } from '../models';
// @ts-ignore
import { SetCustomerRefIdRequest } from '../models';
// @ts-ignore
import { UnmanagedWallet } from '../models';
/**
 * ExternalWalletsApi - axios parameter creator
 * @export
 */
export const ExternalWalletsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds an asset to an existing external wallet.
         * @summary Add an asset to an external wallet.
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to add
         * @param {AddAssetToExternalWalletRequest} [addAssetToExternalWalletRequest] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAssetToExternalWallet: async (walletId: string, assetId: string, addAssetToExternalWalletRequest?: AddAssetToExternalWalletRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('addAssetToExternalWallet', 'walletId', walletId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('addAssetToExternalWallet', 'assetId', assetId)
            const localVarPath = `/external_wallets/{walletId}/{assetId}`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addAssetToExternalWalletRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new external wallet with the requested name.
         * @summary Create an external wallet
         * @param {CreateWalletRequest} [createWalletRequest] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalWallet: async (createWalletRequest?: CreateWalletRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external_wallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWalletRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an external wallet by ID.
         * @summary Delete an external wallet
         * @param {string} walletId The ID of the wallet to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalWallet: async (walletId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('deleteExternalWallet', 'walletId', walletId)
            const localVarPath = `/external_wallets/{walletId}`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an external wallet by ID.
         * @summary Find an external wallet
         * @param {string} walletId The ID of the wallet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWallet: async (walletId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('getExternalWallet', 'walletId', walletId)
            const localVarPath = `/external_wallets/{walletId}`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an external wallet by wallet ID and asset ID.
         * @summary Get an asset from an external wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWalletAsset: async (walletId: string, assetId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('getExternalWalletAsset', 'walletId', walletId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getExternalWalletAsset', 'assetId', assetId)
            const localVarPath = `/external_wallets/{walletId}/{assetId}`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of external wallets under the workspace.
         * @summary List external wallets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWallets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/external_wallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an external wallet asset by ID.
         * @summary Delete an asset from an external wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAssetFromExternalWallet: async (walletId: string, assetId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('removeAssetFromExternalWallet', 'walletId', walletId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('removeAssetFromExternalWallet', 'assetId', assetId)
            const localVarPath = `/external_wallets/{walletId}/{assetId}`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets an AML/KYT customer reference ID for the specific external wallet.
         * @summary Set an AML customer reference ID for an external wallet
         * @param {SetCustomerRefIdRequest} setCustomerRefIdRequest 
         * @param {string} walletId The wallet ID
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExternalWalletCustomerRefId: async (setCustomerRefIdRequest: SetCustomerRefIdRequest, walletId: string, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setCustomerRefIdRequest' is not null or undefined
            assertParamExists('setExternalWalletCustomerRefId', 'setCustomerRefIdRequest', setCustomerRefIdRequest)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('setExternalWalletCustomerRefId', 'walletId', walletId)
            const localVarPath = `/external_wallets/{walletId}/set_customer_ref_id`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setCustomerRefIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExternalWalletsApi - functional programming interface
 * @export
 */
export const ExternalWalletsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExternalWalletsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds an asset to an existing external wallet.
         * @summary Add an asset to an external wallet.
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to add
         * @param {AddAssetToExternalWalletRequest} [addAssetToExternalWalletRequest] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAssetToExternalWallet(walletId: string, assetId: string, addAssetToExternalWalletRequest?: AddAssetToExternalWalletRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalWalletAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAssetToExternalWallet(walletId, assetId, addAssetToExternalWalletRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExternalWalletsApi.addAssetToExternalWallet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Creates a new external wallet with the requested name.
         * @summary Create an external wallet
         * @param {CreateWalletRequest} [createWalletRequest] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExternalWallet(createWalletRequest?: CreateWalletRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExternalWallet(createWalletRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExternalWalletsApi.createExternalWallet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Deletes an external wallet by ID.
         * @summary Delete an external wallet
         * @param {string} walletId The ID of the wallet to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExternalWallet(walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExternalWallet(walletId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExternalWalletsApi.deleteExternalWallet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns an external wallet by ID.
         * @summary Find an external wallet
         * @param {string} walletId The ID of the wallet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalWallet(walletId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalWallet(walletId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExternalWalletsApi.getExternalWallet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns an external wallet by wallet ID and asset ID.
         * @summary Get an asset from an external wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalWalletAsset(walletId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalWalletAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalWalletAsset(walletId, assetId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExternalWalletsApi.getExternalWalletAsset']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Gets a list of external wallets under the workspace.
         * @summary List external wallets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExternalWallets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UnmanagedWallet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExternalWallets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExternalWalletsApi.getExternalWallets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Deletes an external wallet asset by ID.
         * @summary Delete an asset from an external wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAssetFromExternalWallet(walletId: string, assetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAssetFromExternalWallet(walletId, assetId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExternalWalletsApi.removeAssetFromExternalWallet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Sets an AML/KYT customer reference ID for the specific external wallet.
         * @summary Set an AML customer reference ID for an external wallet
         * @param {SetCustomerRefIdRequest} setCustomerRefIdRequest 
         * @param {string} walletId The wallet ID
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setExternalWalletCustomerRefId(setCustomerRefIdRequest: SetCustomerRefIdRequest, walletId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setExternalWalletCustomerRefId(setCustomerRefIdRequest, walletId, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExternalWalletsApi.setExternalWalletCustomerRefId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ExternalWalletsApi - factory interface
 * @export
 */
export const ExternalWalletsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExternalWalletsApiFp(configuration)
    return {
        /**
         * Adds an asset to an existing external wallet.
         * @summary Add an asset to an external wallet.
         * @param {ExternalWalletsApiAddAssetToExternalWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAssetToExternalWallet(requestParameters: ExternalWalletsApiAddAssetToExternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExternalWalletAsset> {
            return localVarFp.addAssetToExternalWallet(requestParameters.walletId, requestParameters.assetId, requestParameters.addAssetToExternalWalletRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new external wallet with the requested name.
         * @summary Create an external wallet
         * @param {ExternalWalletsApiCreateExternalWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExternalWallet(requestParameters: ExternalWalletsApiCreateExternalWalletRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<UnmanagedWallet> {
            return localVarFp.createExternalWallet(requestParameters.createWalletRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an external wallet by ID.
         * @summary Delete an external wallet
         * @param {ExternalWalletsApiDeleteExternalWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExternalWallet(requestParameters: ExternalWalletsApiDeleteExternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExternalWallet(requestParameters.walletId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an external wallet by ID.
         * @summary Find an external wallet
         * @param {ExternalWalletsApiGetExternalWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWallet(requestParameters: ExternalWalletsApiGetExternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnmanagedWallet> {
            return localVarFp.getExternalWallet(requestParameters.walletId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an external wallet by wallet ID and asset ID.
         * @summary Get an asset from an external wallet
         * @param {ExternalWalletsApiGetExternalWalletAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWalletAsset(requestParameters: ExternalWalletsApiGetExternalWalletAssetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExternalWalletAsset> {
            return localVarFp.getExternalWalletAsset(requestParameters.walletId, requestParameters.assetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of external wallets under the workspace.
         * @summary List external wallets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExternalWallets(options?: RawAxiosRequestConfig): AxiosPromise<Array<UnmanagedWallet>> {
            return localVarFp.getExternalWallets(options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an external wallet asset by ID.
         * @summary Delete an asset from an external wallet
         * @param {ExternalWalletsApiRemoveAssetFromExternalWalletRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAssetFromExternalWallet(requestParameters: ExternalWalletsApiRemoveAssetFromExternalWalletRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeAssetFromExternalWallet(requestParameters.walletId, requestParameters.assetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets an AML/KYT customer reference ID for the specific external wallet.
         * @summary Set an AML customer reference ID for an external wallet
         * @param {ExternalWalletsApiSetExternalWalletCustomerRefIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setExternalWalletCustomerRefId(requestParameters: ExternalWalletsApiSetExternalWalletCustomerRefIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setExternalWalletCustomerRefId(requestParameters.setCustomerRefIdRequest, requestParameters.walletId, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAssetToExternalWallet operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiAddAssetToExternalWalletRequest
 */
export interface ExternalWalletsApiAddAssetToExternalWalletRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof ExternalWalletsApiAddAssetToExternalWallet
     */
    readonly walletId: string

    /**
     * The ID of the asset to add
     * @type {string}
     * @memberof ExternalWalletsApiAddAssetToExternalWallet
     */
    readonly assetId: string

    /**
     * 
     * @type {AddAssetToExternalWalletRequest}
     * @memberof ExternalWalletsApiAddAssetToExternalWallet
     */
    readonly addAssetToExternalWalletRequest?: AddAssetToExternalWalletRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ExternalWalletsApiAddAssetToExternalWallet
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for createExternalWallet operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiCreateExternalWalletRequest
 */
export interface ExternalWalletsApiCreateExternalWalletRequest {
    /**
     * 
     * @type {CreateWalletRequest}
     * @memberof ExternalWalletsApiCreateExternalWallet
     */
    readonly createWalletRequest?: CreateWalletRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ExternalWalletsApiCreateExternalWallet
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for deleteExternalWallet operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiDeleteExternalWalletRequest
 */
export interface ExternalWalletsApiDeleteExternalWalletRequest {
    /**
     * The ID of the wallet to delete
     * @type {string}
     * @memberof ExternalWalletsApiDeleteExternalWallet
     */
    readonly walletId: string
}

/**
 * Request parameters for getExternalWallet operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiGetExternalWalletRequest
 */
export interface ExternalWalletsApiGetExternalWalletRequest {
    /**
     * The ID of the wallet to return
     * @type {string}
     * @memberof ExternalWalletsApiGetExternalWallet
     */
    readonly walletId: string
}

/**
 * Request parameters for getExternalWalletAsset operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiGetExternalWalletAssetRequest
 */
export interface ExternalWalletsApiGetExternalWalletAssetRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof ExternalWalletsApiGetExternalWalletAsset
     */
    readonly walletId: string

    /**
     * The ID of the asset to return
     * @type {string}
     * @memberof ExternalWalletsApiGetExternalWalletAsset
     */
    readonly assetId: string
}

/**
 * Request parameters for removeAssetFromExternalWallet operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiRemoveAssetFromExternalWalletRequest
 */
export interface ExternalWalletsApiRemoveAssetFromExternalWalletRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof ExternalWalletsApiRemoveAssetFromExternalWallet
     */
    readonly walletId: string

    /**
     * The ID of the asset to delete
     * @type {string}
     * @memberof ExternalWalletsApiRemoveAssetFromExternalWallet
     */
    readonly assetId: string
}

/**
 * Request parameters for setExternalWalletCustomerRefId operation in ExternalWalletsApi.
 * @export
 * @interface ExternalWalletsApiSetExternalWalletCustomerRefIdRequest
 */
export interface ExternalWalletsApiSetExternalWalletCustomerRefIdRequest {
    /**
     * 
     * @type {SetCustomerRefIdRequest}
     * @memberof ExternalWalletsApiSetExternalWalletCustomerRefId
     */
    readonly setCustomerRefIdRequest: SetCustomerRefIdRequest

    /**
     * The wallet ID
     * @type {string}
     * @memberof ExternalWalletsApiSetExternalWalletCustomerRefId
     */
    readonly walletId: string

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ExternalWalletsApiSetExternalWalletCustomerRefId
     */
    readonly idempotencyKey?: string
}

/**
 * ExternalWalletsApi - object-oriented interface
 * @export
 * @class ExternalWalletsApi
 * @extends {BaseAPI}
 */
export class ExternalWalletsApi extends BaseAPI {
    /**
     * Adds an asset to an existing external wallet.
     * @summary Add an asset to an external wallet.
     * @param {ExternalWalletsApiAddAssetToExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    public addAssetToExternalWallet(requestParameters: ExternalWalletsApiAddAssetToExternalWalletRequest) {
        return ExternalWalletsApiFp(this.configuration).addAssetToExternalWallet(requestParameters.walletId, requestParameters.assetId, requestParameters.addAssetToExternalWalletRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Creates a new external wallet with the requested name.
     * @summary Create an external wallet
     * @param {ExternalWalletsApiCreateExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    public createExternalWallet(requestParameters: ExternalWalletsApiCreateExternalWalletRequest = {}) {
        return ExternalWalletsApiFp(this.configuration).createExternalWallet(requestParameters.createWalletRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Deletes an external wallet by ID.
     * @summary Delete an external wallet
     * @param {ExternalWalletsApiDeleteExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    public deleteExternalWallet(requestParameters: ExternalWalletsApiDeleteExternalWalletRequest) {
        return ExternalWalletsApiFp(this.configuration).deleteExternalWallet(requestParameters.walletId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns an external wallet by ID.
     * @summary Find an external wallet
     * @param {ExternalWalletsApiGetExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    public getExternalWallet(requestParameters: ExternalWalletsApiGetExternalWalletRequest) {
        return ExternalWalletsApiFp(this.configuration).getExternalWallet(requestParameters.walletId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns an external wallet by wallet ID and asset ID.
     * @summary Get an asset from an external wallet
     * @param {ExternalWalletsApiGetExternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    public getExternalWalletAsset(requestParameters: ExternalWalletsApiGetExternalWalletAssetRequest) {
        return ExternalWalletsApiFp(this.configuration).getExternalWalletAsset(requestParameters.walletId, requestParameters.assetId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Gets a list of external wallets under the workspace.
     * @summary List external wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    public getExternalWallets() {
        return ExternalWalletsApiFp(this.configuration).getExternalWallets().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Deletes an external wallet asset by ID.
     * @summary Delete an asset from an external wallet
     * @param {ExternalWalletsApiRemoveAssetFromExternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    public removeAssetFromExternalWallet(requestParameters: ExternalWalletsApiRemoveAssetFromExternalWalletRequest) {
        return ExternalWalletsApiFp(this.configuration).removeAssetFromExternalWallet(requestParameters.walletId, requestParameters.assetId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Sets an AML/KYT customer reference ID for the specific external wallet.
     * @summary Set an AML customer reference ID for an external wallet
     * @param {ExternalWalletsApiSetExternalWalletCustomerRefIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExternalWalletsApi
     */
    public setExternalWalletCustomerRefId(requestParameters: ExternalWalletsApiSetExternalWalletCustomerRefIdRequest) {
        return ExternalWalletsApiFp(this.configuration).setExternalWalletCustomerRefId(requestParameters.setCustomerRefIdRequest, requestParameters.walletId, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

