/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { ConvertAssetsRequest } from '../model/convertAssetsRequest';
    import { ExchangeAccount } from '../model/exchangeAccount';
    import { ExchangeAsset } from '../model/exchangeAsset';
    import { InternalTransferRequest } from '../model/internalTransferRequest';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class ExchangeAccountsApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Convert assets within an exchange account
                * @summary Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
                * @param exchangeAccountId The ID of the exchange account. Please make sure the exchange supports conversions. To find the ID of your exchange account, use GET/exchange_accounts.
                * @param convertAssetsRequest 
            */
        public async convertAssets (exchangeAccountId: string, convertAssetsRequest?: ConvertAssetsRequest, ) : Promise<any> {
                const path = this.configuration.basePath + '/exchange_accounts/{exchangeAccountId}/convert'
                .replace('{' + 'exchangeAccountId' + '}', encodeURIComponent(String(exchangeAccountId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'exchangeAccountId' is not null or undefined
                        if (exchangeAccountId === null || exchangeAccountId === undefined) {
                        throw new Error('Required parameter exchangeAccountId was null or undefined when calling convertAssets.');
                        }


                    if (typeof exchangeAccountId === 'object') {
                        for( const [key,value] of Object.entries(exchangeAccountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['exchangeAccountId'] = ObjectSerializer.serialize(exchangeAccountId, "string");
                    }

                    if (typeof convertAssetsRequest === 'object') {
                        for( const [key,value] of Object.entries(convertAssetsRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['ConvertAssetsRequest'] = ObjectSerializer.serialize(convertAssetsRequest, "ConvertAssetsRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            * Returns an asset for an exchange account.
                * @summary Find an asset for an exchange account
                * @param exchangeAccountId The ID of the exchange account to return
                * @param assetId The ID of the asset to return
            */
        public async getExchangeAccountAsset (exchangeAccountId: string, assetId: string, ) : Promise<ExchangeAsset> {
                const path = this.configuration.basePath + '/exchange_accounts/{exchangeAccountId}/{assetId}'
                .replace('{' + 'exchangeAccountId' + '}', encodeURIComponent(String(exchangeAccountId)))
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'exchangeAccountId' is not null or undefined
                        if (exchangeAccountId === null || exchangeAccountId === undefined) {
                        throw new Error('Required parameter exchangeAccountId was null or undefined when calling getExchangeAccountAsset.');
                        }


                    if (typeof exchangeAccountId === 'object') {
                        for( const [key,value] of Object.entries(exchangeAccountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['exchangeAccountId'] = ObjectSerializer.serialize(exchangeAccountId, "string");
                    }
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling getExchangeAccountAsset.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<ExchangeAsset>(requestOptions);
        }
            /**
            * Returns an exchange account by ID.
                * @summary Find a specific exchange account
                * @param exchangeAccountId The ID of the exchange account to return
            */
        public async getExchangeAccountById (exchangeAccountId: string, ) : Promise<ExchangeAccount> {
                const path = this.configuration.basePath + '/exchange_accounts/{exchangeAccountId}'
                .replace('{' + 'exchangeAccountId' + '}', encodeURIComponent(String(exchangeAccountId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'exchangeAccountId' is not null or undefined
                        if (exchangeAccountId === null || exchangeAccountId === undefined) {
                        throw new Error('Required parameter exchangeAccountId was null or undefined when calling getExchangeAccountById.');
                        }


                    if (typeof exchangeAccountId === 'object') {
                        for( const [key,value] of Object.entries(exchangeAccountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['exchangeAccountId'] = ObjectSerializer.serialize(exchangeAccountId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<ExchangeAccount>(requestOptions);
        }
            /**
            * Returns all exchange accounts.
                * @summary List exchange accounts
            */
        public async getExchangeAccounts () : Promise<Array<ExchangeAccount>> {
                const path = this.configuration.basePath + '/exchange_accounts';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<ExchangeAccount>>(requestOptions);
        }
            /**
            * Transfers funds between trading accounts under the same exchange account.
                * @summary Internal tranfer for exchange accounts
                * @param exchangeAccountId The ID of the exchange account to return
                * @param internalTransferRequest 
            */
        public async internalTransfer (exchangeAccountId: string, internalTransferRequest?: InternalTransferRequest, ) : Promise<any> {
                const path = this.configuration.basePath + '/exchange_accounts/{exchangeAccountId}/internal_transfer'
                .replace('{' + 'exchangeAccountId' + '}', encodeURIComponent(String(exchangeAccountId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'exchangeAccountId' is not null or undefined
                        if (exchangeAccountId === null || exchangeAccountId === undefined) {
                        throw new Error('Required parameter exchangeAccountId was null or undefined when calling internalTransfer.');
                        }


                    if (typeof exchangeAccountId === 'object') {
                        for( const [key,value] of Object.entries(exchangeAccountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['exchangeAccountId'] = ObjectSerializer.serialize(exchangeAccountId, "string");
                    }

                    if (typeof internalTransferRequest === 'object') {
                        for( const [key,value] of Object.entries(internalTransferRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['InternalTransferRequest'] = ObjectSerializer.serialize(internalTransferRequest, "InternalTransferRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
        }
