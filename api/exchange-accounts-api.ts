/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';


// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { ConvertAssetsRequest } from '../models';
// @ts-ignore
import { CreateInternalTransferRequest } from '../models';
// @ts-ignore
import { ExchangeAccount } from '../models';
// @ts-ignore
import { ExchangeAsset } from '../models';



    /**
 * ExchangeAccountsApi - axios parameter creator
 * @export
 */
export const ExchangeAccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
         * @param {string} exchangeAccountId The ID of the exchange account. Please make sure the exchange supports conversions. To find the ID of your exchange account, use GET/exchange_accounts.
         * @param {ConvertAssetsRequest} [convertAssetsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertAssets: async (exchangeAccountId: string, convertAssetsRequest?: ConvertAssetsRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'exchangeAccountId' is not null or undefined
            assertParamExists('convertAssets', 'exchangeAccountId', exchangeAccountId)
            const localVarPath = `/exchange_accounts/{exchangeAccountId}/convert`
                .replace(`{${"exchangeAccountId"}}`, encodeURIComponent(String(exchangeAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = convertAssetsRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns an asset for an exchange account.
         * @summary Find an asset for an exchange account
         * @param {string} exchangeAccountId The ID of the exchange account to return
         * @param {string} assetId The ID of the asset to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeAccountAsset: async (exchangeAccountId: string, assetId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'exchangeAccountId' is not null or undefined
            assertParamExists('getExchangeAccountAsset', 'exchangeAccountId', exchangeAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getExchangeAccountAsset', 'assetId', assetId)
            const localVarPath = `/exchange_accounts/{exchangeAccountId}/{assetId}`
                .replace(`{${"exchangeAccountId"}}`, encodeURIComponent(String(exchangeAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns an exchange account by ID.
         * @summary Find a specific exchange account
         * @param {string} exchangeAccountId The ID of the exchange account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeAccountById: async (exchangeAccountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'exchangeAccountId' is not null or undefined
            assertParamExists('getExchangeAccountById', 'exchangeAccountId', exchangeAccountId)
            const localVarPath = `/exchange_accounts/{exchangeAccountId}`
                .replace(`{${"exchangeAccountId"}}`, encodeURIComponent(String(exchangeAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns all exchange accounts.
         * @summary List exchange accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExchangeAccounts: async (): Promise<AxiosRequestConfig> => {
            const localVarPath = `/exchange_accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Transfers funds between trading accounts under the same exchange account.
         * @summary Internal tranfer for exchange accounts
         * @param {string} exchangeAccountId The ID of the exchange account to return
         * @param {CreateInternalTransferRequest} [createInternalTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        internalTransfer: async (exchangeAccountId: string, createInternalTransferRequest?: CreateInternalTransferRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'exchangeAccountId' is not null or undefined
            assertParamExists('internalTransfer', 'exchangeAccountId', exchangeAccountId)
            const localVarPath = `/exchange_accounts/{exchangeAccountId}/internal_transfer`
                .replace(`{${"exchangeAccountId"}}`, encodeURIComponent(String(exchangeAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = createInternalTransferRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * ExchangeAccountsApi - functional programming interface
 * @export
 */
export const ExchangeAccountsApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = ExchangeAccountsApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * 
         * @summary Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
         * @param {string} exchangeAccountId The ID of the exchange account. Please make sure the exchange supports conversions. To find the ID of your exchange account, use GET/exchange_accounts.
         * @param {ConvertAssetsRequest} [convertAssetsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertAssets(exchangeAccountId: string, convertAssetsRequest?: ConvertAssetsRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertAssets(exchangeAccountId, convertAssetsRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns an asset for an exchange account.
         * @summary Find an asset for an exchange account
         * @param {string} exchangeAccountId The ID of the exchange account to return
         * @param {string} assetId The ID of the asset to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExchangeAccountAsset(exchangeAccountId: string, assetId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExchangeAccountAsset(exchangeAccountId, assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns an exchange account by ID.
         * @summary Find a specific exchange account
         * @param {string} exchangeAccountId The ID of the exchange account to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExchangeAccountById(exchangeAccountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExchangeAccountById(exchangeAccountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns all exchange accounts.
         * @summary List exchange accounts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExchangeAccounts(): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExchangeAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExchangeAccounts();
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Transfers funds between trading accounts under the same exchange account.
         * @summary Internal tranfer for exchange accounts
         * @param {string} exchangeAccountId The ID of the exchange account to return
         * @param {CreateInternalTransferRequest} [createInternalTransferRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async internalTransfer(exchangeAccountId: string, createInternalTransferRequest?: CreateInternalTransferRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.internalTransfer(exchangeAccountId, createInternalTransferRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for convertAssets operation in ExchangeAccountsApi.
 * @export
 * @interface ExchangeAccountsApiConvertAssetsRequest
 */
export interface ExchangeAccountsApiConvertAssetsRequest {
    /**
     * The ID of the exchange account. Please make sure the exchange supports conversions. To find the ID of your exchange account, use GET/exchange_accounts.
     * @type {string}
     * @memberof ExchangeAccountsApiConvertAssets
     */
    readonly exchangeAccountId: string

    /**
     * 
     * @type {ConvertAssetsRequest}
     * @memberof ExchangeAccountsApiConvertAssets
     */
    readonly convertAssetsRequest?: ConvertAssetsRequest
}

/**
 * Request parameters for getExchangeAccountAsset operation in ExchangeAccountsApi.
 * @export
 * @interface ExchangeAccountsApiGetExchangeAccountAssetRequest
 */
export interface ExchangeAccountsApiGetExchangeAccountAssetRequest {
    /**
     * The ID of the exchange account to return
     * @type {string}
     * @memberof ExchangeAccountsApiGetExchangeAccountAsset
     */
    readonly exchangeAccountId: string

    /**
     * The ID of the asset to return
     * @type {string}
     * @memberof ExchangeAccountsApiGetExchangeAccountAsset
     */
    readonly assetId: string
}

/**
 * Request parameters for getExchangeAccountById operation in ExchangeAccountsApi.
 * @export
 * @interface ExchangeAccountsApiGetExchangeAccountByIdRequest
 */
export interface ExchangeAccountsApiGetExchangeAccountByIdRequest {
    /**
     * The ID of the exchange account to return
     * @type {string}
     * @memberof ExchangeAccountsApiGetExchangeAccountById
     */
    readonly exchangeAccountId: string
}

/**
 * Request parameters for internalTransfer operation in ExchangeAccountsApi.
 * @export
 * @interface ExchangeAccountsApiInternalTransferRequest
 */
export interface ExchangeAccountsApiInternalTransferRequest {
    /**
     * The ID of the exchange account to return
     * @type {string}
     * @memberof ExchangeAccountsApiInternalTransfer
     */
    readonly exchangeAccountId: string

    /**
     * 
     * @type {CreateInternalTransferRequest}
     * @memberof ExchangeAccountsApiInternalTransfer
     */
    readonly createInternalTransferRequest?: CreateInternalTransferRequest
}

/**
 * ExchangeAccountsApi - object-oriented interface
 * @export
 * @class ExchangeAccountsApi
 * @extends {BaseAPI}
 */
export class ExchangeAccountsApi extends BaseAPI {
    /**
     * 
     * @summary Convert exchange account funds from the source asset to the destination asset. Coinbase (USD to USDC, USDC to USD) and Bitso (MXN to USD) are supported conversions.
     * @param {ExchangeAccountsApiConvertAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    public convertAssets(requestParameters: ExchangeAccountsApiConvertAssetsRequest, ) {
        return ExchangeAccountsApiFp(this.httpClient).convertAssets(requestParameters.exchangeAccountId, requestParameters.convertAssetsRequest, );
    }

    /**
     * Returns an asset for an exchange account.
     * @summary Find an asset for an exchange account
     * @param {ExchangeAccountsApiGetExchangeAccountAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    public getExchangeAccountAsset(requestParameters: ExchangeAccountsApiGetExchangeAccountAssetRequest, ) {
        return ExchangeAccountsApiFp(this.httpClient).getExchangeAccountAsset(requestParameters.exchangeAccountId, requestParameters.assetId, );
    }

    /**
     * Returns an exchange account by ID.
     * @summary Find a specific exchange account
     * @param {ExchangeAccountsApiGetExchangeAccountByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    public getExchangeAccountById(requestParameters: ExchangeAccountsApiGetExchangeAccountByIdRequest, ) {
        return ExchangeAccountsApiFp(this.httpClient).getExchangeAccountById(requestParameters.exchangeAccountId, );
    }

    /**
     * Returns all exchange accounts.
     * @summary List exchange accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    public getExchangeAccounts() {
        return ExchangeAccountsApiFp(this.httpClient).getExchangeAccounts();
    }

    /**
     * Transfers funds between trading accounts under the same exchange account.
     * @summary Internal tranfer for exchange accounts
     * @param {ExchangeAccountsApiInternalTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExchangeAccountsApi
     */
    public internalTransfer(requestParameters: ExchangeAccountsApiInternalTransferRequest, ) {
        return ExchangeAccountsApiFp(this.httpClient).internalTransfer(requestParameters.exchangeAccountId, requestParameters.createInternalTransferRequest, );
    }
}
