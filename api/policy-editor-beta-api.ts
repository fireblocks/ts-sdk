/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { LegacyDraftReviewAndValidationResponse } from '../models';
// @ts-ignore
import { LegacyPolicyAndValidationResponse } from '../models';
// @ts-ignore
import { LegacyPolicyRules } from '../models';
// @ts-ignore
import { LegacyPublishDraftRequest } from '../models';
// @ts-ignore
import { LegacyPublishResult } from '../models';
/**
 * PolicyEditorBetaApi - axios parameter creator
 * @export
 */
export const PolicyEditorBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Legacy Endpoint – Returns the active policy and its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `getActivePolicy` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get the active policy and its validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivePolicyLegacy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tap/active_policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Legacy Endpoint – Returns the active draft and its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `getDraft` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get the active draft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraftLegacy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tap/draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Legacy Endpoint – Send publish request of certain draft id and returns the response. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `publishDraft` endpoint under policy/paths provides improved functionality and better performance.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a certain draft id
         * @param {LegacyPublishDraftRequest} legacyPublishDraftRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishDraftLegacy: async (legacyPublishDraftRequest: LegacyPublishDraftRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('publishDraftLegacy', 'legacyPublishDraftRequest', legacyPublishDraftRequest)
            const localVarPath = `/tap/draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(legacyPublishDraftRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send publish request of set of policy rules and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a set of policy rules
         * @param {LegacyPolicyRules} legacyPolicyRules 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPolicyRules: async (legacyPolicyRules: LegacyPolicyRules, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('publishPolicyRules', 'legacyPolicyRules', legacyPolicyRules)
            const localVarPath = `/tap/publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(legacyPolicyRules, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Legacy Endpoint – Update the draft and return its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `updateDraft` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Update the draft with a new set of rules
         * @param {LegacyPolicyRules} legacyPolicyRules 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDraftLegacy: async (legacyPolicyRules: LegacyPolicyRules, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('updateDraftLegacy', 'legacyPolicyRules', legacyPolicyRules)
            const localVarPath = `/tap/draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(legacyPolicyRules, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicyEditorBetaApi - functional programming interface
 * @export
 */
export const PolicyEditorBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PolicyEditorBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Legacy Endpoint – Returns the active policy and its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `getActivePolicy` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get the active policy and its validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivePolicyLegacy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegacyPolicyAndValidationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivePolicyLegacy(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PolicyEditorBetaApi.getActivePolicyLegacy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Legacy Endpoint – Returns the active draft and its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `getDraft` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get the active draft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDraftLegacy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegacyDraftReviewAndValidationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDraftLegacy(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PolicyEditorBetaApi.getDraftLegacy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Legacy Endpoint – Send publish request of certain draft id and returns the response. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `publishDraft` endpoint under policy/paths provides improved functionality and better performance.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a certain draft id
         * @param {LegacyPublishDraftRequest} legacyPublishDraftRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishDraftLegacy(legacyPublishDraftRequest: LegacyPublishDraftRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegacyPublishResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishDraftLegacy(legacyPublishDraftRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PolicyEditorBetaApi.publishDraftLegacy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Send publish request of set of policy rules and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a set of policy rules
         * @param {LegacyPolicyRules} legacyPolicyRules 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishPolicyRules(legacyPolicyRules: LegacyPolicyRules, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegacyPublishResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishPolicyRules(legacyPolicyRules, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PolicyEditorBetaApi.publishPolicyRules']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Legacy Endpoint – Update the draft and return its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `updateDraft` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Update the draft with a new set of rules
         * @param {LegacyPolicyRules} legacyPolicyRules 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDraftLegacy(legacyPolicyRules: LegacyPolicyRules, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LegacyDraftReviewAndValidationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDraftLegacy(legacyPolicyRules, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PolicyEditorBetaApi.updateDraftLegacy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PolicyEditorBetaApi - factory interface
 * @export
 */
export const PolicyEditorBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PolicyEditorBetaApiFp(configuration)
    return {
        /**
         * Legacy Endpoint – Returns the active policy and its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `getActivePolicy` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get the active policy and its validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivePolicyLegacy(options?: RawAxiosRequestConfig): AxiosPromise<LegacyPolicyAndValidationResponse> {
            return localVarFp.getActivePolicyLegacy(options).then((request) => request(axios, basePath));
        },
        /**
         * Legacy Endpoint – Returns the active draft and its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `getDraft` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get the active draft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraftLegacy(options?: RawAxiosRequestConfig): AxiosPromise<LegacyDraftReviewAndValidationResponse> {
            return localVarFp.getDraftLegacy(options).then((request) => request(axios, basePath));
        },
        /**
         * Legacy Endpoint – Send publish request of certain draft id and returns the response. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `publishDraft` endpoint under policy/paths provides improved functionality and better performance.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a certain draft id
         * @param {PolicyEditorBetaApiPublishDraftLegacyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishDraftLegacy(requestParameters: PolicyEditorBetaApiPublishDraftLegacyRequest, options?: RawAxiosRequestConfig): AxiosPromise<LegacyPublishResult> {
            return localVarFp.publishDraftLegacy(requestParameters.legacyPublishDraftRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Send publish request of set of policy rules and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a set of policy rules
         * @param {PolicyEditorBetaApiPublishPolicyRulesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPolicyRules(requestParameters: PolicyEditorBetaApiPublishPolicyRulesRequest, options?: RawAxiosRequestConfig): AxiosPromise<LegacyPublishResult> {
            return localVarFp.publishPolicyRules(requestParameters.legacyPolicyRules, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Legacy Endpoint – Update the draft and return its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `updateDraft` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Update the draft with a new set of rules
         * @param {PolicyEditorBetaApiUpdateDraftLegacyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDraftLegacy(requestParameters: PolicyEditorBetaApiUpdateDraftLegacyRequest, options?: RawAxiosRequestConfig): AxiosPromise<LegacyDraftReviewAndValidationResponse> {
            return localVarFp.updateDraftLegacy(requestParameters.legacyPolicyRules, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for publishDraftLegacy operation in PolicyEditorBetaApi.
 * @export
 * @interface PolicyEditorBetaApiPublishDraftLegacyRequest
 */
export interface PolicyEditorBetaApiPublishDraftLegacyRequest {
    /**
     * 
     * @type {LegacyPublishDraftRequest}
     * @memberof PolicyEditorBetaApiPublishDraftLegacy
     */
    readonly legacyPublishDraftRequest: LegacyPublishDraftRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof PolicyEditorBetaApiPublishDraftLegacy
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for publishPolicyRules operation in PolicyEditorBetaApi.
 * @export
 * @interface PolicyEditorBetaApiPublishPolicyRulesRequest
 */
export interface PolicyEditorBetaApiPublishPolicyRulesRequest {
    /**
     * 
     * @type {LegacyPolicyRules}
     * @memberof PolicyEditorBetaApiPublishPolicyRules
     */
    readonly legacyPolicyRules: LegacyPolicyRules

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof PolicyEditorBetaApiPublishPolicyRules
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for updateDraftLegacy operation in PolicyEditorBetaApi.
 * @export
 * @interface PolicyEditorBetaApiUpdateDraftLegacyRequest
 */
export interface PolicyEditorBetaApiUpdateDraftLegacyRequest {
    /**
     * 
     * @type {LegacyPolicyRules}
     * @memberof PolicyEditorBetaApiUpdateDraftLegacy
     */
    readonly legacyPolicyRules: LegacyPolicyRules

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof PolicyEditorBetaApiUpdateDraftLegacy
     */
    readonly idempotencyKey?: string
}

/**
 * PolicyEditorBetaApi - object-oriented interface
 * @export
 * @class PolicyEditorBetaApi
 * @extends {BaseAPI}
 */
export class PolicyEditorBetaApi extends BaseAPI {
    /**
     * Legacy Endpoint – Returns the active policy and its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `getActivePolicy` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Get the active policy and its validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorBetaApi
     */
    public getActivePolicyLegacy() {
        return PolicyEditorBetaApiFp(this.configuration).getActivePolicyLegacy().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Legacy Endpoint – Returns the active draft and its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `getDraft` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Get the active draft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorBetaApi
     */
    public getDraftLegacy() {
        return PolicyEditorBetaApiFp(this.configuration).getDraftLegacy().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Legacy Endpoint – Send publish request of certain draft id and returns the response. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `publishDraft` endpoint under policy/paths provides improved functionality and better performance.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Send publish request for a certain draft id
     * @param {PolicyEditorBetaApiPublishDraftLegacyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorBetaApi
     */
    public publishDraftLegacy(requestParameters: PolicyEditorBetaApiPublishDraftLegacyRequest) {
        return PolicyEditorBetaApiFp(this.configuration).publishDraftLegacy(requestParameters.legacyPublishDraftRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Send publish request of set of policy rules and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Send publish request for a set of policy rules
     * @param {PolicyEditorBetaApiPublishPolicyRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorBetaApi
     */
    public publishPolicyRules(requestParameters: PolicyEditorBetaApiPublishPolicyRulesRequest) {
        return PolicyEditorBetaApiFp(this.configuration).publishPolicyRules(requestParameters.legacyPolicyRules, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Legacy Endpoint – Update the draft and return its validation. </br> **Note:**  - This endpoint will remain available for the foreseeable future and is not deprecated.</br> - The `updateDraft` endpoint under policy/paths provides policy type-specific operations and improved functionality.</br> - These endpoints are currently in beta and might be subject to changes.</br> If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Update the draft with a new set of rules
     * @param {PolicyEditorBetaApiUpdateDraftLegacyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorBetaApi
     */
    public updateDraftLegacy(requestParameters: PolicyEditorBetaApiUpdateDraftLegacyRequest) {
        return PolicyEditorBetaApiFp(this.configuration).updateDraftLegacy(requestParameters.legacyPolicyRules, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

