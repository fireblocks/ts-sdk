/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';


// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { DraftReviewAndValidationResponse } from '../models';
// @ts-ignore
import { PolicyAndValidationResponse } from '../models';
// @ts-ignore
import { PublishDraftRequest } from '../models';
// @ts-ignore
import { PublishPolicyRulesRequest } from '../models';
// @ts-ignore
import { PublishResult } from '../models';
// @ts-ignore
import { UpdateDraftRequest } from '../models';



    /**
 * PolicyEditorBetaApi - axios parameter creator
 * @export
 */
export const PolicyEditorBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the active policy and its validation. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get the active policy and its validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivePolicy: async (): Promise<AxiosRequestConfig> => {
            const localVarPath = `/tap/active_policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns the active draft and its validation. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get the active draft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraft: async (): Promise<AxiosRequestConfig> => {
            const localVarPath = `/tap/draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Send publish request of certain draft id and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a certain draft id
         * @param {PublishDraftRequest} publishDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishDraft: async (publishDraftRequest: PublishDraftRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'publishDraftRequest' is not null or undefined
            assertParamExists('publishDraft', 'publishDraftRequest', publishDraftRequest)
            const localVarPath = `/tap/draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = publishDraftRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Send publish request of set of policy rules and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a set of policy rules
         * @param {PublishPolicyRulesRequest} publishPolicyRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPolicyRules: async (publishPolicyRulesRequest: PublishPolicyRulesRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'publishPolicyRulesRequest' is not null or undefined
            assertParamExists('publishPolicyRules', 'publishPolicyRulesRequest', publishPolicyRulesRequest)
            const localVarPath = `/tap/publish`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = publishPolicyRulesRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Update the draft and return its validation. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Update the draft with a new set of rules
         * @param {UpdateDraftRequest} updateDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDraft: async (updateDraftRequest: UpdateDraftRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'updateDraftRequest' is not null or undefined
            assertParamExists('updateDraft', 'updateDraftRequest', updateDraftRequest)
            const localVarPath = `/tap/draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PUT'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = updateDraftRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicyEditorBetaApi - functional programming interface
 * @export
 */
export const PolicyEditorBetaApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = PolicyEditorBetaApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * Returns the active policy and its validation. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get the active policy and its validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivePolicy(): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyAndValidationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivePolicy();
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns the active draft and its validation. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get the active draft
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDraft(): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DraftReviewAndValidationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDraft();
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Send publish request of certain draft id and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a certain draft id
         * @param {PublishDraftRequest} publishDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishDraft(publishDraftRequest: PublishDraftRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishDraft(publishDraftRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Send publish request of set of policy rules and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a set of policy rules
         * @param {PublishPolicyRulesRequest} publishPolicyRulesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishPolicyRules(publishPolicyRulesRequest: PublishPolicyRulesRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishPolicyRules(publishPolicyRulesRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Update the draft and return its validation. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Update the draft with a new set of rules
         * @param {UpdateDraftRequest} updateDraftRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDraft(updateDraftRequest: UpdateDraftRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DraftReviewAndValidationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDraft(updateDraftRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for publishDraft operation in PolicyEditorBetaApi.
 * @export
 * @interface PolicyEditorBetaApiPublishDraftRequest
 */
export interface PolicyEditorBetaApiPublishDraftRequest {
    /**
     * 
     * @type {PublishDraftRequest}
     * @memberof PolicyEditorBetaApiPublishDraft
     */
    readonly publishDraftRequest: PublishDraftRequest
}

/**
 * Request parameters for publishPolicyRules operation in PolicyEditorBetaApi.
 * @export
 * @interface PolicyEditorBetaApiPublishPolicyRulesRequest
 */
export interface PolicyEditorBetaApiPublishPolicyRulesRequest {
    /**
     * 
     * @type {PublishPolicyRulesRequest}
     * @memberof PolicyEditorBetaApiPublishPolicyRules
     */
    readonly publishPolicyRulesRequest: PublishPolicyRulesRequest
}

/**
 * Request parameters for updateDraft operation in PolicyEditorBetaApi.
 * @export
 * @interface PolicyEditorBetaApiUpdateDraftRequest
 */
export interface PolicyEditorBetaApiUpdateDraftRequest {
    /**
     * 
     * @type {UpdateDraftRequest}
     * @memberof PolicyEditorBetaApiUpdateDraft
     */
    readonly updateDraftRequest: UpdateDraftRequest
}

/**
 * PolicyEditorBetaApi - object-oriented interface
 * @export
 * @class PolicyEditorBetaApi
 * @extends {BaseAPI}
 */
export class PolicyEditorBetaApi extends BaseAPI {
    /**
     * Returns the active policy and its validation. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Get the active policy and its validation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorBetaApi
     */
    public getActivePolicy() {
        return PolicyEditorBetaApiFp(this.httpClient).getActivePolicy();
    }

    /**
     * Returns the active draft and its validation. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Get the active draft
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorBetaApi
     */
    public getDraft() {
        return PolicyEditorBetaApiFp(this.httpClient).getDraft();
    }

    /**
     * Send publish request of certain draft id and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Send publish request for a certain draft id
     * @param {PolicyEditorBetaApiPublishDraftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorBetaApi
     */
    public publishDraft(requestParameters: PolicyEditorBetaApiPublishDraftRequest, ) {
        return PolicyEditorBetaApiFp(this.httpClient).publishDraft(requestParameters.publishDraftRequest, );
    }

    /**
     * Send publish request of set of policy rules and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Send publish request for a set of policy rules
     * @param {PolicyEditorBetaApiPublishPolicyRulesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorBetaApi
     */
    public publishPolicyRules(requestParameters: PolicyEditorBetaApiPublishPolicyRulesRequest, ) {
        return PolicyEditorBetaApiFp(this.httpClient).publishPolicyRules(requestParameters.publishPolicyRulesRequest, );
    }

    /**
     * Update the draft and return its validation. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Update the draft with a new set of rules
     * @param {PolicyEditorBetaApiUpdateDraftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorBetaApi
     */
    public updateDraft(requestParameters: PolicyEditorBetaApiUpdateDraftRequest, ) {
        return PolicyEditorBetaApiFp(this.httpClient).updateDraft(requestParameters.updateDraftRequest, );
    }
}
