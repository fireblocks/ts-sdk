/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { NetworkConnection } from '../model/networkConnection';
    import { NetworkConnectionResponse } from '../model/networkConnectionResponse';
    import { NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response } from '../model/networkConnectionsConnectionIdSetRoutingPolicyPatch200Response';
    import { NetworkConnectionsConnectionIdSetRoutingPolicyPatchRequest } from '../model/networkConnectionsConnectionIdSetRoutingPolicyPatchRequest';
    import { NetworkIdResponse } from '../model/networkIdResponse';
    import { NetworkIdsGet200ResponseInner } from '../model/networkIdsGet200ResponseInner';
    import { NetworkIdsNetworkIdSetDiscoverabilityPatchRequest } from '../model/networkIdsNetworkIdSetDiscoverabilityPatchRequest';
    import { NetworkIdsNetworkIdSetRoutingPolicyPatchRequest } from '../model/networkIdsNetworkIdSetRoutingPolicyPatchRequest';
    import { NetworkIdsPostRequest } from '../model/networkIdsPostRequest';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class NetworkConnectionsApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * 
                * @summary Deletes a network connection by ID
                * @param connectionId The ID of the network connection to delete
            */
        public async networkConnectionsConnectionIdDelete (connectionId: string, ) : Promise<NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response> {
                const path = this.configuration.basePath + '/network_connections/{connectionId}'
                .replace('{' + 'connectionId' + '}', encodeURIComponent(String(connectionId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'connectionId' is not null or undefined
                        if (connectionId === null || connectionId === undefined) {
                        throw new Error('Required parameter connectionId was null or undefined when calling networkConnectionsConnectionIdDelete.');
                        }


                    if (typeof connectionId === 'object') {
                        for( const [key,value] of Object.entries(connectionId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['connectionId'] = ObjectSerializer.serialize(connectionId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response>(requestOptions);
        }
            /**
            * Gets a network connection by ID.
                * @summary Get a network connection
                * @param connectionId The ID of the connection
            */
        public async networkConnectionsConnectionIdGet (connectionId: string, ) : Promise<NetworkConnectionResponse> {
                const path = this.configuration.basePath + '/network_connections/{connectionId}'
                .replace('{' + 'connectionId' + '}', encodeURIComponent(String(connectionId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'connectionId' is not null or undefined
                        if (connectionId === null || connectionId === undefined) {
                        throw new Error('Required parameter connectionId was null or undefined when calling networkConnectionsConnectionIdGet.');
                        }


                    if (typeof connectionId === 'object') {
                        for( const [key,value] of Object.entries(connectionId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['connectionId'] = ObjectSerializer.serialize(connectionId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<NetworkConnectionResponse>(requestOptions);
        }
            /**
            * 
                * @summary Update network connection routing policy
                * @param connectionId The ID of the network connection
                * @param networkConnectionsConnectionIdSetRoutingPolicyPatchRequest 
            */
        public async networkConnectionsConnectionIdSetRoutingPolicyPatch (connectionId: string, networkConnectionsConnectionIdSetRoutingPolicyPatchRequest?: NetworkConnectionsConnectionIdSetRoutingPolicyPatchRequest, ) : Promise<NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response> {
                const path = this.configuration.basePath + '/network_connections/{connectionId}/set_routing_policy'
                .replace('{' + 'connectionId' + '}', encodeURIComponent(String(connectionId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'connectionId' is not null or undefined
                        if (connectionId === null || connectionId === undefined) {
                        throw new Error('Required parameter connectionId was null or undefined when calling networkConnectionsConnectionIdSetRoutingPolicyPatch.');
                        }


                    if (typeof connectionId === 'object') {
                        for( const [key,value] of Object.entries(connectionId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['connectionId'] = ObjectSerializer.serialize(connectionId, "string");
                    }

                    if (typeof networkConnectionsConnectionIdSetRoutingPolicyPatchRequest === 'object') {
                        for( const [key,value] of Object.entries(networkConnectionsConnectionIdSetRoutingPolicyPatchRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['NetworkConnectionsConnectionIdSetRoutingPolicyPatchRequest'] = ObjectSerializer.serialize(networkConnectionsConnectionIdSetRoutingPolicyPatchRequest, "NetworkConnectionsConnectionIdSetRoutingPolicyPatchRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PATCH',
                    url: path,
                        data: params
                };
                return this.httpClient.request<NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response>(requestOptions);
        }
            /**
            * Returns all network connections.
                * @summary List network connections
            */
        public async networkConnectionsGet () : Promise<Array<NetworkConnectionResponse>> {
                const path = this.configuration.basePath + '/network_connections';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<NetworkConnectionResponse>>(requestOptions);
        }
            /**
            * 
                * @summary Creates a new network connection
                * @param networkConnection 
            */
        public async networkConnectionsPost (networkConnection?: NetworkConnection, ) : Promise<NetworkConnectionResponse> {
                const path = this.configuration.basePath + '/network_connections';
                let params: any = {};
                let headers: any = {}

                    if (typeof networkConnection === 'object') {
                        for( const [key,value] of Object.entries(networkConnection)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['NetworkConnection'] = ObjectSerializer.serialize(networkConnection, "NetworkConnection");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<NetworkConnectionResponse>(requestOptions);
        }
            /**
            * 
                * @summary Returns all network IDs, both local IDs and discoverable remote IDs
            */
        public async networkIdsGet () : Promise<Array<NetworkIdsGet200ResponseInner>> {
                const path = this.configuration.basePath + '/network_ids';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<NetworkIdsGet200ResponseInner>>(requestOptions);
        }
            /**
            * 
                * @summary Returns specific network ID
                * @param networkId The ID of the network
            */
        public async networkIdsNetworkIdGet (networkId: string, ) : Promise<NetworkIdResponse> {
                const path = this.configuration.basePath + '/network_ids/{networkId}'
                .replace('{' + 'networkId' + '}', encodeURIComponent(String(networkId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'networkId' is not null or undefined
                        if (networkId === null || networkId === undefined) {
                        throw new Error('Required parameter networkId was null or undefined when calling networkIdsNetworkIdGet.');
                        }


                    if (typeof networkId === 'object') {
                        for( const [key,value] of Object.entries(networkId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['networkId'] = ObjectSerializer.serialize(networkId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<NetworkIdResponse>(requestOptions);
        }
            /**
            * 
                * @summary Update network ID\'s discoverability
                * @param networkId The ID of the network
                * @param networkIdsNetworkIdSetDiscoverabilityPatchRequest 
            */
        public async networkIdsNetworkIdSetDiscoverabilityPatch (networkId: string, networkIdsNetworkIdSetDiscoverabilityPatchRequest: NetworkIdsNetworkIdSetDiscoverabilityPatchRequest, ) : Promise<NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response> {
                const path = this.configuration.basePath + '/network_ids/{networkId}/set_discoverability'
                .replace('{' + 'networkId' + '}', encodeURIComponent(String(networkId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'networkId' is not null or undefined
                        if (networkId === null || networkId === undefined) {
                        throw new Error('Required parameter networkId was null or undefined when calling networkIdsNetworkIdSetDiscoverabilityPatch.');
                        }


                    if (typeof networkId === 'object') {
                        for( const [key,value] of Object.entries(networkId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['networkId'] = ObjectSerializer.serialize(networkId, "string");
                    }
                        // verify required parameter 'networkIdsNetworkIdSetDiscoverabilityPatchRequest' is not null or undefined
                        if (networkIdsNetworkIdSetDiscoverabilityPatchRequest === null || networkIdsNetworkIdSetDiscoverabilityPatchRequest === undefined) {
                        throw new Error('Required parameter networkIdsNetworkIdSetDiscoverabilityPatchRequest was null or undefined when calling networkIdsNetworkIdSetDiscoverabilityPatch.');
                        }


                    if (typeof networkIdsNetworkIdSetDiscoverabilityPatchRequest === 'object') {
                        for( const [key,value] of Object.entries(networkIdsNetworkIdSetDiscoverabilityPatchRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['NetworkIdsNetworkIdSetDiscoverabilityPatchRequest'] = ObjectSerializer.serialize(networkIdsNetworkIdSetDiscoverabilityPatchRequest, "NetworkIdsNetworkIdSetDiscoverabilityPatchRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PATCH',
                    url: path,
                        data: params
                };
                return this.httpClient.request<NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response>(requestOptions);
        }
            /**
            * 
                * @summary Update network id routing policy
                * @param networkId The ID of the network
                * @param networkIdsNetworkIdSetRoutingPolicyPatchRequest 
            */
        public async networkIdsNetworkIdSetRoutingPolicyPatch (networkId: string, networkIdsNetworkIdSetRoutingPolicyPatchRequest?: NetworkIdsNetworkIdSetRoutingPolicyPatchRequest, ) : Promise<NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response> {
                const path = this.configuration.basePath + '/network_ids/{networkId}/set_routing_policy'
                .replace('{' + 'networkId' + '}', encodeURIComponent(String(networkId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'networkId' is not null or undefined
                        if (networkId === null || networkId === undefined) {
                        throw new Error('Required parameter networkId was null or undefined when calling networkIdsNetworkIdSetRoutingPolicyPatch.');
                        }


                    if (typeof networkId === 'object') {
                        for( const [key,value] of Object.entries(networkId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['networkId'] = ObjectSerializer.serialize(networkId, "string");
                    }

                    if (typeof networkIdsNetworkIdSetRoutingPolicyPatchRequest === 'object') {
                        for( const [key,value] of Object.entries(networkIdsNetworkIdSetRoutingPolicyPatchRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['NetworkIdsNetworkIdSetRoutingPolicyPatchRequest'] = ObjectSerializer.serialize(networkIdsNetworkIdSetRoutingPolicyPatchRequest, "NetworkIdsNetworkIdSetRoutingPolicyPatchRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PATCH',
                    url: path,
                        data: params
                };
                return this.httpClient.request<NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response>(requestOptions);
        }
            /**
            * 
                * @summary Creates a new Network ID
                * @param networkIdsPostRequest 
            */
        public async networkIdsPost (networkIdsPostRequest?: NetworkIdsPostRequest, ) : Promise<NetworkIdResponse> {
                const path = this.configuration.basePath + '/network_ids';
                let params: any = {};
                let headers: any = {}

                    if (typeof networkIdsPostRequest === 'object') {
                        for( const [key,value] of Object.entries(networkIdsPostRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['NetworkIdsPostRequest'] = ObjectSerializer.serialize(networkIdsPostRequest, "NetworkIdsPostRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<NetworkIdResponse>(requestOptions);
        }
        }
