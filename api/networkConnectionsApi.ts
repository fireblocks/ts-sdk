/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { CheckThirdPartyRoutingForNetworkConnection200Response } from '../model/checkThirdPartyRoutingForNetworkConnection200Response';
    import { CreateNetworkIdRequest } from '../model/createNetworkIdRequest';
    import { GetNetworkIds200ResponseInner } from '../model/getNetworkIds200ResponseInner';
    import { NetworkConnection } from '../model/networkConnection';
    import { NetworkConnectionResponse } from '../model/networkConnectionResponse';
    import { NetworkIdResponse } from '../model/networkIdResponse';
    import { SetDiscoverabilityForNetworkIdRequest } from '../model/setDiscoverabilityForNetworkIdRequest';
    import { SetNetworkIdNameRequest } from '../model/setNetworkIdNameRequest';
    import { SetRoutingPolicyForNetworkConnection200Response } from '../model/setRoutingPolicyForNetworkConnection200Response';
    import { SetRoutingPolicyForNetworkConnectionRequest } from '../model/setRoutingPolicyForNetworkConnectionRequest';
    import { SetRoutingPolicyForNetworkIdRequest } from '../model/setRoutingPolicyForNetworkIdRequest';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class NetworkConnectionsApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * The Fireblocks Network allows for flexibility around incoming deposits. A receiver can receive network deposits to locations other than Fireblocks. This endpoint validates whether future transactions are routed to the displayed recipient or to a 3rd party.
                * @summary Retrieve third-party network routing validation by asset type.
                * @param connectionId The ID of the network connection
                * @param assetType The destination asset type
            */
        public async checkThirdPartyRoutingForNetworkConnection (connectionId: string, assetType: 'CRYPTO' | 'SIGNET' | 'SEN' | 'SIGNET_TEST' | 'SEN_TEST', ) : Promise<CheckThirdPartyRoutingForNetworkConnection200Response> {
                const path = this.configuration.basePath + '/network_connections/{connectionId}/is_third_party_routing/{assetType}'
                .replace('{' + 'connectionId' + '}', encodeURIComponent(String(connectionId)))
                .replace('{' + 'assetType' + '}', encodeURIComponent(String(assetType)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'connectionId' is not null or undefined
                        if (connectionId === null || connectionId === undefined) {
                        throw new Error('Required parameter connectionId was null or undefined when calling checkThirdPartyRoutingForNetworkConnection.');
                        }


                    if (typeof connectionId === 'object') {
                        for( const [key,value] of Object.entries(connectionId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['connectionId'] = ObjectSerializer.serialize(connectionId, "string");
                    }
                        // verify required parameter 'assetType' is not null or undefined
                        if (assetType === null || assetType === undefined) {
                        throw new Error('Required parameter assetType was null or undefined when calling checkThirdPartyRoutingForNetworkConnection.');
                        }


                    if (typeof assetType === 'object') {
                        for( const [key,value] of Object.entries(assetType)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetType'] = ObjectSerializer.serialize(assetType, "'CRYPTO' | 'SIGNET' | 'SEN' | 'SIGNET_TEST' | 'SEN_TEST'");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<CheckThirdPartyRoutingForNetworkConnection200Response>(requestOptions);
        }
            /**
            * Initiates a new network connection.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Creates a new network connection
                * @param networkConnection 
            */
        public async createNetworkConnection (networkConnection?: NetworkConnection, ) : Promise<NetworkConnectionResponse> {
                const path = this.configuration.basePath + '/network_connections';
                let params: any = {};
                let headers: any = {}

                    if (typeof networkConnection === 'object') {
                        for( const [key,value] of Object.entries(networkConnection)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['NetworkConnection'] = ObjectSerializer.serialize(networkConnection, "NetworkConnection");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<NetworkConnectionResponse>(requestOptions);
        }
            /**
            * Creates a new Network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Creates a new Network ID
                * @param createNetworkIdRequest 
            */
        public async createNetworkId (createNetworkIdRequest?: CreateNetworkIdRequest, ) : Promise<NetworkIdResponse> {
                const path = this.configuration.basePath + '/network_ids';
                let params: any = {};
                let headers: any = {}

                    if (typeof createNetworkIdRequest === 'object') {
                        for( const [key,value] of Object.entries(createNetworkIdRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['CreateNetworkIdRequest'] = ObjectSerializer.serialize(createNetworkIdRequest, "CreateNetworkIdRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<NetworkIdResponse>(requestOptions);
        }
            /**
            * Deletes an existing network connection specified by its connection ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Deletes a network connection by ID
                * @param connectionId The ID of the network connection to delete
            */
        public async deleteNetworkConnection (connectionId: string, ) : Promise<SetRoutingPolicyForNetworkConnection200Response> {
                const path = this.configuration.basePath + '/network_connections/{connectionId}'
                .replace('{' + 'connectionId' + '}', encodeURIComponent(String(connectionId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'connectionId' is not null or undefined
                        if (connectionId === null || connectionId === undefined) {
                        throw new Error('Required parameter connectionId was null or undefined when calling deleteNetworkConnection.');
                        }


                    if (typeof connectionId === 'object') {
                        for( const [key,value] of Object.entries(connectionId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['connectionId'] = ObjectSerializer.serialize(connectionId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<SetRoutingPolicyForNetworkConnection200Response>(requestOptions);
        }
            /**
            * Deletes a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Deletes specific network ID.
                * @param networkId The ID of the network
            */
        public async deleteNetworkId (networkId: string, ) : Promise<SetRoutingPolicyForNetworkConnection200Response> {
                const path = this.configuration.basePath + '/network_ids/{networkId}'
                .replace('{' + 'networkId' + '}', encodeURIComponent(String(networkId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'networkId' is not null or undefined
                        if (networkId === null || networkId === undefined) {
                        throw new Error('Required parameter networkId was null or undefined when calling deleteNetworkId.');
                        }


                    if (typeof networkId === 'object') {
                        for( const [key,value] of Object.entries(networkId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['networkId'] = ObjectSerializer.serialize(networkId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<SetRoutingPolicyForNetworkConnection200Response>(requestOptions);
        }
            /**
            * Gets a network connection by ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Get a network connection
                * @param connectionId The ID of the connection
            */
        public async getNetworkConnectionById (connectionId: string, ) : Promise<NetworkConnectionResponse> {
                const path = this.configuration.basePath + '/network_connections/{connectionId}'
                .replace('{' + 'connectionId' + '}', encodeURIComponent(String(connectionId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'connectionId' is not null or undefined
                        if (connectionId === null || connectionId === undefined) {
                        throw new Error('Required parameter connectionId was null or undefined when calling getNetworkConnectionById.');
                        }


                    if (typeof connectionId === 'object') {
                        for( const [key,value] of Object.entries(connectionId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['connectionId'] = ObjectSerializer.serialize(connectionId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<NetworkConnectionResponse>(requestOptions);
        }
            /**
            * Returns all network connections.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary List network connections
            */
        public async getNetworkConnections () : Promise<Array<NetworkConnectionResponse>> {
                const path = this.configuration.basePath + '/network_connections';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<NetworkConnectionResponse>>(requestOptions);
        }
            /**
            * Retrieves a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Returns specific network ID.
                * @param networkId The ID of the network
            */
        public async getNetworkIdById (networkId: string, ) : Promise<NetworkIdResponse> {
                const path = this.configuration.basePath + '/network_ids/{networkId}'
                .replace('{' + 'networkId' + '}', encodeURIComponent(String(networkId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'networkId' is not null or undefined
                        if (networkId === null || networkId === undefined) {
                        throw new Error('Required parameter networkId was null or undefined when calling getNetworkIdById.');
                        }


                    if (typeof networkId === 'object') {
                        for( const [key,value] of Object.entries(networkId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['networkId'] = ObjectSerializer.serialize(networkId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<NetworkIdResponse>(requestOptions);
        }
            /**
            * Retrieves a list of all local and discoverable remote network IDs.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Returns all network IDs, both local IDs and discoverable remote IDs
            */
        public async getNetworkIds () : Promise<Array<GetNetworkIds200ResponseInner>> {
                const path = this.configuration.basePath + '/network_ids';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<GetNetworkIds200ResponseInner>>(requestOptions);
        }
            /**
            * Update whether or not the network ID is discoverable by others.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Update network ID\'s discoverability.
                * @param networkId The ID of the network
                * @param setDiscoverabilityForNetworkIdRequest 
            */
        public async setDiscoverabilityForNetworkId (networkId: string, setDiscoverabilityForNetworkIdRequest: SetDiscoverabilityForNetworkIdRequest, ) : Promise<SetRoutingPolicyForNetworkConnection200Response> {
                const path = this.configuration.basePath + '/network_ids/{networkId}/set_discoverability'
                .replace('{' + 'networkId' + '}', encodeURIComponent(String(networkId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'networkId' is not null or undefined
                        if (networkId === null || networkId === undefined) {
                        throw new Error('Required parameter networkId was null or undefined when calling setDiscoverabilityForNetworkId.');
                        }


                    if (typeof networkId === 'object') {
                        for( const [key,value] of Object.entries(networkId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['networkId'] = ObjectSerializer.serialize(networkId, "string");
                    }
                        // verify required parameter 'setDiscoverabilityForNetworkIdRequest' is not null or undefined
                        if (setDiscoverabilityForNetworkIdRequest === null || setDiscoverabilityForNetworkIdRequest === undefined) {
                        throw new Error('Required parameter setDiscoverabilityForNetworkIdRequest was null or undefined when calling setDiscoverabilityForNetworkId.');
                        }


                    if (typeof setDiscoverabilityForNetworkIdRequest === 'object') {
                        for( const [key,value] of Object.entries(setDiscoverabilityForNetworkIdRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['SetDiscoverabilityForNetworkIdRequest'] = ObjectSerializer.serialize(setDiscoverabilityForNetworkIdRequest, "SetDiscoverabilityForNetworkIdRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PATCH',
                    url: path,
                        data: params
                };
                return this.httpClient.request<SetRoutingPolicyForNetworkConnection200Response>(requestOptions);
        }
            /**
            * Updates name of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Update network ID\'s name.
                * @param networkId The ID of the network
                * @param setNetworkIdNameRequest 
            */
        public async setNetworkIdName (networkId: string, setNetworkIdNameRequest: SetNetworkIdNameRequest, ) : Promise<SetRoutingPolicyForNetworkConnection200Response> {
                const path = this.configuration.basePath + '/network_ids/{networkId}/set_name'
                .replace('{' + 'networkId' + '}', encodeURIComponent(String(networkId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'networkId' is not null or undefined
                        if (networkId === null || networkId === undefined) {
                        throw new Error('Required parameter networkId was null or undefined when calling setNetworkIdName.');
                        }


                    if (typeof networkId === 'object') {
                        for( const [key,value] of Object.entries(networkId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['networkId'] = ObjectSerializer.serialize(networkId, "string");
                    }
                        // verify required parameter 'setNetworkIdNameRequest' is not null or undefined
                        if (setNetworkIdNameRequest === null || setNetworkIdNameRequest === undefined) {
                        throw new Error('Required parameter setNetworkIdNameRequest was null or undefined when calling setNetworkIdName.');
                        }


                    if (typeof setNetworkIdNameRequest === 'object') {
                        for( const [key,value] of Object.entries(setNetworkIdNameRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['SetNetworkIdNameRequest'] = ObjectSerializer.serialize(setNetworkIdNameRequest, "SetNetworkIdNameRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PATCH',
                    url: path,
                        data: params
                };
                return this.httpClient.request<SetRoutingPolicyForNetworkConnection200Response>(requestOptions);
        }
            /**
            * Updates an existing network connection\'s routing policy.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Update network connection routing policy.
                * @param connectionId The ID of the network connection
                * @param setRoutingPolicyForNetworkConnectionRequest 
            */
        public async setRoutingPolicyForNetworkConnection (connectionId: string, setRoutingPolicyForNetworkConnectionRequest?: SetRoutingPolicyForNetworkConnectionRequest, ) : Promise<SetRoutingPolicyForNetworkConnection200Response> {
                const path = this.configuration.basePath + '/network_connections/{connectionId}/set_routing_policy'
                .replace('{' + 'connectionId' + '}', encodeURIComponent(String(connectionId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'connectionId' is not null or undefined
                        if (connectionId === null || connectionId === undefined) {
                        throw new Error('Required parameter connectionId was null or undefined when calling setRoutingPolicyForNetworkConnection.');
                        }


                    if (typeof connectionId === 'object') {
                        for( const [key,value] of Object.entries(connectionId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['connectionId'] = ObjectSerializer.serialize(connectionId, "string");
                    }

                    if (typeof setRoutingPolicyForNetworkConnectionRequest === 'object') {
                        for( const [key,value] of Object.entries(setRoutingPolicyForNetworkConnectionRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['SetRoutingPolicyForNetworkConnectionRequest'] = ObjectSerializer.serialize(setRoutingPolicyForNetworkConnectionRequest, "SetRoutingPolicyForNetworkConnectionRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PATCH',
                    url: path,
                        data: params
                };
                return this.httpClient.request<SetRoutingPolicyForNetworkConnection200Response>(requestOptions);
        }
            /**
            * Updates the routing policy of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
                * @summary Update network id routing policy.
                * @param networkId The ID of the network
                * @param setRoutingPolicyForNetworkIdRequest 
            */
        public async setRoutingPolicyForNetworkId (networkId: string, setRoutingPolicyForNetworkIdRequest?: SetRoutingPolicyForNetworkIdRequest, ) : Promise<SetRoutingPolicyForNetworkConnection200Response> {
                const path = this.configuration.basePath + '/network_ids/{networkId}/set_routing_policy'
                .replace('{' + 'networkId' + '}', encodeURIComponent(String(networkId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'networkId' is not null or undefined
                        if (networkId === null || networkId === undefined) {
                        throw new Error('Required parameter networkId was null or undefined when calling setRoutingPolicyForNetworkId.');
                        }


                    if (typeof networkId === 'object') {
                        for( const [key,value] of Object.entries(networkId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['networkId'] = ObjectSerializer.serialize(networkId, "string");
                    }

                    if (typeof setRoutingPolicyForNetworkIdRequest === 'object') {
                        for( const [key,value] of Object.entries(setRoutingPolicyForNetworkIdRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['SetRoutingPolicyForNetworkIdRequest'] = ObjectSerializer.serialize(setRoutingPolicyForNetworkIdRequest, "SetRoutingPolicyForNetworkIdRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PATCH',
                    url: path,
                        data: params
                };
                return this.httpClient.request<SetRoutingPolicyForNetworkConnection200Response>(requestOptions);
        }
        }
