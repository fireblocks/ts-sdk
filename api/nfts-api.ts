/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';


// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { GetNFTs200Response } from '../models';
// @ts-ignore
import { GetOwnershipTokens200Response } from '../models';
// @ts-ignore
import { ListOwnedCollections200Response } from '../models';
// @ts-ignore
import { TokenResponse } from '../models';
// @ts-ignore
import { UpdateTokenOwnershipStatusDto } from '../models';



    /**
 * NFTsApi - axios parameter creator
 * @export
 */
export const NFTsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the requested token data. 
         * @summary List token data by ID
         * @param {string} id NFT ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNFT: async (id: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNFT', 'id', id)
            const localVarPath = `/nfts/tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns the requested tokens data. 
         * @summary List tokens by IDs
         * @param {string} ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request.
         * @param {string} [pageCursor] Page cursor to fetch
         * @param {number} [pageSize] Items per page (max 100)
         * @param {Array<'collection.name' | 'name' | 'blockchainDescriptor'>} [sort] Sort by param, it can be one param or a list of params separated by comma
         * @param {'DESC' | 'ASC'} [order] Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNFTs: async (ids: string, pageCursor?: string, pageSize?: number, sort?: Array<'collection.name' | 'name' | 'blockchainDescriptor'>, order?: 'DESC' | 'ASC', ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'ids' is not null or undefined
            assertParamExists('getNFTs', 'ids', ids)
            const localVarPath = `/nfts/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns all tokens and their data in your workspace. 
         * @summary List all owned tokens (paginated)
         * @param {'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI'} [blockchainDescriptor] Blockchain descriptor filter
         * @param {string} [vaultAccountIds] A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request
         * @param {string} [ids] A comma separated list of NFT IDs. Up to 100 are allowed in a single request.
         * @param {string} [collectionIds] A comma separated list of collection IDs. Up to 100 are allowed in a single request.
         * @param {string} [pageCursor] Page cursor to fetch
         * @param {number} [pageSize] Items per page (max 100)
         * @param {Array<'ownershipLastUpdateTime' | 'name' | 'collection.name' | 'blockchainDescriptor'>} [sort] Sort by param, it can be one param or a list of params separated by comma
         * @param {'DESC' | 'ASC'} [order] Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending
         * @param {'LISTED' | 'ARCHIVED'} [status] Token ownership status
         * @param {string} [search] Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnershipTokens: async (blockchainDescriptor?: 'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI', vaultAccountIds?: string, ids?: string, collectionIds?: string, pageCursor?: string, pageSize?: number, sort?: Array<'ownershipLastUpdateTime' | 'name' | 'collection.name' | 'blockchainDescriptor'>, order?: 'DESC' | 'ASC', status?: 'LISTED' | 'ARCHIVED', search?: string, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/nfts/ownership/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (blockchainDescriptor !== undefined) {
                localVarQueryParameter['blockchainDescriptor'] = blockchainDescriptor;
            }

            if (vaultAccountIds !== undefined) {
                localVarQueryParameter['vaultAccountIds'] = vaultAccountIds;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (collectionIds !== undefined) {
                localVarQueryParameter['collectionIds'] = collectionIds;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns all collections in your workspace 
         * @summary List owned collections (paginated)
         * @param {string} [search] Search owned collections. Possible criteria for search: collection name, collection contract address.
         * @param {string} [pageCursor] Page cursor to fetch
         * @param {number} [pageSize] Items per page (max 100)
         * @param {Array<'name'>} [sort] Sort by param, it can be one param or a list of params separated by comma
         * @param {'DESC' | 'ASC'} [order] Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOwnedCollections: async (search?: string, pageCursor?: string, pageSize?: number, sort?: Array<'name'>, order?: 'DESC' | 'ASC', ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/nfts/ownership/collections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Updates the latest token metadata. 
         * @summary Refresh token metadata
         * @param {string} id NFT ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshNFTMetadata: async (id: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refreshNFTMetadata', 'id', id)
            const localVarPath = `/nfts/tokens/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PUT'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Updates all tokens and balances per blockchain and vault account. 
         * @summary Refresh vault account tokens
         * @param {'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI'} blockchainDescriptor Blockchain descriptor filter
         * @param {string} vaultAccountId Vault account filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOwnershipTokens: async (blockchainDescriptor: 'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI', vaultAccountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'blockchainDescriptor' is not null or undefined
            assertParamExists('updateOwnershipTokens', 'blockchainDescriptor', blockchainDescriptor)
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('updateOwnershipTokens', 'vaultAccountId', vaultAccountId)
            const localVarPath = `/nfts/ownership/tokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PUT'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (blockchainDescriptor !== undefined) {
                localVarQueryParameter['blockchainDescriptor'] = blockchainDescriptor;
            }

            if (vaultAccountId !== undefined) {
                localVarQueryParameter['vaultAccountId'] = vaultAccountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Updates token ownership status for a tenant, in all tenant vaults. 
         * @summary Update token ownership status
         * @param {UpdateTokenOwnershipStatusDto} updateTokenOwnershipStatusDto 
         * @param {string} id NFT ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTokenOwnershipStatus: async (updateTokenOwnershipStatusDto: UpdateTokenOwnershipStatusDto, id: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'updateTokenOwnershipStatusDto' is not null or undefined
            assertParamExists('updateTokenOwnershipStatus', 'updateTokenOwnershipStatusDto', updateTokenOwnershipStatusDto)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTokenOwnershipStatus', 'id', id)
            const localVarPath = `/nfts/ownership/tokens/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PUT'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = updateTokenOwnershipStatusDto as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * NFTsApi - functional programming interface
 * @export
 */
export const NFTsApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = NFTsApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * Returns the requested token data. 
         * @summary List token data by ID
         * @param {string} id NFT ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNFT(id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNFT(id, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns the requested tokens data. 
         * @summary List tokens by IDs
         * @param {string} ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request.
         * @param {string} [pageCursor] Page cursor to fetch
         * @param {number} [pageSize] Items per page (max 100)
         * @param {Array<'collection.name' | 'name' | 'blockchainDescriptor'>} [sort] Sort by param, it can be one param or a list of params separated by comma
         * @param {'DESC' | 'ASC'} [order] Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNFTs(ids: string, pageCursor?: string, pageSize?: number, sort?: Array<'collection.name' | 'name' | 'blockchainDescriptor'>, order?: 'DESC' | 'ASC', ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetNFTs200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNFTs(ids, pageCursor, pageSize, sort, order, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns all tokens and their data in your workspace. 
         * @summary List all owned tokens (paginated)
         * @param {'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI'} [blockchainDescriptor] Blockchain descriptor filter
         * @param {string} [vaultAccountIds] A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request
         * @param {string} [ids] A comma separated list of NFT IDs. Up to 100 are allowed in a single request.
         * @param {string} [collectionIds] A comma separated list of collection IDs. Up to 100 are allowed in a single request.
         * @param {string} [pageCursor] Page cursor to fetch
         * @param {number} [pageSize] Items per page (max 100)
         * @param {Array<'ownershipLastUpdateTime' | 'name' | 'collection.name' | 'blockchainDescriptor'>} [sort] Sort by param, it can be one param or a list of params separated by comma
         * @param {'DESC' | 'ASC'} [order] Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending
         * @param {'LISTED' | 'ARCHIVED'} [status] Token ownership status
         * @param {string} [search] Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOwnershipTokens(blockchainDescriptor?: 'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI', vaultAccountIds?: string, ids?: string, collectionIds?: string, pageCursor?: string, pageSize?: number, sort?: Array<'ownershipLastUpdateTime' | 'name' | 'collection.name' | 'blockchainDescriptor'>, order?: 'DESC' | 'ASC', status?: 'LISTED' | 'ARCHIVED', search?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOwnershipTokens200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOwnershipTokens(blockchainDescriptor, vaultAccountIds, ids, collectionIds, pageCursor, pageSize, sort, order, status, search, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns all collections in your workspace 
         * @summary List owned collections (paginated)
         * @param {string} [search] Search owned collections. Possible criteria for search: collection name, collection contract address.
         * @param {string} [pageCursor] Page cursor to fetch
         * @param {number} [pageSize] Items per page (max 100)
         * @param {Array<'name'>} [sort] Sort by param, it can be one param or a list of params separated by comma
         * @param {'DESC' | 'ASC'} [order] Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOwnedCollections(search?: string, pageCursor?: string, pageSize?: number, sort?: Array<'name'>, order?: 'DESC' | 'ASC', ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOwnedCollections200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOwnedCollections(search, pageCursor, pageSize, sort, order, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Updates the latest token metadata. 
         * @summary Refresh token metadata
         * @param {string} id NFT ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshNFTMetadata(id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshNFTMetadata(id, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Updates all tokens and balances per blockchain and vault account. 
         * @summary Refresh vault account tokens
         * @param {'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI'} blockchainDescriptor Blockchain descriptor filter
         * @param {string} vaultAccountId Vault account filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOwnershipTokens(blockchainDescriptor: 'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI', vaultAccountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOwnershipTokens(blockchainDescriptor, vaultAccountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Updates token ownership status for a tenant, in all tenant vaults. 
         * @summary Update token ownership status
         * @param {UpdateTokenOwnershipStatusDto} updateTokenOwnershipStatusDto 
         * @param {string} id NFT ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTokenOwnershipStatus(updateTokenOwnershipStatusDto: UpdateTokenOwnershipStatusDto, id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTokenOwnershipStatus(updateTokenOwnershipStatusDto, id, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for getNFT operation in NFTsApi.
 * @export
 * @interface NFTsApiGetNFTRequest
 */
export interface NFTsApiGetNFTRequest {
    /**
     * NFT ID
     * @type {string}
     * @memberof NFTsApiGetNFT
     */
    readonly id: string
}

/**
 * Request parameters for getNFTs operation in NFTsApi.
 * @export
 * @interface NFTsApiGetNFTsRequest
 */
export interface NFTsApiGetNFTsRequest {
    /**
     * A comma separated list of NFT IDs. Up to 100 are allowed in a single request.
     * @type {string}
     * @memberof NFTsApiGetNFTs
     */
    readonly ids: string

    /**
     * Page cursor to fetch
     * @type {string}
     * @memberof NFTsApiGetNFTs
     */
    readonly pageCursor?: string

    /**
     * Items per page (max 100)
     * @type {number}
     * @memberof NFTsApiGetNFTs
     */
    readonly pageSize?: number

    /**
     * Sort by param, it can be one param or a list of params separated by comma
     * @type {Array<'collection.name' | 'name' | 'blockchainDescriptor'>}
     * @memberof NFTsApiGetNFTs
     */
    readonly sort?: Array<'collection.name' | 'name' | 'blockchainDescriptor'>

    /**
     * Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending
     * @type {'DESC' | 'ASC'}
     * @memberof NFTsApiGetNFTs
     */
    readonly order?: 'DESC' | 'ASC'
}

/**
 * Request parameters for getOwnershipTokens operation in NFTsApi.
 * @export
 * @interface NFTsApiGetOwnershipTokensRequest
 */
export interface NFTsApiGetOwnershipTokensRequest {
    /**
     * Blockchain descriptor filter
     * @type {'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI'}
     * @memberof NFTsApiGetOwnershipTokens
     */
    readonly blockchainDescriptor?: 'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI'

    /**
     * A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request
     * @type {string}
     * @memberof NFTsApiGetOwnershipTokens
     */
    readonly vaultAccountIds?: string

    /**
     * A comma separated list of NFT IDs. Up to 100 are allowed in a single request.
     * @type {string}
     * @memberof NFTsApiGetOwnershipTokens
     */
    readonly ids?: string

    /**
     * A comma separated list of collection IDs. Up to 100 are allowed in a single request.
     * @type {string}
     * @memberof NFTsApiGetOwnershipTokens
     */
    readonly collectionIds?: string

    /**
     * Page cursor to fetch
     * @type {string}
     * @memberof NFTsApiGetOwnershipTokens
     */
    readonly pageCursor?: string

    /**
     * Items per page (max 100)
     * @type {number}
     * @memberof NFTsApiGetOwnershipTokens
     */
    readonly pageSize?: number

    /**
     * Sort by param, it can be one param or a list of params separated by comma
     * @type {Array<'ownershipLastUpdateTime' | 'name' | 'collection.name' | 'blockchainDescriptor'>}
     * @memberof NFTsApiGetOwnershipTokens
     */
    readonly sort?: Array<'ownershipLastUpdateTime' | 'name' | 'collection.name' | 'blockchainDescriptor'>

    /**
     * Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending
     * @type {'DESC' | 'ASC'}
     * @memberof NFTsApiGetOwnershipTokens
     */
    readonly order?: 'DESC' | 'ASC'

    /**
     * Token ownership status
     * @type {'LISTED' | 'ARCHIVED'}
     * @memberof NFTsApiGetOwnershipTokens
     */
    readonly status?: 'LISTED' | 'ARCHIVED'

    /**
     * Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name.
     * @type {string}
     * @memberof NFTsApiGetOwnershipTokens
     */
    readonly search?: string
}

/**
 * Request parameters for listOwnedCollections operation in NFTsApi.
 * @export
 * @interface NFTsApiListOwnedCollectionsRequest
 */
export interface NFTsApiListOwnedCollectionsRequest {
    /**
     * Search owned collections. Possible criteria for search: collection name, collection contract address.
     * @type {string}
     * @memberof NFTsApiListOwnedCollections
     */
    readonly search?: string

    /**
     * Page cursor to fetch
     * @type {string}
     * @memberof NFTsApiListOwnedCollections
     */
    readonly pageCursor?: string

    /**
     * Items per page (max 100)
     * @type {number}
     * @memberof NFTsApiListOwnedCollections
     */
    readonly pageSize?: number

    /**
     * Sort by param, it can be one param or a list of params separated by comma
     * @type {Array<'name'>}
     * @memberof NFTsApiListOwnedCollections
     */
    readonly sort?: Array<'name'>

    /**
     * Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending
     * @type {'DESC' | 'ASC'}
     * @memberof NFTsApiListOwnedCollections
     */
    readonly order?: 'DESC' | 'ASC'
}

/**
 * Request parameters for refreshNFTMetadata operation in NFTsApi.
 * @export
 * @interface NFTsApiRefreshNFTMetadataRequest
 */
export interface NFTsApiRefreshNFTMetadataRequest {
    /**
     * NFT ID
     * @type {string}
     * @memberof NFTsApiRefreshNFTMetadata
     */
    readonly id: string
}

/**
 * Request parameters for updateOwnershipTokens operation in NFTsApi.
 * @export
 * @interface NFTsApiUpdateOwnershipTokensRequest
 */
export interface NFTsApiUpdateOwnershipTokensRequest {
    /**
     * Blockchain descriptor filter
     * @type {'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI'}
     * @memberof NFTsApiUpdateOwnershipTokens
     */
    readonly blockchainDescriptor: 'ETH' | 'ETH_TEST3' | 'POLYGON' | 'POLYGON_TEST_MUMBAI'

    /**
     * Vault account filter
     * @type {string}
     * @memberof NFTsApiUpdateOwnershipTokens
     */
    readonly vaultAccountId: string
}

/**
 * Request parameters for updateTokenOwnershipStatus operation in NFTsApi.
 * @export
 * @interface NFTsApiUpdateTokenOwnershipStatusRequest
 */
export interface NFTsApiUpdateTokenOwnershipStatusRequest {
    /**
     * 
     * @type {UpdateTokenOwnershipStatusDto}
     * @memberof NFTsApiUpdateTokenOwnershipStatus
     */
    readonly updateTokenOwnershipStatusDto: UpdateTokenOwnershipStatusDto

    /**
     * NFT ID
     * @type {string}
     * @memberof NFTsApiUpdateTokenOwnershipStatus
     */
    readonly id: string
}

/**
 * NFTsApi - object-oriented interface
 * @export
 * @class NFTsApi
 * @extends {BaseAPI}
 */
export class NFTsApi extends BaseAPI {
    /**
     * Returns the requested token data. 
     * @summary List token data by ID
     * @param {NFTsApiGetNFTRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public getNFT(requestParameters: NFTsApiGetNFTRequest, ) {
        return NFTsApiFp(this.httpClient).getNFT(requestParameters.id, );
    }

    /**
     * Returns the requested tokens data. 
     * @summary List tokens by IDs
     * @param {NFTsApiGetNFTsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public getNFTs(requestParameters: NFTsApiGetNFTsRequest, ) {
        return NFTsApiFp(this.httpClient).getNFTs(requestParameters.ids, requestParameters.pageCursor, requestParameters.pageSize, requestParameters.sort, requestParameters.order, );
    }

    /**
     * Returns all tokens and their data in your workspace. 
     * @summary List all owned tokens (paginated)
     * @param {NFTsApiGetOwnershipTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public getOwnershipTokens(requestParameters: NFTsApiGetOwnershipTokensRequest = {}, ) {
        return NFTsApiFp(this.httpClient).getOwnershipTokens(requestParameters.blockchainDescriptor, requestParameters.vaultAccountIds, requestParameters.ids, requestParameters.collectionIds, requestParameters.pageCursor, requestParameters.pageSize, requestParameters.sort, requestParameters.order, requestParameters.status, requestParameters.search, );
    }

    /**
     * Returns all collections in your workspace 
     * @summary List owned collections (paginated)
     * @param {NFTsApiListOwnedCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public listOwnedCollections(requestParameters: NFTsApiListOwnedCollectionsRequest = {}, ) {
        return NFTsApiFp(this.httpClient).listOwnedCollections(requestParameters.search, requestParameters.pageCursor, requestParameters.pageSize, requestParameters.sort, requestParameters.order, );
    }

    /**
     * Updates the latest token metadata. 
     * @summary Refresh token metadata
     * @param {NFTsApiRefreshNFTMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public refreshNFTMetadata(requestParameters: NFTsApiRefreshNFTMetadataRequest, ) {
        return NFTsApiFp(this.httpClient).refreshNFTMetadata(requestParameters.id, );
    }

    /**
     * Updates all tokens and balances per blockchain and vault account. 
     * @summary Refresh vault account tokens
     * @param {NFTsApiUpdateOwnershipTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public updateOwnershipTokens(requestParameters: NFTsApiUpdateOwnershipTokensRequest, ) {
        return NFTsApiFp(this.httpClient).updateOwnershipTokens(requestParameters.blockchainDescriptor, requestParameters.vaultAccountId, );
    }

    /**
     * Updates token ownership status for a tenant, in all tenant vaults. 
     * @summary Update token ownership status
     * @param {NFTsApiUpdateTokenOwnershipStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NFTsApi
     */
    public updateTokenOwnershipStatus(requestParameters: NFTsApiUpdateTokenOwnershipStatusRequest, ) {
        return NFTsApiFp(this.httpClient).updateTokenOwnershipStatus(requestParameters.updateTokenOwnershipStatusDto, requestParameters.id, );
    }
}
