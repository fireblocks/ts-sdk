/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { GetAuditLogsResponseDTO } from '../models';
/**
 * AuditLogsApi - axios parameter creator
 * @export
 */
export const AuditLogsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all audits
         * @summary Get audit logs
         * @param {GetAuditLogsTimePeriodEnum} [timePeriod] The last time period to fetch audit logs
         * @param {string} [cursor] The next id to start fetch audit logs from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogs: async (timePeriod?: GetAuditLogsTimePeriodEnum, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/audit_logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all audits
         * @summary Get audit logs
         * @param {GetAuditsTimePeriodEnum} [timePeriod] The last time period to fetch audit logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudits: async (timePeriod?: GetAuditsTimePeriodEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/audits`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timePeriod !== undefined) {
                localVarQueryParameter['timePeriod'] = timePeriod;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditLogsApi - functional programming interface
 * @export
 */
export const AuditLogsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuditLogsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all audits
         * @summary Get audit logs
         * @param {GetAuditLogsTimePeriodEnum} [timePeriod] The last time period to fetch audit logs
         * @param {string} [cursor] The next id to start fetch audit logs from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuditLogs(timePeriod?: GetAuditLogsTimePeriodEnum, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuditLogs(timePeriod, cursor, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuditLogsApi.getAuditLogs']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get all audits
         * @summary Get audit logs
         * @param {GetAuditsTimePeriodEnum} [timePeriod] The last time period to fetch audit logs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAudits(timePeriod?: GetAuditsTimePeriodEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAuditLogsResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAudits(timePeriod, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AuditLogsApi.getAudits']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AuditLogsApi - factory interface
 * @export
 */
export const AuditLogsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuditLogsApiFp(configuration)
    return {
        /**
         * Get all audits
         * @summary Get audit logs
         * @param {AuditLogsApiGetAuditLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuditLogs(requestParameters: AuditLogsApiGetAuditLogsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAuditLogs(requestParameters.timePeriod, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all audits
         * @summary Get audit logs
         * @param {AuditLogsApiGetAuditsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAudits(requestParameters: AuditLogsApiGetAuditsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<GetAuditLogsResponseDTO> {
            return localVarFp.getAudits(requestParameters.timePeriod, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAuditLogs operation in AuditLogsApi.
 * @export
 * @interface AuditLogsApiGetAuditLogsRequest
 */
export interface AuditLogsApiGetAuditLogsRequest {
    /**
     * The last time period to fetch audit logs
     * @type {'DAY' | 'WEEK'}
     * @memberof AuditLogsApiGetAuditLogs
     */
    readonly timePeriod?: GetAuditLogsTimePeriodEnum

    /**
     * The next id to start fetch audit logs from
     * @type {string}
     * @memberof AuditLogsApiGetAuditLogs
     */
    readonly cursor?: string
}

/**
 * Request parameters for getAudits operation in AuditLogsApi.
 * @export
 * @interface AuditLogsApiGetAuditsRequest
 */
export interface AuditLogsApiGetAuditsRequest {
    /**
     * The last time period to fetch audit logs
     * @type {'DAY' | 'WEEK'}
     * @memberof AuditLogsApiGetAudits
     */
    readonly timePeriod?: GetAuditsTimePeriodEnum
}

/**
 * AuditLogsApi - object-oriented interface
 * @export
 * @class AuditLogsApi
 * @extends {BaseAPI}
 */
export class AuditLogsApi extends BaseAPI {
    /**
     * Get all audits
     * @summary Get audit logs
     * @param {AuditLogsApiGetAuditLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    public getAuditLogs(requestParameters: AuditLogsApiGetAuditLogsRequest = {}) {
        return AuditLogsApiFp(this.configuration).getAuditLogs(requestParameters.timePeriod, requestParameters.cursor).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Get all audits
     * @summary Get audit logs
     * @param {AuditLogsApiGetAuditsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditLogsApi
     */
    public getAudits(requestParameters: AuditLogsApiGetAuditsRequest = {}) {
        return AuditLogsApiFp(this.configuration).getAudits(requestParameters.timePeriod).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

/**
 * @export
 */
export const GetAuditLogsTimePeriodEnum = {
    Day: 'DAY',
    Week: 'WEEK'
} as const;
export type GetAuditLogsTimePeriodEnum = typeof GetAuditLogsTimePeriodEnum[keyof typeof GetAuditLogsTimePeriodEnum];
/**
 * @export
 */
export const GetAuditsTimePeriodEnum = {
    Day: 'DAY',
    Week: 'WEEK'
} as const;
export type GetAuditsTimePeriodEnum = typeof GetAuditsTimePeriodEnum[keyof typeof GetAuditsTimePeriodEnum];
