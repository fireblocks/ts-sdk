/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { QuoteRequest } from '../models';
// @ts-ignore
import { QuoteResponse } from '../models';
// @ts-ignore
import { SwapOperation } from '../models';
// @ts-ignore
import { SwapOperationRequest } from '../models';
// @ts-ignore
import { SwapOperationsPaginatedResponse } from '../models';
// @ts-ignore
import { SwapProvider } from '../models';
// @ts-ignore
import { SwapProvidersPaginatedResponse } from '../models';
/**
 * SwapBetaApi - axios parameter creator
 * @export
 */
export const SwapBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Approve the terms of service for a swap provider. Some providers require this approval before performing a swap action for the first time.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Approve terms of service
         * @param {string} providerId 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTermsOfService: async (providerId: string, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('approveTermsOfService', 'providerId', providerId)
            const localVarPath = `/swap/providers/{providerId}/approve_terms`
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a quote from specific swap provider.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Create a quote
         * @param {QuoteRequest} quoteRequest 
         * @param {string} providerId 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuote: async (quoteRequest: QuoteRequest, providerId: string, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('createQuote', 'quoteRequest', quoteRequest)
            assertParamExistsAndNotEmpty('createQuote', 'providerId', providerId)
            const localVarPath = `/swap/providers/{providerId}/quote`
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(quoteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create swap operation based on a provided quote Id  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Create swap operation
         * @param {SwapOperationRequest} swapOperationRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSwapOperation: async (swapOperationRequest: SwapOperationRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('createSwapOperation', 'swapOperationRequest', swapOperationRequest)
            const localVarPath = `/swap/operations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(swapOperationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get swap operation Details by ID.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get operation details
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwapOperationById: async (operationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getSwapOperationById', 'operationId', operationId)
            const localVarPath = `/swap/operations/{operationId}`
                .replace(`{${"operationId"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of swap operations for the specific workspace The operations are sorted by creation date in descending order, meaning the most recent operation appears first.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get Operations list
         * @param {string} [pageCursor] Cursor of the required page
         * @param {number} [pageSize] Number of items in a page, Acceptable values are 1-100. Maximum value is 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwapOperations: async (pageCursor?: string, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/swap/operations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of all supported swap providers.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get Providers List
         * @param {string} [pageCursor] Cursor of the required page
         * @param {number} [pageSize] Number of items in a page, Acceptable values are 1-100. Maximum value is 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwapProviders: async (pageCursor?: string, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/swap/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SwapBetaApi - functional programming interface
 * @export
 */
export const SwapBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SwapBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Approve the terms of service for a swap provider. Some providers require this approval before performing a swap action for the first time.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Approve terms of service
         * @param {string} providerId 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveTermsOfService(providerId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwapProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveTermsOfService(providerId, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SwapBetaApi.approveTermsOfService']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create a quote from specific swap provider.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Create a quote
         * @param {QuoteRequest} quoteRequest 
         * @param {string} providerId 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuote(quoteRequest: QuoteRequest, providerId: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuote(quoteRequest, providerId, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SwapBetaApi.createQuote']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create swap operation based on a provided quote Id  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Create swap operation
         * @param {SwapOperationRequest} swapOperationRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSwapOperation(swapOperationRequest: SwapOperationRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwapOperation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSwapOperation(swapOperationRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SwapBetaApi.createSwapOperation']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get swap operation Details by ID.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get operation details
         * @param {string} operationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwapOperationById(operationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwapOperation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwapOperationById(operationId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SwapBetaApi.getSwapOperationById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Return a list of swap operations for the specific workspace The operations are sorted by creation date in descending order, meaning the most recent operation appears first.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get Operations list
         * @param {string} [pageCursor] Cursor of the required page
         * @param {number} [pageSize] Number of items in a page, Acceptable values are 1-100. Maximum value is 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwapOperations(pageCursor?: string, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwapOperationsPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwapOperations(pageCursor, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SwapBetaApi.getSwapOperations']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Return a list of all supported swap providers.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get Providers List
         * @param {string} [pageCursor] Cursor of the required page
         * @param {number} [pageSize] Number of items in a page, Acceptable values are 1-100. Maximum value is 100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwapProviders(pageCursor?: string, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SwapProvidersPaginatedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwapProviders(pageCursor, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SwapBetaApi.getSwapProviders']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SwapBetaApi - factory interface
 * @export
 */
export const SwapBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SwapBetaApiFp(configuration)
    return {
        /**
         * Approve the terms of service for a swap provider. Some providers require this approval before performing a swap action for the first time.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Approve terms of service
         * @param {SwapBetaApiApproveTermsOfServiceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveTermsOfService(requestParameters: SwapBetaApiApproveTermsOfServiceRequest, options?: RawAxiosRequestConfig): AxiosPromise<SwapProvider> {
            return localVarFp.approveTermsOfService(requestParameters.providerId, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a quote from specific swap provider.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Create a quote
         * @param {SwapBetaApiCreateQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuote(requestParameters: SwapBetaApiCreateQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuoteResponse> {
            return localVarFp.createQuote(requestParameters.quoteRequest, requestParameters.providerId, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Create swap operation based on a provided quote Id  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Create swap operation
         * @param {SwapBetaApiCreateSwapOperationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSwapOperation(requestParameters: SwapBetaApiCreateSwapOperationRequest, options?: RawAxiosRequestConfig): AxiosPromise<SwapOperation> {
            return localVarFp.createSwapOperation(requestParameters.swapOperationRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get swap operation Details by ID.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get operation details
         * @param {SwapBetaApiGetSwapOperationByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwapOperationById(requestParameters: SwapBetaApiGetSwapOperationByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<SwapOperation> {
            return localVarFp.getSwapOperationById(requestParameters.operationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of swap operations for the specific workspace The operations are sorted by creation date in descending order, meaning the most recent operation appears first.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get Operations list
         * @param {SwapBetaApiGetSwapOperationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwapOperations(requestParameters: SwapBetaApiGetSwapOperationsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SwapOperationsPaginatedResponse> {
            return localVarFp.getSwapOperations(requestParameters.pageCursor, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of all supported swap providers.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get Providers List
         * @param {SwapBetaApiGetSwapProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwapProviders(requestParameters: SwapBetaApiGetSwapProvidersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<SwapProvidersPaginatedResponse> {
            return localVarFp.getSwapProviders(requestParameters.pageCursor, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveTermsOfService operation in SwapBetaApi.
 * @export
 * @interface SwapBetaApiApproveTermsOfServiceRequest
 */
export interface SwapBetaApiApproveTermsOfServiceRequest {
    /**
     * 
     * @type {string}
     * @memberof SwapBetaApiApproveTermsOfService
     */
    readonly providerId: string

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof SwapBetaApiApproveTermsOfService
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for createQuote operation in SwapBetaApi.
 * @export
 * @interface SwapBetaApiCreateQuoteRequest
 */
export interface SwapBetaApiCreateQuoteRequest {
    /**
     * 
     * @type {QuoteRequest}
     * @memberof SwapBetaApiCreateQuote
     */
    readonly quoteRequest: QuoteRequest

    /**
     * 
     * @type {string}
     * @memberof SwapBetaApiCreateQuote
     */
    readonly providerId: string

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof SwapBetaApiCreateQuote
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for createSwapOperation operation in SwapBetaApi.
 * @export
 * @interface SwapBetaApiCreateSwapOperationRequest
 */
export interface SwapBetaApiCreateSwapOperationRequest {
    /**
     * 
     * @type {SwapOperationRequest}
     * @memberof SwapBetaApiCreateSwapOperation
     */
    readonly swapOperationRequest: SwapOperationRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof SwapBetaApiCreateSwapOperation
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for getSwapOperationById operation in SwapBetaApi.
 * @export
 * @interface SwapBetaApiGetSwapOperationByIdRequest
 */
export interface SwapBetaApiGetSwapOperationByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof SwapBetaApiGetSwapOperationById
     */
    readonly operationId: string
}

/**
 * Request parameters for getSwapOperations operation in SwapBetaApi.
 * @export
 * @interface SwapBetaApiGetSwapOperationsRequest
 */
export interface SwapBetaApiGetSwapOperationsRequest {
    /**
     * Cursor of the required page
     * @type {string}
     * @memberof SwapBetaApiGetSwapOperations
     */
    readonly pageCursor?: string

    /**
     * Number of items in a page, Acceptable values are 1-100. Maximum value is 100
     * @type {number}
     * @memberof SwapBetaApiGetSwapOperations
     */
    readonly pageSize?: number
}

/**
 * Request parameters for getSwapProviders operation in SwapBetaApi.
 * @export
 * @interface SwapBetaApiGetSwapProvidersRequest
 */
export interface SwapBetaApiGetSwapProvidersRequest {
    /**
     * Cursor of the required page
     * @type {string}
     * @memberof SwapBetaApiGetSwapProviders
     */
    readonly pageCursor?: string

    /**
     * Number of items in a page, Acceptable values are 1-100. Maximum value is 100
     * @type {number}
     * @memberof SwapBetaApiGetSwapProviders
     */
    readonly pageSize?: number
}

/**
 * SwapBetaApi - object-oriented interface
 * @export
 * @class SwapBetaApi
 * @extends {BaseAPI}
 */
export class SwapBetaApi extends BaseAPI {
    /**
     * Approve the terms of service for a swap provider. Some providers require this approval before performing a swap action for the first time.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
     * @summary Approve terms of service
     * @param {SwapBetaApiApproveTermsOfServiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwapBetaApi
     */
    public approveTermsOfService(requestParameters: SwapBetaApiApproveTermsOfServiceRequest) {
        return SwapBetaApiFp(this.configuration).approveTermsOfService(requestParameters.providerId, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Create a quote from specific swap provider.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
     * @summary Create a quote
     * @param {SwapBetaApiCreateQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwapBetaApi
     */
    public createQuote(requestParameters: SwapBetaApiCreateQuoteRequest) {
        return SwapBetaApiFp(this.configuration).createQuote(requestParameters.quoteRequest, requestParameters.providerId, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Create swap operation based on a provided quote Id  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
     * @summary Create swap operation
     * @param {SwapBetaApiCreateSwapOperationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwapBetaApi
     */
    public createSwapOperation(requestParameters: SwapBetaApiCreateSwapOperationRequest) {
        return SwapBetaApiFp(this.configuration).createSwapOperation(requestParameters.swapOperationRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Get swap operation Details by ID.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
     * @summary Get operation details
     * @param {SwapBetaApiGetSwapOperationByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwapBetaApi
     */
    public getSwapOperationById(requestParameters: SwapBetaApiGetSwapOperationByIdRequest) {
        return SwapBetaApiFp(this.configuration).getSwapOperationById(requestParameters.operationId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Return a list of swap operations for the specific workspace The operations are sorted by creation date in descending order, meaning the most recent operation appears first.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks TAP, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
     * @summary Get Operations list
     * @param {SwapBetaApiGetSwapOperationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwapBetaApi
     */
    public getSwapOperations(requestParameters: SwapBetaApiGetSwapOperationsRequest = {}) {
        return SwapBetaApiFp(this.configuration).getSwapOperations(requestParameters.pageCursor, requestParameters.pageSize).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Return a list of all supported swap providers.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Swap, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
     * @summary Get Providers List
     * @param {SwapBetaApiGetSwapProvidersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwapBetaApi
     */
    public getSwapProviders(requestParameters: SwapBetaApiGetSwapProvidersRequest = {}) {
        return SwapBetaApiFp(this.configuration).getSwapProviders(requestParameters.pageCursor, requestParameters.pageSize).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

