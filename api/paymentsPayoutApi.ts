/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { CreatePayoutRequest } from '../model/createPayoutRequest';
    import { DispatchPayoutResponse } from '../model/dispatchPayoutResponse';
    import { ErrorResponse } from '../model/errorResponse';
    import { PayoutResponse } from '../model/payoutResponse';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class PaymentsPayoutApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> </br> <b u>Create a payout instruction set.</b> </u></br> A payout instruction set is a set of instructions for distributing payments from a single payment account to a list of payee accounts. </br> The instruction set defines: </br> <ul> <li>the payment account and its account type (vault, exchange, or fiat). </li> <li>the account type (vault account, exchange account, whitelisted address, network connection, fiat account, or merchant account), the amount, and the asset of payment for each payee account.</li> </ul> 
                * @summary Create a payout instruction set
                * @param createPayoutRequest 
            */
        public async createPayout (createPayoutRequest?: CreatePayoutRequest, ) : Promise<PayoutResponse> {
                const path = this.configuration.basePath + '/payments/payout';
                let params: any = {};
                let headers: any = {}

                    if (typeof createPayoutRequest === 'object') {
                        for( const [key,value] of Object.entries(createPayoutRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['CreatePayoutRequest'] = ObjectSerializer.serialize(createPayoutRequest, "CreatePayoutRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<PayoutResponse>(requestOptions);
        }
            /**
            * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> </br><b u>Execute a payout instruction set.</b> </u> </br> </br>The instruction set will be verified and executed.</br> <b><u>Source locking</br></b> </u> If you are executing a payout instruction set from a payment account with an already active payout the active payout will complete before the new payout instruction set can be executed. </br> You cannot execute the same payout instruction set more than once. 
                * @summary Execute a payout instruction set
                * @param payoutId the payout id received from the creation of the payout instruction set
            */
        public async executePayoutAction (payoutId: string, ) : Promise<DispatchPayoutResponse> {
                const path = this.configuration.basePath + '/payments/payout/{payoutId}/actions/execute'
                .replace('{' + 'payoutId' + '}', encodeURIComponent(String(payoutId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'payoutId' is not null or undefined
                        if (payoutId === null || payoutId === undefined) {
                        throw new Error('Required parameter payoutId was null or undefined when calling executePayoutAction.');
                        }


                    if (typeof payoutId === 'object') {
                        for( const [key,value] of Object.entries(payoutId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['payoutId'] = ObjectSerializer.serialize(payoutId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                };
                return this.httpClient.request<DispatchPayoutResponse>(requestOptions);
        }
            /**
            * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> 
                * @summary Get the status of a payout instruction set
                * @param payoutId the payout id received from the creation of the payout instruction set
            */
        public async getPayoutById (payoutId: string, ) : Promise<PayoutResponse> {
                const path = this.configuration.basePath + '/payments/payout/{payoutId}'
                .replace('{' + 'payoutId' + '}', encodeURIComponent(String(payoutId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'payoutId' is not null or undefined
                        if (payoutId === null || payoutId === undefined) {
                        throw new Error('Required parameter payoutId was null or undefined when calling getPayoutById.');
                        }


                    if (typeof payoutId === 'object') {
                        for( const [key,value] of Object.entries(payoutId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['payoutId'] = ObjectSerializer.serialize(payoutId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<PayoutResponse>(requestOptions);
        }
        }
