/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";

// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { AddAssetToContractRequest } from '../models';
// @ts-ignore
import { CreateContractRequest } from '../models';
// @ts-ignore
import { ExternalWalletAsset } from '../models';
// @ts-ignore
import { UnmanagedWallet } from '../models';



    /**
 * ContractsApi - axios parameter creator
 * @export
 */
export const ContractsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds an asset to an existing contract.
         * @summary Add an asset to a contract
         * @param {string} contractId The ID of the contract
         * @param {string} assetId The ID of the asset to add
         * @param {AddAssetToContractRequest} [addAssetToContractRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAssetToContract: async (contractId: string, assetId: string, addAssetToContractRequest?: AddAssetToContractRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('addAssetToContract', 'contractId', contractId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('addAssetToContract', 'assetId', assetId)
            const localVarPath = `/contracts/{contractId}/{assetId}`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = addAssetToContractRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Creates a new contract.
         * @summary Create a contract
         * @param {CreateContractRequest} [createContractRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContract: async (createContractRequest?: CreateContractRequest, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = createContractRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Deletes a contract by ID.
         * @summary Delete a contract
         * @param {string} contractId The ID of the contract to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContract: async (contractId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('deleteContract', 'contractId', contractId)
            const localVarPath = `/contracts/{contractId}`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'DELETE'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns a contract asset by ID.
         * @summary Find a contract asset
         * @param {string} contractId The ID of the contract
         * @param {string} assetId The ID of the asset to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetInContract: async (contractId: string, assetId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('getAssetInContract', 'contractId', contractId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getAssetInContract', 'assetId', assetId)
            const localVarPath = `/contracts/{contractId}/{assetId}`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns a contract by ID.
         * @summary Find a specific contract
         * @param {string} contractId The ID of the contract to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContractById: async (contractId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('getContractById', 'contractId', contractId)
            const localVarPath = `/contracts/{contractId}`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets a list of contracts.
         * @summary List contracts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContracts: async (): Promise<AxiosRequestConfig> => {
            const localVarPath = `/contracts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Deletes a contract asset by ID.
         * @summary Delete a contract asset
         * @param {string} contractId The ID of the contract
         * @param {string} assetId The ID of the asset to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeAssetFromContract: async (contractId: string, assetId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'contractId' is not null or undefined
            assertParamExists('removeAssetFromContract', 'contractId', contractId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('removeAssetFromContract', 'assetId', assetId)
            const localVarPath = `/contracts/{contractId}/{assetId}`
                .replace(`{${"contractId"}}`, encodeURIComponent(String(contractId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'DELETE'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * ContractsApi - functional programming interface
 * @export
 */
export const ContractsApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = ContractsApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * Adds an asset to an existing contract.
         * @summary Add an asset to a contract
         * @param {string} contractId The ID of the contract
         * @param {string} assetId The ID of the asset to add
         * @param {AddAssetToContractRequest} [addAssetToContractRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAssetToContract(contractId: string, assetId: string, addAssetToContractRequest?: AddAssetToContractRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalWalletAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAssetToContract(contractId, assetId, addAssetToContractRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Creates a new contract.
         * @summary Create a contract
         * @param {CreateContractRequest} [createContractRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContract(createContractRequest?: CreateContractRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContract(createContractRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Deletes a contract by ID.
         * @summary Delete a contract
         * @param {string} contractId The ID of the contract to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContract(contractId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContract(contractId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns a contract asset by ID.
         * @summary Find a contract asset
         * @param {string} contractId The ID of the contract
         * @param {string} assetId The ID of the asset to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetInContract(contractId: string, assetId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExternalWalletAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetInContract(contractId, assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns a contract by ID.
         * @summary Find a specific contract
         * @param {string} contractId The ID of the contract to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContractById(contractId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContractById(contractId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets a list of contracts.
         * @summary List contracts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContracts(): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UnmanagedWallet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContracts();
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Deletes a contract asset by ID.
         * @summary Delete a contract asset
         * @param {string} contractId The ID of the contract
         * @param {string} assetId The ID of the asset to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeAssetFromContract(contractId: string, assetId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeAssetFromContract(contractId, assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for addAssetToContract operation in ContractsApi.
 * @export
 * @interface ContractsApiAddAssetToContractRequest
 */
export interface ContractsApiAddAssetToContractRequest {
    /**
     * The ID of the contract
     * @type {string}
     * @memberof ContractsApiAddAssetToContract
     */
    readonly contractId: string

    /**
     * The ID of the asset to add
     * @type {string}
     * @memberof ContractsApiAddAssetToContract
     */
    readonly assetId: string

    /**
     * 
     * @type {AddAssetToContractRequest}
     * @memberof ContractsApiAddAssetToContract
     */
    readonly addAssetToContractRequest?: AddAssetToContractRequest
}

/**
 * Request parameters for createContract operation in ContractsApi.
 * @export
 * @interface ContractsApiCreateContractRequest
 */
export interface ContractsApiCreateContractRequest {
    /**
     * 
     * @type {CreateContractRequest}
     * @memberof ContractsApiCreateContract
     */
    readonly createContractRequest?: CreateContractRequest
}

/**
 * Request parameters for deleteContract operation in ContractsApi.
 * @export
 * @interface ContractsApiDeleteContractRequest
 */
export interface ContractsApiDeleteContractRequest {
    /**
     * The ID of the contract to delete
     * @type {string}
     * @memberof ContractsApiDeleteContract
     */
    readonly contractId: string
}

/**
 * Request parameters for getAssetInContract operation in ContractsApi.
 * @export
 * @interface ContractsApiGetAssetInContractRequest
 */
export interface ContractsApiGetAssetInContractRequest {
    /**
     * The ID of the contract
     * @type {string}
     * @memberof ContractsApiGetAssetInContract
     */
    readonly contractId: string

    /**
     * The ID of the asset to return
     * @type {string}
     * @memberof ContractsApiGetAssetInContract
     */
    readonly assetId: string
}

/**
 * Request parameters for getContractById operation in ContractsApi.
 * @export
 * @interface ContractsApiGetContractByIdRequest
 */
export interface ContractsApiGetContractByIdRequest {
    /**
     * The ID of the contract to return
     * @type {string}
     * @memberof ContractsApiGetContractById
     */
    readonly contractId: string
}

/**
 * Request parameters for removeAssetFromContract operation in ContractsApi.
 * @export
 * @interface ContractsApiRemoveAssetFromContractRequest
 */
export interface ContractsApiRemoveAssetFromContractRequest {
    /**
     * The ID of the contract
     * @type {string}
     * @memberof ContractsApiRemoveAssetFromContract
     */
    readonly contractId: string

    /**
     * The ID of the asset to delete
     * @type {string}
     * @memberof ContractsApiRemoveAssetFromContract
     */
    readonly assetId: string
}

/**
 * ContractsApi - object-oriented interface
 * @export
 * @class ContractsApi
 * @extends {BaseAPI}
 */
export class ContractsApi extends BaseAPI {
    /**
     * Adds an asset to an existing contract.
     * @summary Add an asset to a contract
     * @param {ContractsApiAddAssetToContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public addAssetToContract(requestParameters: ContractsApiAddAssetToContractRequest, ) {
        return ContractsApiFp(this.httpClient).addAssetToContract(requestParameters.contractId, requestParameters.assetId, requestParameters.addAssetToContractRequest, );
    }

    /**
     * Creates a new contract.
     * @summary Create a contract
     * @param {ContractsApiCreateContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public createContract(requestParameters: ContractsApiCreateContractRequest = {}, ) {
        return ContractsApiFp(this.httpClient).createContract(requestParameters.createContractRequest, );
    }

    /**
     * Deletes a contract by ID.
     * @summary Delete a contract
     * @param {ContractsApiDeleteContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public deleteContract(requestParameters: ContractsApiDeleteContractRequest, ) {
        return ContractsApiFp(this.httpClient).deleteContract(requestParameters.contractId, );
    }

    /**
     * Returns a contract asset by ID.
     * @summary Find a contract asset
     * @param {ContractsApiGetAssetInContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public getAssetInContract(requestParameters: ContractsApiGetAssetInContractRequest, ) {
        return ContractsApiFp(this.httpClient).getAssetInContract(requestParameters.contractId, requestParameters.assetId, );
    }

    /**
     * Returns a contract by ID.
     * @summary Find a specific contract
     * @param {ContractsApiGetContractByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public getContractById(requestParameters: ContractsApiGetContractByIdRequest, ) {
        return ContractsApiFp(this.httpClient).getContractById(requestParameters.contractId, );
    }

    /**
     * Gets a list of contracts.
     * @summary List contracts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public getContracts() {
        return ContractsApiFp(this.httpClient).getContracts();
    }

    /**
     * Deletes a contract asset by ID.
     * @summary Delete a contract asset
     * @param {ContractsApiRemoveAssetFromContractRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContractsApi
     */
    public removeAssetFromContract(requestParameters: ContractsApiRemoveAssetFromContractRequest, ) {
        return ContractsApiFp(this.httpClient).removeAssetFromContract(requestParameters.contractId, requestParameters.assetId, );
    }
}
