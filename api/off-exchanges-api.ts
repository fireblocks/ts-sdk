/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";

// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { AddCollateralRequestBody } from '../models';
// @ts-ignore
import { CreateTransactionResponse } from '../models';
// @ts-ignore
import { ExchangeAccount } from '../models';
// @ts-ignore
import { RemoveCollateralRequestBody } from '../models';
// @ts-ignore
import { SettlementRequestBody } from '../models';
// @ts-ignore
import { SettlementResponse } from '../models';



    /**
 * OffExchangesApi - axios parameter creator
 * @export
 */
export const OffExchangesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * add collateral, create deposit request
         * @summary add collateral
         * @param {AddCollateralRequestBody} [addCollateralRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOffExchange: async (addCollateralRequestBody?: AddCollateralRequestBody, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/off_exchange/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = addCollateralRequestBody as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns a collateral account by mainExchangeAccountId.
         * @summary Find a specific collateral exchange account
         * @param {string} mainExchangeAccountId The id of the main exchange account for which the requested collateral account is associated with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffExchangeCollateralAccounts: async (mainExchangeAccountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'mainExchangeAccountId' is not null or undefined
            assertParamExists('getOffExchangeCollateralAccounts', 'mainExchangeAccountId', mainExchangeAccountId)
            const localVarPath = `/off_exchange/collateral_accounts/{mainExchangeAccountId}`
                .replace(`{${"mainExchangeAccountId"}}`, encodeURIComponent(String(mainExchangeAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * get settlements transactions from exchange
         * @summary get settlements transactions from exchange
         * @param {string} mainExchangeAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOffExchangeSettlementTransactions: async (mainExchangeAccountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'mainExchangeAccountId' is not null or undefined
            assertParamExists('getOffExchangeSettlementTransactions', 'mainExchangeAccountId', mainExchangeAccountId)
            const localVarPath = `/off_exchange/settlements/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mainExchangeAccountId !== undefined) {
                localVarQueryParameter['mainExchangeAccountId'] = mainExchangeAccountId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * remove collateral, create withdraw request
         * @summary remove collateral
         * @param {RemoveCollateralRequestBody} [removeCollateralRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeOffExchange: async (removeCollateralRequestBody?: RemoveCollateralRequestBody, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/off_exchange/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = removeCollateralRequestBody as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * create settlement for a trader
         * @summary create settlement for a trader
         * @param {SettlementRequestBody} [settlementRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settleOffExchangeTrades: async (settlementRequestBody?: SettlementRequestBody, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/off_exchange/settlements/trader`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = settlementRequestBody as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * OffExchangesApi - functional programming interface
 * @export
 */
export const OffExchangesApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = OffExchangesApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * add collateral, create deposit request
         * @summary add collateral
         * @param {AddCollateralRequestBody} [addCollateralRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOffExchange(addCollateralRequestBody?: AddCollateralRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOffExchange(addCollateralRequestBody, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns a collateral account by mainExchangeAccountId.
         * @summary Find a specific collateral exchange account
         * @param {string} mainExchangeAccountId The id of the main exchange account for which the requested collateral account is associated with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffExchangeCollateralAccounts(mainExchangeAccountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffExchangeCollateralAccounts(mainExchangeAccountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * get settlements transactions from exchange
         * @summary get settlements transactions from exchange
         * @param {string} mainExchangeAccountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOffExchangeSettlementTransactions(mainExchangeAccountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettlementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOffExchangeSettlementTransactions(mainExchangeAccountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * remove collateral, create withdraw request
         * @summary remove collateral
         * @param {RemoveCollateralRequestBody} [removeCollateralRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeOffExchange(removeCollateralRequestBody?: RemoveCollateralRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeOffExchange(removeCollateralRequestBody, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * create settlement for a trader
         * @summary create settlement for a trader
         * @param {SettlementRequestBody} [settlementRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settleOffExchangeTrades(settlementRequestBody?: SettlementRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettlementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settleOffExchangeTrades(settlementRequestBody, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for addOffExchange operation in OffExchangesApi.
 * @export
 * @interface OffExchangesApiAddOffExchangeRequest
 */
export interface OffExchangesApiAddOffExchangeRequest {
    /**
     * 
     * @type {AddCollateralRequestBody}
     * @memberof OffExchangesApiAddOffExchange
     */
    readonly addCollateralRequestBody?: AddCollateralRequestBody
}

/**
 * Request parameters for getOffExchangeCollateralAccounts operation in OffExchangesApi.
 * @export
 * @interface OffExchangesApiGetOffExchangeCollateralAccountsRequest
 */
export interface OffExchangesApiGetOffExchangeCollateralAccountsRequest {
    /**
     * The id of the main exchange account for which the requested collateral account is associated with
     * @type {string}
     * @memberof OffExchangesApiGetOffExchangeCollateralAccounts
     */
    readonly mainExchangeAccountId: string
}

/**
 * Request parameters for getOffExchangeSettlementTransactions operation in OffExchangesApi.
 * @export
 * @interface OffExchangesApiGetOffExchangeSettlementTransactionsRequest
 */
export interface OffExchangesApiGetOffExchangeSettlementTransactionsRequest {
    /**
     * 
     * @type {string}
     * @memberof OffExchangesApiGetOffExchangeSettlementTransactions
     */
    readonly mainExchangeAccountId: string
}

/**
 * Request parameters for removeOffExchange operation in OffExchangesApi.
 * @export
 * @interface OffExchangesApiRemoveOffExchangeRequest
 */
export interface OffExchangesApiRemoveOffExchangeRequest {
    /**
     * 
     * @type {RemoveCollateralRequestBody}
     * @memberof OffExchangesApiRemoveOffExchange
     */
    readonly removeCollateralRequestBody?: RemoveCollateralRequestBody
}

/**
 * Request parameters for settleOffExchangeTrades operation in OffExchangesApi.
 * @export
 * @interface OffExchangesApiSettleOffExchangeTradesRequest
 */
export interface OffExchangesApiSettleOffExchangeTradesRequest {
    /**
     * 
     * @type {SettlementRequestBody}
     * @memberof OffExchangesApiSettleOffExchangeTrades
     */
    readonly settlementRequestBody?: SettlementRequestBody
}

/**
 * OffExchangesApi - object-oriented interface
 * @export
 * @class OffExchangesApi
 * @extends {BaseAPI}
 */
export class OffExchangesApi extends BaseAPI {
    /**
     * add collateral, create deposit request
     * @summary add collateral
     * @param {OffExchangesApiAddOffExchangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffExchangesApi
     */
    public addOffExchange(requestParameters: OffExchangesApiAddOffExchangeRequest = {}, ) {
        return OffExchangesApiFp(this.httpClient).addOffExchange(requestParameters.addCollateralRequestBody, );
    }

    /**
     * Returns a collateral account by mainExchangeAccountId.
     * @summary Find a specific collateral exchange account
     * @param {OffExchangesApiGetOffExchangeCollateralAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffExchangesApi
     */
    public getOffExchangeCollateralAccounts(requestParameters: OffExchangesApiGetOffExchangeCollateralAccountsRequest, ) {
        return OffExchangesApiFp(this.httpClient).getOffExchangeCollateralAccounts(requestParameters.mainExchangeAccountId, );
    }

    /**
     * get settlements transactions from exchange
     * @summary get settlements transactions from exchange
     * @param {OffExchangesApiGetOffExchangeSettlementTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffExchangesApi
     */
    public getOffExchangeSettlementTransactions(requestParameters: OffExchangesApiGetOffExchangeSettlementTransactionsRequest, ) {
        return OffExchangesApiFp(this.httpClient).getOffExchangeSettlementTransactions(requestParameters.mainExchangeAccountId, );
    }

    /**
     * remove collateral, create withdraw request
     * @summary remove collateral
     * @param {OffExchangesApiRemoveOffExchangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffExchangesApi
     */
    public removeOffExchange(requestParameters: OffExchangesApiRemoveOffExchangeRequest = {}, ) {
        return OffExchangesApiFp(this.httpClient).removeOffExchange(requestParameters.removeCollateralRequestBody, );
    }

    /**
     * create settlement for a trader
     * @summary create settlement for a trader
     * @param {OffExchangesApiSettleOffExchangeTradesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffExchangesApi
     */
    public settleOffExchangeTrades(requestParameters: OffExchangesApiSettleOffExchangeTradesRequest = {}, ) {
        return OffExchangesApiFp(this.httpClient).settleOffExchangeTrades(requestParameters.settlementRequestBody, );
    }
}
