/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { GasStationConfiguration } from '../model/gasStationConfiguration';
    import { GasStationPropertiesResponse } from '../model/gasStationPropertiesResponse';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class GasStationsApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Returns gas station settings and balances for a requested asset.
                * @summary Get gas station settings by asset
                * @param assetId The ID of the asset
            */
        public async gasStationAssetIdGet (assetId: string, ) : Promise<GasStationPropertiesResponse> {
                const path = this.configuration.basePath + '/gas_station/{assetId}'
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling gasStationAssetIdGet.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<GasStationPropertiesResponse>(requestOptions);
        }
            /**
            * Configures gas station settings for a requested asset.
                * @summary Edit gas station settings for an asset
                * @param assetId The ID of the asset
                * @param gasStationConfiguration 
            */
        public async gasStationConfigurationAssetIdPut (assetId: string, gasStationConfiguration: GasStationConfiguration, ) : Promise<any> {
                const path = this.configuration.basePath + '/gas_station/configuration/{assetId}'
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling gasStationConfigurationAssetIdPut.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }
                        // verify required parameter 'gasStationConfiguration' is not null or undefined
                        if (gasStationConfiguration === null || gasStationConfiguration === undefined) {
                        throw new Error('Required parameter gasStationConfiguration was null or undefined when calling gasStationConfigurationAssetIdPut.');
                        }


                    if (typeof gasStationConfiguration === 'object') {
                        for( const [key,value] of Object.entries(gasStationConfiguration)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['GasStationConfiguration'] = ObjectSerializer.serialize(gasStationConfiguration, "GasStationConfiguration");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PUT',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            * Configures gas station settings for ETH.
                * @summary Edit gas station settings
                * @param gasStationConfiguration 
            */
        public async gasStationConfigurationPut (gasStationConfiguration: GasStationConfiguration, ) : Promise<any> {
                const path = this.configuration.basePath + '/gas_station/configuration';
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'gasStationConfiguration' is not null or undefined
                        if (gasStationConfiguration === null || gasStationConfiguration === undefined) {
                        throw new Error('Required parameter gasStationConfiguration was null or undefined when calling gasStationConfigurationPut.');
                        }


                    if (typeof gasStationConfiguration === 'object') {
                        for( const [key,value] of Object.entries(gasStationConfiguration)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['GasStationConfiguration'] = ObjectSerializer.serialize(gasStationConfiguration, "GasStationConfiguration");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PUT',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            * Returns gas station settings and ETH balance.
                * @summary Get gas station settings
            */
        public async gasStationGet () : Promise<GasStationPropertiesResponse> {
                const path = this.configuration.basePath + '/gas_station';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<GasStationPropertiesResponse>(requestOptions);
        }
        }
