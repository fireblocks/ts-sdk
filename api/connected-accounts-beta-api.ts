/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ConnectedAccountBalancesResponse } from '../models';
// @ts-ignore
import { ConnectedAccountRateResponse } from '../models';
// @ts-ignore
import { ConnectedAccountTradingPairsResponse } from '../models';
// @ts-ignore
import { ConnectedAccountsResponse } from '../models';
// @ts-ignore
import { ConnectedSingleAccountResponse } from '../models';
// @ts-ignore
import { ErrorSchema } from '../models';
/**
 * ConnectedAccountsBetaApi - axios parameter creator
 * @export
 */
export const ConnectedAccountsBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve detailed information about a specific connected account by ID. </br> **Note**: - This endpoint is currently in beta and might be subject to changes. 
         * @summary Get connected account
         * @param {string} accountId The ID of the account to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedAccount: async (accountId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getConnectedAccount', 'accountId', accountId)
            const localVarPath = `/connected_accounts/{accountId}`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current asset balances for a specific connected account as a flat list (one row per assetId, balanceType)  </br>  **Note**:  - This endpoint is currently in beta and might be subject to changes. 
         * @summary Get balances for an account
         * @param {string} accountId The ID of the account to fetch balances for.
         * @param {number} [pageSize] Page size for pagination.
         * @param {string} [pageCursor] Page cursor for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedAccountBalances: async (accountId: string, pageSize?: number, pageCursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getConnectedAccountBalances', 'accountId', accountId)
            const localVarPath = `/connected_accounts/{accountId}/balances`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current exchange rates for converting between specific assets in a connected account.
         * @summary Get exchange rates for an account
         * @param {string} accountId The ID of the account to fetch rates for.
         * @param {string} baseAssetId The ID of the asset to fetch rates for.
         * @param {string} quoteAssetId The ID of the asset to get the rates nominally.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedAccountRates: async (accountId: string, baseAssetId: string, quoteAssetId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getConnectedAccountRates', 'accountId', accountId)
            assertParamExistsAndNotEmpty('getConnectedAccountRates', 'baseAssetId', baseAssetId)
            assertParamExistsAndNotEmpty('getConnectedAccountRates', 'quoteAssetId', quoteAssetId)
            const localVarPath = `/connected_accounts/{accountId}/rates`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseAssetId !== undefined) {
                localVarQueryParameter['baseAssetId'] = baseAssetId;
            }

            if (quoteAssetId !== undefined) {
                localVarQueryParameter['quoteAssetId'] = quoteAssetId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all asset trading pairs supported by a specific connected account, including the pair type (quote, market, onOffRamp).
         * @summary Get supported trading pairs for an account
         * @param {string} accountId The ID of the account to fetch supported pairs for.
         * @param {number} [pageSize] Page size for pagination.
         * @param {string} [pageCursor] Page cursor for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedAccountTradingPairs: async (accountId: string, pageSize?: number, pageCursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getConnectedAccountTradingPairs', 'accountId', accountId)
            const localVarPath = `/connected_accounts/{accountId}/manifest/capabilities/trading/pairs`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all connected accounts </br> **Note**: - This endpoint is currently in beta and might be subject to changes. 
         * @summary Get connected accounts
         * @param {boolean} [mainAccounts] Whether to include only main accounts in the response.
         * @param {number} [pageSize] Page size for pagination.
         * @param {string} [pageCursor] Page cursor for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedAccounts: async (mainAccounts?: boolean, pageSize?: number, pageCursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/connected_accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mainAccounts !== undefined) {
                localVarQueryParameter['mainAccounts'] = mainAccounts;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectedAccountsBetaApi - functional programming interface
 * @export
 */
export const ConnectedAccountsBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectedAccountsBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve detailed information about a specific connected account by ID. </br> **Note**: - This endpoint is currently in beta and might be subject to changes. 
         * @summary Get connected account
         * @param {string} accountId The ID of the account to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectedAccount(accountId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectedSingleAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectedAccount(accountId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConnectedAccountsBetaApi.getConnectedAccount']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve current asset balances for a specific connected account as a flat list (one row per assetId, balanceType)  </br>  **Note**:  - This endpoint is currently in beta and might be subject to changes. 
         * @summary Get balances for an account
         * @param {string} accountId The ID of the account to fetch balances for.
         * @param {number} [pageSize] Page size for pagination.
         * @param {string} [pageCursor] Page cursor for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectedAccountBalances(accountId: string, pageSize?: number, pageCursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectedAccountBalancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectedAccountBalances(accountId, pageSize, pageCursor, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConnectedAccountsBetaApi.getConnectedAccountBalances']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve current exchange rates for converting between specific assets in a connected account.
         * @summary Get exchange rates for an account
         * @param {string} accountId The ID of the account to fetch rates for.
         * @param {string} baseAssetId The ID of the asset to fetch rates for.
         * @param {string} quoteAssetId The ID of the asset to get the rates nominally.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectedAccountRates(accountId: string, baseAssetId: string, quoteAssetId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectedAccountRateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectedAccountRates(accountId, baseAssetId, quoteAssetId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConnectedAccountsBetaApi.getConnectedAccountRates']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve all asset trading pairs supported by a specific connected account, including the pair type (quote, market, onOffRamp).
         * @summary Get supported trading pairs for an account
         * @param {string} accountId The ID of the account to fetch supported pairs for.
         * @param {number} [pageSize] Page size for pagination.
         * @param {string} [pageCursor] Page cursor for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectedAccountTradingPairs(accountId: string, pageSize?: number, pageCursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectedAccountTradingPairsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectedAccountTradingPairs(accountId, pageSize, pageCursor, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConnectedAccountsBetaApi.getConnectedAccountTradingPairs']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns all connected accounts </br> **Note**: - This endpoint is currently in beta and might be subject to changes. 
         * @summary Get connected accounts
         * @param {boolean} [mainAccounts] Whether to include only main accounts in the response.
         * @param {number} [pageSize] Page size for pagination.
         * @param {string} [pageCursor] Page cursor for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnectedAccounts(mainAccounts?: boolean, pageSize?: number, pageCursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConnectedAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnectedAccounts(mainAccounts, pageSize, pageCursor, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConnectedAccountsBetaApi.getConnectedAccounts']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ConnectedAccountsBetaApi - factory interface
 * @export
 */
export const ConnectedAccountsBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectedAccountsBetaApiFp(configuration)
    return {
        /**
         * Retrieve detailed information about a specific connected account by ID. </br> **Note**: - This endpoint is currently in beta and might be subject to changes. 
         * @summary Get connected account
         * @param {ConnectedAccountsBetaApiGetConnectedAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedAccount(requestParameters: ConnectedAccountsBetaApiGetConnectedAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConnectedSingleAccountResponse> {
            return localVarFp.getConnectedAccount(requestParameters.accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve current asset balances for a specific connected account as a flat list (one row per assetId, balanceType)  </br>  **Note**:  - This endpoint is currently in beta and might be subject to changes. 
         * @summary Get balances for an account
         * @param {ConnectedAccountsBetaApiGetConnectedAccountBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedAccountBalances(requestParameters: ConnectedAccountsBetaApiGetConnectedAccountBalancesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConnectedAccountBalancesResponse> {
            return localVarFp.getConnectedAccountBalances(requestParameters.accountId, requestParameters.pageSize, requestParameters.pageCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve current exchange rates for converting between specific assets in a connected account.
         * @summary Get exchange rates for an account
         * @param {ConnectedAccountsBetaApiGetConnectedAccountRatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedAccountRates(requestParameters: ConnectedAccountsBetaApiGetConnectedAccountRatesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConnectedAccountRateResponse> {
            return localVarFp.getConnectedAccountRates(requestParameters.accountId, requestParameters.baseAssetId, requestParameters.quoteAssetId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all asset trading pairs supported by a specific connected account, including the pair type (quote, market, onOffRamp).
         * @summary Get supported trading pairs for an account
         * @param {ConnectedAccountsBetaApiGetConnectedAccountTradingPairsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedAccountTradingPairs(requestParameters: ConnectedAccountsBetaApiGetConnectedAccountTradingPairsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ConnectedAccountTradingPairsResponse> {
            return localVarFp.getConnectedAccountTradingPairs(requestParameters.accountId, requestParameters.pageSize, requestParameters.pageCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all connected accounts </br> **Note**: - This endpoint is currently in beta and might be subject to changes. 
         * @summary Get connected accounts
         * @param {ConnectedAccountsBetaApiGetConnectedAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnectedAccounts(requestParameters: ConnectedAccountsBetaApiGetConnectedAccountsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ConnectedAccountsResponse> {
            return localVarFp.getConnectedAccounts(requestParameters.mainAccounts, requestParameters.pageSize, requestParameters.pageCursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getConnectedAccount operation in ConnectedAccountsBetaApi.
 * @export
 * @interface ConnectedAccountsBetaApiGetConnectedAccountRequest
 */
export interface ConnectedAccountsBetaApiGetConnectedAccountRequest {
    /**
     * The ID of the account to fetch.
     * @type {string}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccount
     */
    readonly accountId: string
}

/**
 * Request parameters for getConnectedAccountBalances operation in ConnectedAccountsBetaApi.
 * @export
 * @interface ConnectedAccountsBetaApiGetConnectedAccountBalancesRequest
 */
export interface ConnectedAccountsBetaApiGetConnectedAccountBalancesRequest {
    /**
     * The ID of the account to fetch balances for.
     * @type {string}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccountBalances
     */
    readonly accountId: string

    /**
     * Page size for pagination.
     * @type {number}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccountBalances
     */
    readonly pageSize?: number

    /**
     * Page cursor for pagination.
     * @type {string}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccountBalances
     */
    readonly pageCursor?: string
}

/**
 * Request parameters for getConnectedAccountRates operation in ConnectedAccountsBetaApi.
 * @export
 * @interface ConnectedAccountsBetaApiGetConnectedAccountRatesRequest
 */
export interface ConnectedAccountsBetaApiGetConnectedAccountRatesRequest {
    /**
     * The ID of the account to fetch rates for.
     * @type {string}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccountRates
     */
    readonly accountId: string

    /**
     * The ID of the asset to fetch rates for.
     * @type {string}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccountRates
     */
    readonly baseAssetId: string

    /**
     * The ID of the asset to get the rates nominally.
     * @type {string}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccountRates
     */
    readonly quoteAssetId: string
}

/**
 * Request parameters for getConnectedAccountTradingPairs operation in ConnectedAccountsBetaApi.
 * @export
 * @interface ConnectedAccountsBetaApiGetConnectedAccountTradingPairsRequest
 */
export interface ConnectedAccountsBetaApiGetConnectedAccountTradingPairsRequest {
    /**
     * The ID of the account to fetch supported pairs for.
     * @type {string}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccountTradingPairs
     */
    readonly accountId: string

    /**
     * Page size for pagination.
     * @type {number}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccountTradingPairs
     */
    readonly pageSize?: number

    /**
     * Page cursor for pagination.
     * @type {string}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccountTradingPairs
     */
    readonly pageCursor?: string
}

/**
 * Request parameters for getConnectedAccounts operation in ConnectedAccountsBetaApi.
 * @export
 * @interface ConnectedAccountsBetaApiGetConnectedAccountsRequest
 */
export interface ConnectedAccountsBetaApiGetConnectedAccountsRequest {
    /**
     * Whether to include only main accounts in the response.
     * @type {boolean}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccounts
     */
    readonly mainAccounts?: boolean

    /**
     * Page size for pagination.
     * @type {number}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccounts
     */
    readonly pageSize?: number

    /**
     * Page cursor for pagination.
     * @type {string}
     * @memberof ConnectedAccountsBetaApiGetConnectedAccounts
     */
    readonly pageCursor?: string
}

/**
 * ConnectedAccountsBetaApi - object-oriented interface
 * @export
 * @class ConnectedAccountsBetaApi
 * @extends {BaseAPI}
 */
export class ConnectedAccountsBetaApi extends BaseAPI {
    /**
     * Retrieve detailed information about a specific connected account by ID. </br> **Note**: - This endpoint is currently in beta and might be subject to changes. 
     * @summary Get connected account
     * @param {ConnectedAccountsBetaApiGetConnectedAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectedAccountsBetaApi
     */
    public getConnectedAccount(requestParameters: ConnectedAccountsBetaApiGetConnectedAccountRequest) {
        return ConnectedAccountsBetaApiFp(this.configuration).getConnectedAccount(requestParameters.accountId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Retrieve current asset balances for a specific connected account as a flat list (one row per assetId, balanceType)  </br>  **Note**:  - This endpoint is currently in beta and might be subject to changes. 
     * @summary Get balances for an account
     * @param {ConnectedAccountsBetaApiGetConnectedAccountBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectedAccountsBetaApi
     */
    public getConnectedAccountBalances(requestParameters: ConnectedAccountsBetaApiGetConnectedAccountBalancesRequest) {
        return ConnectedAccountsBetaApiFp(this.configuration).getConnectedAccountBalances(requestParameters.accountId, requestParameters.pageSize, requestParameters.pageCursor).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Retrieve current exchange rates for converting between specific assets in a connected account.
     * @summary Get exchange rates for an account
     * @param {ConnectedAccountsBetaApiGetConnectedAccountRatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectedAccountsBetaApi
     */
    public getConnectedAccountRates(requestParameters: ConnectedAccountsBetaApiGetConnectedAccountRatesRequest) {
        return ConnectedAccountsBetaApiFp(this.configuration).getConnectedAccountRates(requestParameters.accountId, requestParameters.baseAssetId, requestParameters.quoteAssetId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Retrieve all asset trading pairs supported by a specific connected account, including the pair type (quote, market, onOffRamp).
     * @summary Get supported trading pairs for an account
     * @param {ConnectedAccountsBetaApiGetConnectedAccountTradingPairsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectedAccountsBetaApi
     */
    public getConnectedAccountTradingPairs(requestParameters: ConnectedAccountsBetaApiGetConnectedAccountTradingPairsRequest) {
        return ConnectedAccountsBetaApiFp(this.configuration).getConnectedAccountTradingPairs(requestParameters.accountId, requestParameters.pageSize, requestParameters.pageCursor).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns all connected accounts </br> **Note**: - This endpoint is currently in beta and might be subject to changes. 
     * @summary Get connected accounts
     * @param {ConnectedAccountsBetaApiGetConnectedAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectedAccountsBetaApi
     */
    public getConnectedAccounts(requestParameters: ConnectedAccountsBetaApiGetConnectedAccountsRequest = {}) {
        return ConnectedAccountsBetaApiFp(this.configuration).getConnectedAccounts(requestParameters.mainAccounts, requestParameters.pageSize, requestParameters.pageCursor).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

