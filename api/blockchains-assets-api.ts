/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AssetBadRequestErrorResponse } from '../models';
// @ts-ignore
import { AssetConflictErrorResponse } from '../models';
// @ts-ignore
import { AssetForbiddenErrorResponse } from '../models';
// @ts-ignore
import { AssetInternalServerErrorResponse } from '../models';
// @ts-ignore
import { AssetNotFoundErrorResponse } from '../models';
// @ts-ignore
import { AssetPriceForbiddenErrorResponse } from '../models';
// @ts-ignore
import { AssetPriceNotFoundErrorResponse } from '../models';
// @ts-ignore
import { AssetPriceResponse } from '../models';
// @ts-ignore
import { AssetResponse } from '../models';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { GetSupportedAssetsResponse } from '../models';
// @ts-ignore
import { RegisterNewAssetRequest } from '../models';
// @ts-ignore
import { SetAssetPriceRequest } from '../models';
/**
 * BlockchainsAssetsApi - axios parameter creator
 * @export
 */
export const BlockchainsAssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all asset types supported by Fireblocks.
         * @summary List all asset types supported by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedAssets: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/supported_assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new asset to a workspace and return the newly created asset\'s details. Currently supported chains are: - EVM based chains - Stellar - Algorand - TRON - NEAR - Solana 
         * @summary Register an asset
         * @param {RegisterNewAssetRequest} [registerNewAssetRequest] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewAsset: async (registerNewAssetRequest?: RegisterNewAssetRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerNewAssetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set asset price for the given asset id. Returns the asset price response. 
         * @summary Set asset price
         * @param {string} id The ID of the asset
         * @param {SetAssetPriceRequest} [setAssetPriceRequest] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAssetPrice: async (id: string, setAssetPriceRequest?: SetAssetPriceRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('setAssetPrice', 'id', id)
            const localVarPath = `/assets/prices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setAssetPriceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlockchainsAssetsApi - functional programming interface
 * @export
 */
export const BlockchainsAssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlockchainsAssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all asset types supported by Fireblocks.
         * @summary List all asset types supported by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSupportedAssets(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSupportedAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSupportedAssets(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlockchainsAssetsApi.getSupportedAssets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Register a new asset to a workspace and return the newly created asset\'s details. Currently supported chains are: - EVM based chains - Stellar - Algorand - TRON - NEAR - Solana 
         * @summary Register an asset
         * @param {RegisterNewAssetRequest} [registerNewAssetRequest] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerNewAsset(registerNewAssetRequest?: RegisterNewAssetRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerNewAsset(registerNewAssetRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlockchainsAssetsApi.registerNewAsset']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Set asset price for the given asset id. Returns the asset price response. 
         * @summary Set asset price
         * @param {string} id The ID of the asset
         * @param {SetAssetPriceRequest} [setAssetPriceRequest] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAssetPrice(id: string, setAssetPriceRequest?: SetAssetPriceRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetPriceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAssetPrice(id, setAssetPriceRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlockchainsAssetsApi.setAssetPrice']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * BlockchainsAssetsApi - factory interface
 * @export
 */
export const BlockchainsAssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlockchainsAssetsApiFp(configuration)
    return {
        /**
         * Returns all asset types supported by Fireblocks.
         * @summary List all asset types supported by Fireblocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSupportedAssets(options?: RawAxiosRequestConfig): AxiosPromise<GetSupportedAssetsResponse> {
            return localVarFp.getSupportedAssets(options).then((request) => request(axios, basePath));
        },
        /**
         * Register a new asset to a workspace and return the newly created asset\'s details. Currently supported chains are: - EVM based chains - Stellar - Algorand - TRON - NEAR - Solana 
         * @summary Register an asset
         * @param {BlockchainsAssetsApiRegisterNewAssetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerNewAsset(requestParameters: BlockchainsAssetsApiRegisterNewAssetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<AssetResponse> {
            return localVarFp.registerNewAsset(requestParameters.registerNewAssetRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Set asset price for the given asset id. Returns the asset price response. 
         * @summary Set asset price
         * @param {BlockchainsAssetsApiSetAssetPriceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAssetPrice(requestParameters: BlockchainsAssetsApiSetAssetPriceRequest, options?: RawAxiosRequestConfig): AxiosPromise<AssetPriceResponse> {
            return localVarFp.setAssetPrice(requestParameters.id, requestParameters.setAssetPriceRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for registerNewAsset operation in BlockchainsAssetsApi.
 * @export
 * @interface BlockchainsAssetsApiRegisterNewAssetRequest
 */
export interface BlockchainsAssetsApiRegisterNewAssetRequest {
    /**
     * 
     * @type {RegisterNewAssetRequest}
     * @memberof BlockchainsAssetsApiRegisterNewAsset
     */
    readonly registerNewAssetRequest?: RegisterNewAssetRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof BlockchainsAssetsApiRegisterNewAsset
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for setAssetPrice operation in BlockchainsAssetsApi.
 * @export
 * @interface BlockchainsAssetsApiSetAssetPriceRequest
 */
export interface BlockchainsAssetsApiSetAssetPriceRequest {
    /**
     * The ID of the asset
     * @type {string}
     * @memberof BlockchainsAssetsApiSetAssetPrice
     */
    readonly id: string

    /**
     * 
     * @type {SetAssetPriceRequest}
     * @memberof BlockchainsAssetsApiSetAssetPrice
     */
    readonly setAssetPriceRequest?: SetAssetPriceRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof BlockchainsAssetsApiSetAssetPrice
     */
    readonly idempotencyKey?: string
}

/**
 * BlockchainsAssetsApi - object-oriented interface
 * @export
 * @class BlockchainsAssetsApi
 * @extends {BaseAPI}
 */
export class BlockchainsAssetsApi extends BaseAPI {
    /**
     * Returns all asset types supported by Fireblocks.
     * @summary List all asset types supported by Fireblocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainsAssetsApi
     */
    public getSupportedAssets() {
        return BlockchainsAssetsApiFp(this.configuration).getSupportedAssets().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Register a new asset to a workspace and return the newly created asset\'s details. Currently supported chains are: - EVM based chains - Stellar - Algorand - TRON - NEAR - Solana 
     * @summary Register an asset
     * @param {BlockchainsAssetsApiRegisterNewAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainsAssetsApi
     */
    public registerNewAsset(requestParameters: BlockchainsAssetsApiRegisterNewAssetRequest = {}) {
        return BlockchainsAssetsApiFp(this.configuration).registerNewAsset(requestParameters.registerNewAssetRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Set asset price for the given asset id. Returns the asset price response. 
     * @summary Set asset price
     * @param {BlockchainsAssetsApiSetAssetPriceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainsAssetsApi
     */
    public setAssetPrice(requestParameters: BlockchainsAssetsApiSetAssetPriceRequest) {
        return BlockchainsAssetsApiFp(this.configuration).setAssetPrice(requestParameters.id, requestParameters.setAssetPriceRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

