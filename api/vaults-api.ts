/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';


// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { CreateAddressResponse } from '../models';
// @ts-ignore
import { CreateVaultAccountAssetAddressRequest } from '../models';
// @ts-ignore
import { CreateVaultAccountAssetRequest } from '../models';
// @ts-ignore
import { CreateVaultAccountRequest } from '../models';
// @ts-ignore
import { CreateVaultAssetResponse } from '../models';
// @ts-ignore
import { PaginatedAssetWalletResponse } from '../models';
// @ts-ignore
import { PublicKeyInformation } from '../models';
// @ts-ignore
import { SetAutoFuelForVaultAccountRequest } from '../models';
// @ts-ignore
import { SetCustomerRefIdForVaultAccountRequest } from '../models';
// @ts-ignore
import { UnspentInputsResponse } from '../models';
// @ts-ignore
import { UpdateVaultAccountAssetAddressRequest } from '../models';
// @ts-ignore
import { UpdateVaultAccountRequest } from '../models';
// @ts-ignore
import { VaultAccount } from '../models';
// @ts-ignore
import { VaultAccountsPagedResponse } from '../models';
// @ts-ignore
import { VaultAsset } from '../models';
// @ts-ignore
import { VaultWalletAddress } from '../models';



    /**
 * VaultsApi - axios parameter creator
 * @export
 */
export const VaultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Initiates activation for a wallet in a vault account.
         * @summary Activate a wallet in a vault account
         * @param {string} vaultAccountId The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
         * @param {string} assetId The ID of the asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        activateAssetForVaultAccount: async (vaultAccountId: string, assetId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('activateAssetForVaultAccount', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('activateAssetForVaultAccount', 'assetId', assetId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}/activate`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Converts an existing segwit address to the legacy format.
         * @summary Convert a segwit address to legacy format
         * @param {string} vaultAccountId The ID of the vault account
         * @param {string} assetId The ID of the asset
         * @param {string} addressId The segwit address to translate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLegacyAddressForVaultAccountAsset: async (vaultAccountId: string, assetId: string, addressId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('createLegacyAddressForVaultAccountAsset', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('createLegacyAddressForVaultAccountAsset', 'assetId', assetId)
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('createLegacyAddressForVaultAccountAsset', 'addressId', addressId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}/create_legacy`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)))
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Creates a new vault account with the requested name.
         * @summary Create a new vault account
         * @param {CreateVaultAccountRequest} createVaultAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVaultAccount: async (createVaultAccountRequest: CreateVaultAccountRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'createVaultAccountRequest' is not null or undefined
            assertParamExists('createVaultAccount', 'createVaultAccountRequest', createVaultAccountRequest)
            const localVarPath = `/vault/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = createVaultAccountRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Creates a wallet for a specific asset in a vault account.
         * @summary Create a new wallet
         * @param {string} vaultAccountId The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
         * @param {string} assetId The ID of the asset
         * @param {CreateVaultAccountAssetRequest} [createVaultAccountAssetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVaultAccountAsset: async (vaultAccountId: string, assetId: string, createVaultAccountAssetRequest?: CreateVaultAccountAssetRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('createVaultAccountAsset', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('createVaultAccountAsset', 'assetId', assetId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = createVaultAccountAssetRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Creates a new deposit address for an asset of a vault account.
         * @summary Create new asset deposit address
         * @param {string} vaultAccountId The ID of the vault account to return
         * @param {string} assetId The ID of the asset
         * @param {CreateVaultAccountAssetAddressRequest} [createVaultAccountAssetAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVaultAccountAssetAddress: async (vaultAccountId: string, assetId: string, createVaultAccountAssetAddressRequest?: CreateVaultAccountAssetAddressRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('createVaultAccountAssetAddress', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('createVaultAccountAssetAddress', 'assetId', assetId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}/addresses`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = createVaultAccountAssetAddressRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances. **Note:**   - This API endpoint is in limited availability and available for selected customers. If you would like to get early access to this endpoint, please reach out to [Fireblocks Support](https://support.fireblocks.io/hc/en-us/requests/new?ticket_form_id=36000337220)   - This API call is subject to [rate limits](https://developers.fireblocks.com/reference/rate-limiting). 
         * @summary List asset wallets (Paginated)
         * @param {number} [totalAmountLargerThan] When specified, only asset wallets with total balance larger than this amount are returned.
         * @param {string} [assetId] When specified, only asset wallets cross vault accounts that have this asset ID are returned.
         * @param {string} [before] Fetches the next paginated response before this element. This element is a cursor and is returned at the response of the previous page.
         * @param {string} [after] Fetches the next paginated response after this element. This element is a cursor and is returned at the response of the previous page.
         * @param {number} [limit] The maximum number of asset wallets in a single response. The default is 200 and the maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetWallets: async (totalAmountLargerThan?: number, assetId?: string, before?: string, after?: string, limit?: number, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/vault/asset_wallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (totalAmountLargerThan !== undefined) {
                localVarQueryParameter['totalAmountLargerThan'] = totalAmountLargerThan;
            }

            if (assetId !== undefined) {
                localVarQueryParameter['assetId'] = assetId;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Get the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount.
         * @summary Get the maximum spendable amount in a single transaction.
         * @param {string} vaultAccountId The ID of the vault account, or \&#39;default\&#39; for the default vault account
         * @param {string} assetId The ID of the asset
         * @param {boolean} [manualSignging] False by default. The maximum number of inputs depends if the transaction will be signed by an automated co-signer server or on a mobile device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMaxSpendableAmount: async (vaultAccountId: string, assetId: string, manualSignging?: boolean, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('getMaxSpendableAmount', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getMaxSpendableAmount', 'assetId', assetId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}/max_spendable_amount`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (manualSignging !== undefined) {
                localVarQueryParameter['manualSignging'] = manualSignging;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time.
         * @summary List vault acounts (Paginated)
         * @param {string} [namePrefix] 
         * @param {string} [nameSuffix] 
         * @param {number} [minAmountThreshold] 
         * @param {string} [assetId] 
         * @param {'ASC' | 'DESC'} [orderBy] 
         * @param {string} [before] 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPagedVaultAccounts: async (namePrefix?: string, nameSuffix?: string, minAmountThreshold?: number, assetId?: string, orderBy?: 'ASC' | 'DESC', before?: string, after?: string, limit?: number, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/vault/accounts_paged`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (namePrefix !== undefined) {
                localVarQueryParameter['namePrefix'] = namePrefix;
            }

            if (nameSuffix !== undefined) {
                localVarQueryParameter['nameSuffix'] = nameSuffix;
            }

            if (minAmountThreshold !== undefined) {
                localVarQueryParameter['minAmountThreshold'] = minAmountThreshold;
            }

            if (assetId !== undefined) {
                localVarQueryParameter['assetId'] = assetId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (before !== undefined) {
                localVarQueryParameter['before'] = before;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets the public key information based on derivation path and signing algorithm.
         * @summary Get the public key information
         * @param {string} derivationPath 
         * @param {string} algorithm 
         * @param {boolean} [compressed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKeyInfo: async (derivationPath: string, algorithm: string, compressed?: boolean, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'derivationPath' is not null or undefined
            assertParamExists('getPublicKeyInfo', 'derivationPath', derivationPath)
            // verify required parameter 'algorithm' is not null or undefined
            assertParamExists('getPublicKeyInfo', 'algorithm', algorithm)
            const localVarPath = `/vault/public_key_info/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (derivationPath !== undefined) {
                localVarQueryParameter['derivationPath'] = derivationPath;
            }

            if (algorithm !== undefined) {
                localVarQueryParameter['algorithm'] = algorithm;
            }

            if (compressed !== undefined) {
                localVarQueryParameter['compressed'] = compressed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets the public key information for the vault account.
         * @summary Get the public key for a vault account
         * @param {string} vaultAccountId 
         * @param {string} assetId 
         * @param {number} change 
         * @param {number} addressIndex 
         * @param {boolean} [compressed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKeyInfoForAddress: async (vaultAccountId: string, assetId: string, change: number, addressIndex: number, compressed?: boolean, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('getPublicKeyInfoForAddress', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getPublicKeyInfoForAddress', 'assetId', assetId)
            // verify required parameter 'change' is not null or undefined
            assertParamExists('getPublicKeyInfoForAddress', 'change', change)
            // verify required parameter 'addressIndex' is not null or undefined
            assertParamExists('getPublicKeyInfoForAddress', 'addressIndex', addressIndex)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}/{change}/{addressIndex}/public_key_info`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)))
                .replace(`{${"change"}}`, encodeURIComponent(String(change)))
                .replace(`{${"addressIndex"}}`, encodeURIComponent(String(addressIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (compressed !== undefined) {
                localVarQueryParameter['compressed'] = compressed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns a wallet for a specific asset of a vault account.
         * @summary Get the asset balance for a vault account
         * @param {string} vaultAccountId The ID of the vault account to return
         * @param {string} assetId The ID of the asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultAccountAsset: async (vaultAccountId: string, assetId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('getVaultAccountAsset', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getVaultAccountAsset', 'assetId', assetId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Lists all addresses for specific asset of vault account.
         * @summary Get asset addresses
         * @param {string} vaultAccountId The ID of the vault account to return
         * @param {string} assetId The ID of the asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultAccountAssetAddresses: async (vaultAccountId: string, assetId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('getVaultAccountAssetAddresses', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getVaultAccountAssetAddresses', 'assetId', assetId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}/addresses`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns unspent inputs information of an asset in a vault account.
         * @summary Get UTXO unspent inputs information
         * @param {string} vaultAccountId The ID of the vault account
         * @param {string} assetId The ID of the asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultAccountAssetUnspentInputs: async (vaultAccountId: string, assetId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('getVaultAccountAssetUnspentInputs', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getVaultAccountAssetUnspentInputs', 'assetId', assetId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}/unspent_inputs`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns the requested vault account.
         * @summary Find a vault account by ID
         * @param {string} vaultAccountId The ID of the vault account to return type: string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultAccountById: async (vaultAccountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('getVaultAccountById', 'vaultAccountId', vaultAccountId)
            const localVarPath = `/vault/accounts/{vaultAccountId}`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets all vault accounts in your workspace.
         * @summary List vault accounts
         * @param {string} [namePrefix] 
         * @param {string} [nameSuffix] 
         * @param {number} [minAmountThreshold] 
         * @param {string} [assetId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultAccounts: async (namePrefix?: string, nameSuffix?: string, minAmountThreshold?: number, assetId?: string, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/vault/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (namePrefix !== undefined) {
                localVarQueryParameter['namePrefix'] = namePrefix;
            }

            if (nameSuffix !== undefined) {
                localVarQueryParameter['nameSuffix'] = nameSuffix;
            }

            if (minAmountThreshold !== undefined) {
                localVarQueryParameter['minAmountThreshold'] = minAmountThreshold;
            }

            if (assetId !== undefined) {
                localVarQueryParameter['assetId'] = assetId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets the vault balance summary for an asset.
         * @summary Get vault balance by asset
         * @param {string} assetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultAssetById: async (assetId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getVaultAssetById', 'assetId', assetId)
            const localVarPath = `/vault/assets/{assetId}`
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets the assets amount summary for all accounts or filtered accounts.
         * @summary Get asset balance for chosen assets
         * @param {string} [accountNamePrefix] 
         * @param {string} [accountNameSuffix] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVaultAssets: async (accountNamePrefix?: string, accountNameSuffix?: string, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/vault/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountNamePrefix !== undefined) {
                localVarQueryParameter['accountNamePrefix'] = accountNamePrefix;
            }

            if (accountNameSuffix !== undefined) {
                localVarQueryParameter['accountNameSuffix'] = accountNameSuffix;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Hides the requested vault account from the web console view.
         * @summary Hide a vault account in the console
         * @param {string} vaultAccountId The vault account to hide
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hideVaultAccount: async (vaultAccountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('hideVaultAccount', 'vaultAccountId', vaultAccountId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/hide`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Sets the autofueling property of the vault account to enabled or disabled.
         * @summary Turn autofueling on or off
         * @param {SetAutoFuelForVaultAccountRequest} setAutoFuelForVaultAccountRequest 
         * @param {string} vaultAccountId The vault account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAutoFuelForVaultAccount: async (setAutoFuelForVaultAccountRequest: SetAutoFuelForVaultAccountRequest, vaultAccountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'setAutoFuelForVaultAccountRequest' is not null or undefined
            assertParamExists('setAutoFuelForVaultAccount', 'setAutoFuelForVaultAccountRequest', setAutoFuelForVaultAccountRequest)
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('setAutoFuelForVaultAccount', 'vaultAccountId', vaultAccountId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/set_auto_fuel`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = setAutoFuelForVaultAccountRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Assigns an AML/KYT customer reference ID for the vault account.
         * @summary Set an AML/KYT customer reference ID for a vault account
         * @param {SetCustomerRefIdForVaultAccountRequest} setCustomerRefIdForVaultAccountRequest 
         * @param {string} vaultAccountId The vault account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomerRefIdForVaultAccount: async (setCustomerRefIdForVaultAccountRequest: SetCustomerRefIdForVaultAccountRequest, vaultAccountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'setCustomerRefIdForVaultAccountRequest' is not null or undefined
            assertParamExists('setCustomerRefIdForVaultAccount', 'setCustomerRefIdForVaultAccountRequest', setCustomerRefIdForVaultAccountRequest)
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('setCustomerRefIdForVaultAccount', 'vaultAccountId', vaultAccountId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/set_customer_ref_id`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = setCustomerRefIdForVaultAccountRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Sets an AML/KYT customer reference ID for a specific address.
         * @summary Assign AML customer reference ID
         * @param {SetCustomerRefIdForVaultAccountRequest} setCustomerRefIdForVaultAccountRequest 
         * @param {string} vaultAccountId The ID of the vault account
         * @param {string} assetId The ID of the asset
         * @param {string} addressId The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomerRefIdForVaultAccountAssetAddress: async (setCustomerRefIdForVaultAccountRequest: SetCustomerRefIdForVaultAccountRequest, vaultAccountId: string, assetId: string, addressId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'setCustomerRefIdForVaultAccountRequest' is not null or undefined
            assertParamExists('setCustomerRefIdForVaultAccountAssetAddress', 'setCustomerRefIdForVaultAccountRequest', setCustomerRefIdForVaultAccountRequest)
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('setCustomerRefIdForVaultAccountAssetAddress', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('setCustomerRefIdForVaultAccountAssetAddress', 'assetId', assetId)
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('setCustomerRefIdForVaultAccountAssetAddress', 'addressId', addressId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}/set_customer_ref_id`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)))
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = setCustomerRefIdForVaultAccountRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Makes a hidden vault account visible in web console view.
         * @summary Unhide a vault account in the console
         * @param {string} vaultAccountId The vault account to unhide
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unhideVaultAccount: async (vaultAccountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('unhideVaultAccount', 'vaultAccountId', vaultAccountId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/unhide`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Renames the requested vault account.
         * @summary Rename a vault account
         * @param {UpdateVaultAccountRequest} updateVaultAccountRequest 
         * @param {string} vaultAccountId The ID of the vault account to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVaultAccount: async (updateVaultAccountRequest: UpdateVaultAccountRequest, vaultAccountId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'updateVaultAccountRequest' is not null or undefined
            assertParamExists('updateVaultAccount', 'updateVaultAccountRequest', updateVaultAccountRequest)
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('updateVaultAccount', 'vaultAccountId', vaultAccountId)
            const localVarPath = `/vault/accounts/{vaultAccountId}`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PUT'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = updateVaultAccountRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Updates the description of an existing address of an asset in a vault account.
         * @summary Update address description
         * @param {string} vaultAccountId The ID of the vault account
         * @param {string} assetId The ID of the asset
         * @param {string} addressId The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
         * @param {UpdateVaultAccountAssetAddressRequest} [updateVaultAccountAssetAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVaultAccountAssetAddress: async (vaultAccountId: string, assetId: string, addressId: string, updateVaultAccountAssetAddressRequest?: UpdateVaultAccountAssetAddressRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('updateVaultAccountAssetAddress', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('updateVaultAccountAssetAddress', 'assetId', assetId)
            // verify required parameter 'addressId' is not null or undefined
            assertParamExists('updateVaultAccountAssetAddress', 'addressId', addressId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}/addresses/{addressId}`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)))
                .replace(`{${"addressId"}}`, encodeURIComponent(String(addressId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PUT'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = updateVaultAccountAssetAddressRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Updates the balance of a specific asset in a vault account.
         * @summary Refresh asset balance data
         * @param {string} vaultAccountId The ID of the vault account to return
         * @param {string} assetId The ID of the asset
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVaultAccountAssetBalance: async (vaultAccountId: string, assetId: string, body?: object, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'vaultAccountId' is not null or undefined
            assertParamExists('updateVaultAccountAssetBalance', 'vaultAccountId', vaultAccountId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('updateVaultAccountAssetBalance', 'assetId', assetId)
            const localVarPath = `/vault/accounts/{vaultAccountId}/{assetId}/balance`
                .replace(`{${"vaultAccountId"}}`, encodeURIComponent(String(vaultAccountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = body as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * VaultsApi - functional programming interface
 * @export
 */
export const VaultsApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = VaultsApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * Initiates activation for a wallet in a vault account.
         * @summary Activate a wallet in a vault account
         * @param {string} vaultAccountId The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
         * @param {string} assetId The ID of the asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async activateAssetForVaultAccount(vaultAccountId: string, assetId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVaultAssetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.activateAssetForVaultAccount(vaultAccountId, assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Converts an existing segwit address to the legacy format.
         * @summary Convert a segwit address to legacy format
         * @param {string} vaultAccountId The ID of the vault account
         * @param {string} assetId The ID of the asset
         * @param {string} addressId The segwit address to translate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLegacyAddressForVaultAccountAsset(vaultAccountId: string, assetId: string, addressId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLegacyAddressForVaultAccountAsset(vaultAccountId, assetId, addressId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Creates a new vault account with the requested name.
         * @summary Create a new vault account
         * @param {CreateVaultAccountRequest} createVaultAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVaultAccount(createVaultAccountRequest: CreateVaultAccountRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVaultAccount(createVaultAccountRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Creates a wallet for a specific asset in a vault account.
         * @summary Create a new wallet
         * @param {string} vaultAccountId The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
         * @param {string} assetId The ID of the asset
         * @param {CreateVaultAccountAssetRequest} [createVaultAccountAssetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVaultAccountAsset(vaultAccountId: string, assetId: string, createVaultAccountAssetRequest?: CreateVaultAccountAssetRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateVaultAssetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVaultAccountAsset(vaultAccountId, assetId, createVaultAccountAssetRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Creates a new deposit address for an asset of a vault account.
         * @summary Create new asset deposit address
         * @param {string} vaultAccountId The ID of the vault account to return
         * @param {string} assetId The ID of the asset
         * @param {CreateVaultAccountAssetAddressRequest} [createVaultAccountAssetAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVaultAccountAssetAddress(vaultAccountId: string, assetId: string, createVaultAccountAssetAddressRequest?: CreateVaultAccountAssetAddressRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createVaultAccountAssetAddress(vaultAccountId, assetId, createVaultAccountAssetAddressRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances. **Note:**   - This API endpoint is in limited availability and available for selected customers. If you would like to get early access to this endpoint, please reach out to [Fireblocks Support](https://support.fireblocks.io/hc/en-us/requests/new?ticket_form_id=36000337220)   - This API call is subject to [rate limits](https://developers.fireblocks.com/reference/rate-limiting). 
         * @summary List asset wallets (Paginated)
         * @param {number} [totalAmountLargerThan] When specified, only asset wallets with total balance larger than this amount are returned.
         * @param {string} [assetId] When specified, only asset wallets cross vault accounts that have this asset ID are returned.
         * @param {string} [before] Fetches the next paginated response before this element. This element is a cursor and is returned at the response of the previous page.
         * @param {string} [after] Fetches the next paginated response after this element. This element is a cursor and is returned at the response of the previous page.
         * @param {number} [limit] The maximum number of asset wallets in a single response. The default is 200 and the maximum is 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetWallets(totalAmountLargerThan?: number, assetId?: string, before?: string, after?: string, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAssetWalletResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetWallets(totalAmountLargerThan, assetId, before, after, limit, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Get the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount.
         * @summary Get the maximum spendable amount in a single transaction.
         * @param {string} vaultAccountId The ID of the vault account, or \&#39;default\&#39; for the default vault account
         * @param {string} assetId The ID of the asset
         * @param {boolean} [manualSignging] False by default. The maximum number of inputs depends if the transaction will be signed by an automated co-signer server or on a mobile device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMaxSpendableAmount(vaultAccountId: string, assetId: string, manualSignging?: boolean, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMaxSpendableAmount(vaultAccountId, assetId, manualSignging, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time.
         * @summary List vault acounts (Paginated)
         * @param {string} [namePrefix] 
         * @param {string} [nameSuffix] 
         * @param {number} [minAmountThreshold] 
         * @param {string} [assetId] 
         * @param {'ASC' | 'DESC'} [orderBy] 
         * @param {string} [before] 
         * @param {string} [after] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPagedVaultAccounts(namePrefix?: string, nameSuffix?: string, minAmountThreshold?: number, assetId?: string, orderBy?: 'ASC' | 'DESC', before?: string, after?: string, limit?: number, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAccountsPagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPagedVaultAccounts(namePrefix, nameSuffix, minAmountThreshold, assetId, orderBy, before, after, limit, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets the public key information based on derivation path and signing algorithm.
         * @summary Get the public key information
         * @param {string} derivationPath 
         * @param {string} algorithm 
         * @param {boolean} [compressed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicKeyInfo(derivationPath: string, algorithm: string, compressed?: boolean, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKeyInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicKeyInfo(derivationPath, algorithm, compressed, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets the public key information for the vault account.
         * @summary Get the public key for a vault account
         * @param {string} vaultAccountId 
         * @param {string} assetId 
         * @param {number} change 
         * @param {number} addressIndex 
         * @param {boolean} [compressed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicKeyInfoForAddress(vaultAccountId: string, assetId: string, change: number, addressIndex: number, compressed?: boolean, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKeyInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicKeyInfoForAddress(vaultAccountId, assetId, change, addressIndex, compressed, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns a wallet for a specific asset of a vault account.
         * @summary Get the asset balance for a vault account
         * @param {string} vaultAccountId The ID of the vault account to return
         * @param {string} assetId The ID of the asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultAccountAsset(vaultAccountId: string, assetId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultAccountAsset(vaultAccountId, assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Lists all addresses for specific asset of vault account.
         * @summary Get asset addresses
         * @param {string} vaultAccountId The ID of the vault account to return
         * @param {string} assetId The ID of the asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultAccountAssetAddresses(vaultAccountId: string, assetId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VaultWalletAddress>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultAccountAssetAddresses(vaultAccountId, assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns unspent inputs information of an asset in a vault account.
         * @summary Get UTXO unspent inputs information
         * @param {string} vaultAccountId The ID of the vault account
         * @param {string} assetId The ID of the asset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultAccountAssetUnspentInputs(vaultAccountId: string, assetId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UnspentInputsResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultAccountAssetUnspentInputs(vaultAccountId, assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns the requested vault account.
         * @summary Find a vault account by ID
         * @param {string} vaultAccountId The ID of the vault account to return type: string
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultAccountById(vaultAccountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultAccountById(vaultAccountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets all vault accounts in your workspace.
         * @summary List vault accounts
         * @param {string} [namePrefix] 
         * @param {string} [nameSuffix] 
         * @param {number} [minAmountThreshold] 
         * @param {string} [assetId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultAccounts(namePrefix?: string, nameSuffix?: string, minAmountThreshold?: number, assetId?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VaultAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultAccounts(namePrefix, nameSuffix, minAmountThreshold, assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets the vault balance summary for an asset.
         * @summary Get vault balance by asset
         * @param {string} assetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultAssetById(assetId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultAssetById(assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets the assets amount summary for all accounts or filtered accounts.
         * @summary Get asset balance for chosen assets
         * @param {string} [accountNamePrefix] 
         * @param {string} [accountNameSuffix] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVaultAssets(accountNamePrefix?: string, accountNameSuffix?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VaultAsset>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVaultAssets(accountNamePrefix, accountNameSuffix, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Hides the requested vault account from the web console view.
         * @summary Hide a vault account in the console
         * @param {string} vaultAccountId The vault account to hide
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hideVaultAccount(vaultAccountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.hideVaultAccount(vaultAccountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Sets the autofueling property of the vault account to enabled or disabled.
         * @summary Turn autofueling on or off
         * @param {SetAutoFuelForVaultAccountRequest} setAutoFuelForVaultAccountRequest 
         * @param {string} vaultAccountId The vault account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAutoFuelForVaultAccount(setAutoFuelForVaultAccountRequest: SetAutoFuelForVaultAccountRequest, vaultAccountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAutoFuelForVaultAccount(setAutoFuelForVaultAccountRequest, vaultAccountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Assigns an AML/KYT customer reference ID for the vault account.
         * @summary Set an AML/KYT customer reference ID for a vault account
         * @param {SetCustomerRefIdForVaultAccountRequest} setCustomerRefIdForVaultAccountRequest 
         * @param {string} vaultAccountId The vault account ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setCustomerRefIdForVaultAccount(setCustomerRefIdForVaultAccountRequest: SetCustomerRefIdForVaultAccountRequest, vaultAccountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setCustomerRefIdForVaultAccount(setCustomerRefIdForVaultAccountRequest, vaultAccountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Sets an AML/KYT customer reference ID for a specific address.
         * @summary Assign AML customer reference ID
         * @param {SetCustomerRefIdForVaultAccountRequest} setCustomerRefIdForVaultAccountRequest 
         * @param {string} vaultAccountId The ID of the vault account
         * @param {string} assetId The ID of the asset
         * @param {string} addressId The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setCustomerRefIdForVaultAccountAssetAddress(setCustomerRefIdForVaultAccountRequest: SetCustomerRefIdForVaultAccountRequest, vaultAccountId: string, assetId: string, addressId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setCustomerRefIdForVaultAccountAssetAddress(setCustomerRefIdForVaultAccountRequest, vaultAccountId, assetId, addressId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Makes a hidden vault account visible in web console view.
         * @summary Unhide a vault account in the console
         * @param {string} vaultAccountId The vault account to unhide
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unhideVaultAccount(vaultAccountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unhideVaultAccount(vaultAccountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Renames the requested vault account.
         * @summary Rename a vault account
         * @param {UpdateVaultAccountRequest} updateVaultAccountRequest 
         * @param {string} vaultAccountId The ID of the vault account to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVaultAccount(updateVaultAccountRequest: UpdateVaultAccountRequest, vaultAccountId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVaultAccount(updateVaultAccountRequest, vaultAccountId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Updates the description of an existing address of an asset in a vault account.
         * @summary Update address description
         * @param {string} vaultAccountId The ID of the vault account
         * @param {string} assetId The ID of the asset
         * @param {string} addressId The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
         * @param {UpdateVaultAccountAssetAddressRequest} [updateVaultAccountAssetAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVaultAccountAssetAddress(vaultAccountId: string, assetId: string, addressId: string, updateVaultAccountAssetAddressRequest?: UpdateVaultAccountAssetAddressRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVaultAccountAssetAddress(vaultAccountId, assetId, addressId, updateVaultAccountAssetAddressRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Updates the balance of a specific asset in a vault account.
         * @summary Refresh asset balance data
         * @param {string} vaultAccountId The ID of the vault account to return
         * @param {string} assetId The ID of the asset
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVaultAccountAssetBalance(vaultAccountId: string, assetId: string, body?: object, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VaultAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVaultAccountAssetBalance(vaultAccountId, assetId, body, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for activateAssetForVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiActivateAssetForVaultAccountRequest
 */
export interface VaultsApiActivateAssetForVaultAccountRequest {
    /**
     * The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
     * @type {string}
     * @memberof VaultsApiActivateAssetForVaultAccount
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiActivateAssetForVaultAccount
     */
    readonly assetId: string
}

/**
 * Request parameters for createLegacyAddressForVaultAccountAsset operation in VaultsApi.
 * @export
 * @interface VaultsApiCreateLegacyAddressForVaultAccountAssetRequest
 */
export interface VaultsApiCreateLegacyAddressForVaultAccountAssetRequest {
    /**
     * The ID of the vault account
     * @type {string}
     * @memberof VaultsApiCreateLegacyAddressForVaultAccountAsset
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiCreateLegacyAddressForVaultAccountAsset
     */
    readonly assetId: string

    /**
     * The segwit address to translate
     * @type {string}
     * @memberof VaultsApiCreateLegacyAddressForVaultAccountAsset
     */
    readonly addressId: string
}

/**
 * Request parameters for createVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiCreateVaultAccountRequest
 */
export interface VaultsApiCreateVaultAccountRequest {
    /**
     * 
     * @type {CreateVaultAccountRequest}
     * @memberof VaultsApiCreateVaultAccount
     */
    readonly createVaultAccountRequest: CreateVaultAccountRequest
}

/**
 * Request parameters for createVaultAccountAsset operation in VaultsApi.
 * @export
 * @interface VaultsApiCreateVaultAccountAssetRequest
 */
export interface VaultsApiCreateVaultAccountAssetRequest {
    /**
     * The ID of the vault account to return, or \&#39;default\&#39; for the default vault account
     * @type {string}
     * @memberof VaultsApiCreateVaultAccountAsset
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiCreateVaultAccountAsset
     */
    readonly assetId: string

    /**
     * 
     * @type {CreateVaultAccountAssetRequest}
     * @memberof VaultsApiCreateVaultAccountAsset
     */
    readonly createVaultAccountAssetRequest?: CreateVaultAccountAssetRequest
}

/**
 * Request parameters for createVaultAccountAssetAddress operation in VaultsApi.
 * @export
 * @interface VaultsApiCreateVaultAccountAssetAddressRequest
 */
export interface VaultsApiCreateVaultAccountAssetAddressRequest {
    /**
     * The ID of the vault account to return
     * @type {string}
     * @memberof VaultsApiCreateVaultAccountAssetAddress
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiCreateVaultAccountAssetAddress
     */
    readonly assetId: string

    /**
     * 
     * @type {CreateVaultAccountAssetAddressRequest}
     * @memberof VaultsApiCreateVaultAccountAssetAddress
     */
    readonly createVaultAccountAssetAddressRequest?: CreateVaultAccountAssetAddressRequest
}

/**
 * Request parameters for getAssetWallets operation in VaultsApi.
 * @export
 * @interface VaultsApiGetAssetWalletsRequest
 */
export interface VaultsApiGetAssetWalletsRequest {
    /**
     * When specified, only asset wallets with total balance larger than this amount are returned.
     * @type {number}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly totalAmountLargerThan?: number

    /**
     * When specified, only asset wallets cross vault accounts that have this asset ID are returned.
     * @type {string}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly assetId?: string

    /**
     * Fetches the next paginated response before this element. This element is a cursor and is returned at the response of the previous page.
     * @type {string}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly before?: string

    /**
     * Fetches the next paginated response after this element. This element is a cursor and is returned at the response of the previous page.
     * @type {string}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly after?: string

    /**
     * The maximum number of asset wallets in a single response. The default is 200 and the maximum is 1000.
     * @type {number}
     * @memberof VaultsApiGetAssetWallets
     */
    readonly limit?: number
}

/**
 * Request parameters for getMaxSpendableAmount operation in VaultsApi.
 * @export
 * @interface VaultsApiGetMaxSpendableAmountRequest
 */
export interface VaultsApiGetMaxSpendableAmountRequest {
    /**
     * The ID of the vault account, or \&#39;default\&#39; for the default vault account
     * @type {string}
     * @memberof VaultsApiGetMaxSpendableAmount
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiGetMaxSpendableAmount
     */
    readonly assetId: string

    /**
     * False by default. The maximum number of inputs depends if the transaction will be signed by an automated co-signer server or on a mobile device.
     * @type {boolean}
     * @memberof VaultsApiGetMaxSpendableAmount
     */
    readonly manualSignging?: boolean
}

/**
 * Request parameters for getPagedVaultAccounts operation in VaultsApi.
 * @export
 * @interface VaultsApiGetPagedVaultAccountsRequest
 */
export interface VaultsApiGetPagedVaultAccountsRequest {
    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly namePrefix?: string

    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly nameSuffix?: string

    /**
     * 
     * @type {number}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly minAmountThreshold?: number

    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly assetId?: string

    /**
     * 
     * @type {'ASC' | 'DESC'}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly orderBy?: 'ASC' | 'DESC'

    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly before?: string

    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly after?: string

    /**
     * 
     * @type {number}
     * @memberof VaultsApiGetPagedVaultAccounts
     */
    readonly limit?: number
}

/**
 * Request parameters for getPublicKeyInfo operation in VaultsApi.
 * @export
 * @interface VaultsApiGetPublicKeyInfoRequest
 */
export interface VaultsApiGetPublicKeyInfoRequest {
    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetPublicKeyInfo
     */
    readonly derivationPath: string

    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetPublicKeyInfo
     */
    readonly algorithm: string

    /**
     * 
     * @type {boolean}
     * @memberof VaultsApiGetPublicKeyInfo
     */
    readonly compressed?: boolean
}

/**
 * Request parameters for getPublicKeyInfoForAddress operation in VaultsApi.
 * @export
 * @interface VaultsApiGetPublicKeyInfoForAddressRequest
 */
export interface VaultsApiGetPublicKeyInfoForAddressRequest {
    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetPublicKeyInfoForAddress
     */
    readonly vaultAccountId: string

    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetPublicKeyInfoForAddress
     */
    readonly assetId: string

    /**
     * 
     * @type {number}
     * @memberof VaultsApiGetPublicKeyInfoForAddress
     */
    readonly change: number

    /**
     * 
     * @type {number}
     * @memberof VaultsApiGetPublicKeyInfoForAddress
     */
    readonly addressIndex: number

    /**
     * 
     * @type {boolean}
     * @memberof VaultsApiGetPublicKeyInfoForAddress
     */
    readonly compressed?: boolean
}

/**
 * Request parameters for getVaultAccountAsset operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAccountAssetRequest
 */
export interface VaultsApiGetVaultAccountAssetRequest {
    /**
     * The ID of the vault account to return
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAsset
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAsset
     */
    readonly assetId: string
}

/**
 * Request parameters for getVaultAccountAssetAddresses operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAccountAssetAddressesRequest
 */
export interface VaultsApiGetVaultAccountAssetAddressesRequest {
    /**
     * The ID of the vault account to return
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAssetAddresses
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAssetAddresses
     */
    readonly assetId: string
}

/**
 * Request parameters for getVaultAccountAssetUnspentInputs operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAccountAssetUnspentInputsRequest
 */
export interface VaultsApiGetVaultAccountAssetUnspentInputsRequest {
    /**
     * The ID of the vault account
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAssetUnspentInputs
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiGetVaultAccountAssetUnspentInputs
     */
    readonly assetId: string
}

/**
 * Request parameters for getVaultAccountById operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAccountByIdRequest
 */
export interface VaultsApiGetVaultAccountByIdRequest {
    /**
     * The ID of the vault account to return type: string
     * @type {string}
     * @memberof VaultsApiGetVaultAccountById
     */
    readonly vaultAccountId: string
}

/**
 * Request parameters for getVaultAccounts operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAccountsRequest
 */
export interface VaultsApiGetVaultAccountsRequest {
    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetVaultAccounts
     */
    readonly namePrefix?: string

    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetVaultAccounts
     */
    readonly nameSuffix?: string

    /**
     * 
     * @type {number}
     * @memberof VaultsApiGetVaultAccounts
     */
    readonly minAmountThreshold?: number

    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetVaultAccounts
     */
    readonly assetId?: string
}

/**
 * Request parameters for getVaultAssetById operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAssetByIdRequest
 */
export interface VaultsApiGetVaultAssetByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetVaultAssetById
     */
    readonly assetId: string
}

/**
 * Request parameters for getVaultAssets operation in VaultsApi.
 * @export
 * @interface VaultsApiGetVaultAssetsRequest
 */
export interface VaultsApiGetVaultAssetsRequest {
    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetVaultAssets
     */
    readonly accountNamePrefix?: string

    /**
     * 
     * @type {string}
     * @memberof VaultsApiGetVaultAssets
     */
    readonly accountNameSuffix?: string
}

/**
 * Request parameters for hideVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiHideVaultAccountRequest
 */
export interface VaultsApiHideVaultAccountRequest {
    /**
     * The vault account to hide
     * @type {string}
     * @memberof VaultsApiHideVaultAccount
     */
    readonly vaultAccountId: string
}

/**
 * Request parameters for setAutoFuelForVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiSetAutoFuelForVaultAccountRequest
 */
export interface VaultsApiSetAutoFuelForVaultAccountRequest {
    /**
     * 
     * @type {SetAutoFuelForVaultAccountRequest}
     * @memberof VaultsApiSetAutoFuelForVaultAccount
     */
    readonly setAutoFuelForVaultAccountRequest: SetAutoFuelForVaultAccountRequest

    /**
     * The vault account ID
     * @type {string}
     * @memberof VaultsApiSetAutoFuelForVaultAccount
     */
    readonly vaultAccountId: string
}

/**
 * Request parameters for setCustomerRefIdForVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiSetCustomerRefIdForVaultAccountRequest
 */
export interface VaultsApiSetCustomerRefIdForVaultAccountRequest {
    /**
     * 
     * @type {SetCustomerRefIdForVaultAccountRequest}
     * @memberof VaultsApiSetCustomerRefIdForVaultAccount
     */
    readonly setCustomerRefIdForVaultAccountRequest: SetCustomerRefIdForVaultAccountRequest

    /**
     * The vault account ID
     * @type {string}
     * @memberof VaultsApiSetCustomerRefIdForVaultAccount
     */
    readonly vaultAccountId: string
}

/**
 * Request parameters for setCustomerRefIdForVaultAccountAssetAddress operation in VaultsApi.
 * @export
 * @interface VaultsApiSetCustomerRefIdForVaultAccountAssetAddressRequest
 */
export interface VaultsApiSetCustomerRefIdForVaultAccountAssetAddressRequest {
    /**
     * 
     * @type {SetCustomerRefIdForVaultAccountRequest}
     * @memberof VaultsApiSetCustomerRefIdForVaultAccountAssetAddress
     */
    readonly setCustomerRefIdForVaultAccountRequest: SetCustomerRefIdForVaultAccountRequest

    /**
     * The ID of the vault account
     * @type {string}
     * @memberof VaultsApiSetCustomerRefIdForVaultAccountAssetAddress
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiSetCustomerRefIdForVaultAccountAssetAddress
     */
    readonly assetId: string

    /**
     * The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
     * @type {string}
     * @memberof VaultsApiSetCustomerRefIdForVaultAccountAssetAddress
     */
    readonly addressId: string
}

/**
 * Request parameters for unhideVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiUnhideVaultAccountRequest
 */
export interface VaultsApiUnhideVaultAccountRequest {
    /**
     * The vault account to unhide
     * @type {string}
     * @memberof VaultsApiUnhideVaultAccount
     */
    readonly vaultAccountId: string
}

/**
 * Request parameters for updateVaultAccount operation in VaultsApi.
 * @export
 * @interface VaultsApiUpdateVaultAccountRequest
 */
export interface VaultsApiUpdateVaultAccountRequest {
    /**
     * 
     * @type {UpdateVaultAccountRequest}
     * @memberof VaultsApiUpdateVaultAccount
     */
    readonly updateVaultAccountRequest: UpdateVaultAccountRequest

    /**
     * The ID of the vault account to edit
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccount
     */
    readonly vaultAccountId: string
}

/**
 * Request parameters for updateVaultAccountAssetAddress operation in VaultsApi.
 * @export
 * @interface VaultsApiUpdateVaultAccountAssetAddressRequest
 */
export interface VaultsApiUpdateVaultAccountAssetAddressRequest {
    /**
     * The ID of the vault account
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetAddress
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetAddress
     */
    readonly assetId: string

    /**
     * The address for which to add a description. For XRP, use &lt;address&gt;:&lt;tag&gt;, for all other assets, use only the address
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetAddress
     */
    readonly addressId: string

    /**
     * 
     * @type {UpdateVaultAccountAssetAddressRequest}
     * @memberof VaultsApiUpdateVaultAccountAssetAddress
     */
    readonly updateVaultAccountAssetAddressRequest?: UpdateVaultAccountAssetAddressRequest
}

/**
 * Request parameters for updateVaultAccountAssetBalance operation in VaultsApi.
 * @export
 * @interface VaultsApiUpdateVaultAccountAssetBalanceRequest
 */
export interface VaultsApiUpdateVaultAccountAssetBalanceRequest {
    /**
     * The ID of the vault account to return
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetBalance
     */
    readonly vaultAccountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof VaultsApiUpdateVaultAccountAssetBalance
     */
    readonly assetId: string

    /**
     * 
     * @type {object}
     * @memberof VaultsApiUpdateVaultAccountAssetBalance
     */
    readonly body?: object
}

/**
 * VaultsApi - object-oriented interface
 * @export
 * @class VaultsApi
 * @extends {BaseAPI}
 */
export class VaultsApi extends BaseAPI {
    /**
     * Initiates activation for a wallet in a vault account.
     * @summary Activate a wallet in a vault account
     * @param {VaultsApiActivateAssetForVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public activateAssetForVaultAccount(requestParameters: VaultsApiActivateAssetForVaultAccountRequest, ) {
        return VaultsApiFp(this.httpClient).activateAssetForVaultAccount(requestParameters.vaultAccountId, requestParameters.assetId, );
    }

    /**
     * Converts an existing segwit address to the legacy format.
     * @summary Convert a segwit address to legacy format
     * @param {VaultsApiCreateLegacyAddressForVaultAccountAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public createLegacyAddressForVaultAccountAsset(requestParameters: VaultsApiCreateLegacyAddressForVaultAccountAssetRequest, ) {
        return VaultsApiFp(this.httpClient).createLegacyAddressForVaultAccountAsset(requestParameters.vaultAccountId, requestParameters.assetId, requestParameters.addressId, );
    }

    /**
     * Creates a new vault account with the requested name.
     * @summary Create a new vault account
     * @param {VaultsApiCreateVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public createVaultAccount(requestParameters: VaultsApiCreateVaultAccountRequest, ) {
        return VaultsApiFp(this.httpClient).createVaultAccount(requestParameters.createVaultAccountRequest, );
    }

    /**
     * Creates a wallet for a specific asset in a vault account.
     * @summary Create a new wallet
     * @param {VaultsApiCreateVaultAccountAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public createVaultAccountAsset(requestParameters: VaultsApiCreateVaultAccountAssetRequest, ) {
        return VaultsApiFp(this.httpClient).createVaultAccountAsset(requestParameters.vaultAccountId, requestParameters.assetId, requestParameters.createVaultAccountAssetRequest, );
    }

    /**
     * Creates a new deposit address for an asset of a vault account.
     * @summary Create new asset deposit address
     * @param {VaultsApiCreateVaultAccountAssetAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public createVaultAccountAssetAddress(requestParameters: VaultsApiCreateVaultAccountAssetAddressRequest, ) {
        return VaultsApiFp(this.httpClient).createVaultAccountAssetAddress(requestParameters.vaultAccountId, requestParameters.assetId, requestParameters.createVaultAccountAssetAddressRequest, );
    }

    /**
     * Gets all asset wallets at all of the vault accounts in your workspace. An asset wallet is an asset at a vault account. This method allows fast traversal of all account balances. **Note:**   - This API endpoint is in limited availability and available for selected customers. If you would like to get early access to this endpoint, please reach out to [Fireblocks Support](https://support.fireblocks.io/hc/en-us/requests/new?ticket_form_id=36000337220)   - This API call is subject to [rate limits](https://developers.fireblocks.com/reference/rate-limiting). 
     * @summary List asset wallets (Paginated)
     * @param {VaultsApiGetAssetWalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getAssetWallets(requestParameters: VaultsApiGetAssetWalletsRequest = {}, ) {
        return VaultsApiFp(this.httpClient).getAssetWallets(requestParameters.totalAmountLargerThan, requestParameters.assetId, requestParameters.before, requestParameters.after, requestParameters.limit, );
    }

    /**
     * Get the maximum amount of a particular asset that can be spent in a single transaction from a specified vault account (UTXO assets only, with a limitation on number of inputs embedded). Send several transactions if you want to spend more than the maximum spendable amount.
     * @summary Get the maximum spendable amount in a single transaction.
     * @param {VaultsApiGetMaxSpendableAmountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getMaxSpendableAmount(requestParameters: VaultsApiGetMaxSpendableAmountRequest, ) {
        return VaultsApiFp(this.httpClient).getMaxSpendableAmount(requestParameters.vaultAccountId, requestParameters.assetId, requestParameters.manualSignging, );
    }

    /**
     * Gets all vault accounts in your workspace. This endpoint returns a limited amount of results with a quick response time.
     * @summary List vault acounts (Paginated)
     * @param {VaultsApiGetPagedVaultAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getPagedVaultAccounts(requestParameters: VaultsApiGetPagedVaultAccountsRequest = {}, ) {
        return VaultsApiFp(this.httpClient).getPagedVaultAccounts(requestParameters.namePrefix, requestParameters.nameSuffix, requestParameters.minAmountThreshold, requestParameters.assetId, requestParameters.orderBy, requestParameters.before, requestParameters.after, requestParameters.limit, );
    }

    /**
     * Gets the public key information based on derivation path and signing algorithm.
     * @summary Get the public key information
     * @param {VaultsApiGetPublicKeyInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getPublicKeyInfo(requestParameters: VaultsApiGetPublicKeyInfoRequest, ) {
        return VaultsApiFp(this.httpClient).getPublicKeyInfo(requestParameters.derivationPath, requestParameters.algorithm, requestParameters.compressed, );
    }

    /**
     * Gets the public key information for the vault account.
     * @summary Get the public key for a vault account
     * @param {VaultsApiGetPublicKeyInfoForAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getPublicKeyInfoForAddress(requestParameters: VaultsApiGetPublicKeyInfoForAddressRequest, ) {
        return VaultsApiFp(this.httpClient).getPublicKeyInfoForAddress(requestParameters.vaultAccountId, requestParameters.assetId, requestParameters.change, requestParameters.addressIndex, requestParameters.compressed, );
    }

    /**
     * Returns a wallet for a specific asset of a vault account.
     * @summary Get the asset balance for a vault account
     * @param {VaultsApiGetVaultAccountAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getVaultAccountAsset(requestParameters: VaultsApiGetVaultAccountAssetRequest, ) {
        return VaultsApiFp(this.httpClient).getVaultAccountAsset(requestParameters.vaultAccountId, requestParameters.assetId, );
    }

    /**
     * Lists all addresses for specific asset of vault account.
     * @summary Get asset addresses
     * @param {VaultsApiGetVaultAccountAssetAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getVaultAccountAssetAddresses(requestParameters: VaultsApiGetVaultAccountAssetAddressesRequest, ) {
        return VaultsApiFp(this.httpClient).getVaultAccountAssetAddresses(requestParameters.vaultAccountId, requestParameters.assetId, );
    }

    /**
     * Returns unspent inputs information of an asset in a vault account.
     * @summary Get UTXO unspent inputs information
     * @param {VaultsApiGetVaultAccountAssetUnspentInputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getVaultAccountAssetUnspentInputs(requestParameters: VaultsApiGetVaultAccountAssetUnspentInputsRequest, ) {
        return VaultsApiFp(this.httpClient).getVaultAccountAssetUnspentInputs(requestParameters.vaultAccountId, requestParameters.assetId, );
    }

    /**
     * Returns the requested vault account.
     * @summary Find a vault account by ID
     * @param {VaultsApiGetVaultAccountByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getVaultAccountById(requestParameters: VaultsApiGetVaultAccountByIdRequest, ) {
        return VaultsApiFp(this.httpClient).getVaultAccountById(requestParameters.vaultAccountId, );
    }

    /**
     * Gets all vault accounts in your workspace.
     * @summary List vault accounts
     * @param {VaultsApiGetVaultAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getVaultAccounts(requestParameters: VaultsApiGetVaultAccountsRequest = {}, ) {
        return VaultsApiFp(this.httpClient).getVaultAccounts(requestParameters.namePrefix, requestParameters.nameSuffix, requestParameters.minAmountThreshold, requestParameters.assetId, );
    }

    /**
     * Gets the vault balance summary for an asset.
     * @summary Get vault balance by asset
     * @param {VaultsApiGetVaultAssetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getVaultAssetById(requestParameters: VaultsApiGetVaultAssetByIdRequest, ) {
        return VaultsApiFp(this.httpClient).getVaultAssetById(requestParameters.assetId, );
    }

    /**
     * Gets the assets amount summary for all accounts or filtered accounts.
     * @summary Get asset balance for chosen assets
     * @param {VaultsApiGetVaultAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public getVaultAssets(requestParameters: VaultsApiGetVaultAssetsRequest = {}, ) {
        return VaultsApiFp(this.httpClient).getVaultAssets(requestParameters.accountNamePrefix, requestParameters.accountNameSuffix, );
    }

    /**
     * Hides the requested vault account from the web console view.
     * @summary Hide a vault account in the console
     * @param {VaultsApiHideVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public hideVaultAccount(requestParameters: VaultsApiHideVaultAccountRequest, ) {
        return VaultsApiFp(this.httpClient).hideVaultAccount(requestParameters.vaultAccountId, );
    }

    /**
     * Sets the autofueling property of the vault account to enabled or disabled.
     * @summary Turn autofueling on or off
     * @param {VaultsApiSetAutoFuelForVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public setAutoFuelForVaultAccount(requestParameters: VaultsApiSetAutoFuelForVaultAccountRequest, ) {
        return VaultsApiFp(this.httpClient).setAutoFuelForVaultAccount(requestParameters.setAutoFuelForVaultAccountRequest, requestParameters.vaultAccountId, );
    }

    /**
     * Assigns an AML/KYT customer reference ID for the vault account.
     * @summary Set an AML/KYT customer reference ID for a vault account
     * @param {VaultsApiSetCustomerRefIdForVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public setCustomerRefIdForVaultAccount(requestParameters: VaultsApiSetCustomerRefIdForVaultAccountRequest, ) {
        return VaultsApiFp(this.httpClient).setCustomerRefIdForVaultAccount(requestParameters.setCustomerRefIdForVaultAccountRequest, requestParameters.vaultAccountId, );
    }

    /**
     * Sets an AML/KYT customer reference ID for a specific address.
     * @summary Assign AML customer reference ID
     * @param {VaultsApiSetCustomerRefIdForVaultAccountAssetAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public setCustomerRefIdForVaultAccountAssetAddress(requestParameters: VaultsApiSetCustomerRefIdForVaultAccountAssetAddressRequest, ) {
        return VaultsApiFp(this.httpClient).setCustomerRefIdForVaultAccountAssetAddress(requestParameters.setCustomerRefIdForVaultAccountRequest, requestParameters.vaultAccountId, requestParameters.assetId, requestParameters.addressId, );
    }

    /**
     * Makes a hidden vault account visible in web console view.
     * @summary Unhide a vault account in the console
     * @param {VaultsApiUnhideVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public unhideVaultAccount(requestParameters: VaultsApiUnhideVaultAccountRequest, ) {
        return VaultsApiFp(this.httpClient).unhideVaultAccount(requestParameters.vaultAccountId, );
    }

    /**
     * Renames the requested vault account.
     * @summary Rename a vault account
     * @param {VaultsApiUpdateVaultAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public updateVaultAccount(requestParameters: VaultsApiUpdateVaultAccountRequest, ) {
        return VaultsApiFp(this.httpClient).updateVaultAccount(requestParameters.updateVaultAccountRequest, requestParameters.vaultAccountId, );
    }

    /**
     * Updates the description of an existing address of an asset in a vault account.
     * @summary Update address description
     * @param {VaultsApiUpdateVaultAccountAssetAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public updateVaultAccountAssetAddress(requestParameters: VaultsApiUpdateVaultAccountAssetAddressRequest, ) {
        return VaultsApiFp(this.httpClient).updateVaultAccountAssetAddress(requestParameters.vaultAccountId, requestParameters.assetId, requestParameters.addressId, requestParameters.updateVaultAccountAssetAddressRequest, );
    }

    /**
     * Updates the balance of a specific asset in a vault account.
     * @summary Refresh asset balance data
     * @param {VaultsApiUpdateVaultAccountAssetBalanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VaultsApi
     */
    public updateVaultAccountAssetBalance(requestParameters: VaultsApiUpdateVaultAccountAssetBalanceRequest, ) {
        return VaultsApiFp(this.httpClient).updateVaultAccountAssetBalance(requestParameters.vaultAccountId, requestParameters.assetId, requestParameters.body, );
    }
}
