/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ErrorSchema } from '../models';
/**
 * WorkspaceApi - axios parameter creator
 * @export
 */
export const WorkspaceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Freezes a Workspace so that ALL operations by ANY user are blocked.  You should only perform this action when the workspace faces imminent risk, such as when you have a security breach.  To unfreeze a workspace, the workspace Owner must submit a request to Fireblocks Support.  **NOTE:**  - This operation can only be performed by the workspace Owner - Your workspace continues to receive incoming transfers during this time. 
         * @summary Freeze Workspace
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freezeWorkspace: async (idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/workspace/freeze`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceApi - functional programming interface
 * @export
 */
export const WorkspaceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkspaceApiAxiosParamCreator(configuration)
    return {
        /**
         * Freezes a Workspace so that ALL operations by ANY user are blocked.  You should only perform this action when the workspace faces imminent risk, such as when you have a security breach.  To unfreeze a workspace, the workspace Owner must submit a request to Fireblocks Support.  **NOTE:**  - This operation can only be performed by the workspace Owner - Your workspace continues to receive incoming transfers during this time. 
         * @summary Freeze Workspace
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async freezeWorkspace(idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.freezeWorkspace(idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['WorkspaceApi.freezeWorkspace']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * WorkspaceApi - factory interface
 * @export
 */
export const WorkspaceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkspaceApiFp(configuration)
    return {
        /**
         * Freezes a Workspace so that ALL operations by ANY user are blocked.  You should only perform this action when the workspace faces imminent risk, such as when you have a security breach.  To unfreeze a workspace, the workspace Owner must submit a request to Fireblocks Support.  **NOTE:**  - This operation can only be performed by the workspace Owner - Your workspace continues to receive incoming transfers during this time. 
         * @summary Freeze Workspace
         * @param {WorkspaceApiFreezeWorkspaceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        freezeWorkspace(requestParameters: WorkspaceApiFreezeWorkspaceRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.freezeWorkspace(requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for freezeWorkspace operation in WorkspaceApi.
 * @export
 * @interface WorkspaceApiFreezeWorkspaceRequest
 */
export interface WorkspaceApiFreezeWorkspaceRequest {
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof WorkspaceApiFreezeWorkspace
     */
    readonly idempotencyKey?: string
}

/**
 * WorkspaceApi - object-oriented interface
 * @export
 * @class WorkspaceApi
 * @extends {BaseAPI}
 */
export class WorkspaceApi extends BaseAPI {
    /**
     * Freezes a Workspace so that ALL operations by ANY user are blocked.  You should only perform this action when the workspace faces imminent risk, such as when you have a security breach.  To unfreeze a workspace, the workspace Owner must submit a request to Fireblocks Support.  **NOTE:**  - This operation can only be performed by the workspace Owner - Your workspace continues to receive incoming transfers during this time. 
     * @summary Freeze Workspace
     * @param {WorkspaceApiFreezeWorkspaceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceApi
     */
    public freezeWorkspace(requestParameters: WorkspaceApiFreezeWorkspaceRequest = {}) {
        return WorkspaceApiFp(this.configuration).freezeWorkspace(requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

