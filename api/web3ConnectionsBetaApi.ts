/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { ConnectionsSessionIdPutRequest } from '../model/connectionsSessionIdPutRequest';
    import { CreateConnectionRequest } from '../model/createConnectionRequest';
    import { CreateConnectionResponse } from '../model/createConnectionResponse';
    import { SessionDTO } from '../model/sessionDTO';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class Web3ConnectionsBetaApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Get all the connections of the user  **Note**: This endpoint is now in Beta and is not generally available.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manage or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com) 
                * @summary Get all connections
            */
        public async connectionsGet () : Promise<Array<SessionDTO>> {
                const path = this.configuration.basePath + '/connections';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<SessionDTO>>(requestOptions);
        }
            /**
            *  Initiate a new signer connection (Payload varies by type of connection)  **Note**: This endpoint is now in Beta and is not generally available.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manage or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com) 
                * @summary Create new connection
                * @param createConnectionRequest 
            */
        public async connectionsPost (createConnectionRequest: CreateConnectionRequest, ) : Promise<CreateConnectionResponse> {
                const path = this.configuration.basePath + '/connections';
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'createConnectionRequest' is not null or undefined
                        if (createConnectionRequest === null || createConnectionRequest === undefined) {
                        throw new Error('Required parameter createConnectionRequest was null or undefined when calling connectionsPost.');
                        }


                    if (typeof createConnectionRequest === 'object') {
                        for( const [key,value] of Object.entries(createConnectionRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['CreateConnectionRequest'] = ObjectSerializer.serialize(createConnectionRequest, "CreateConnectionRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<CreateConnectionResponse>(requestOptions);
        }
            /**
            * Remove an existing connection  **Note**: This endpoint is now in Beta and is not generally available.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manage or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com) 
                * @summary Remove a connection
                * @param sessionId The id of the connection
            */
        public async connectionsSessionIdDelete (sessionId: string, ) : Promise<any> {
                const path = this.configuration.basePath + '/connections/{sessionId}'
                .replace('{' + 'sessionId' + '}', encodeURIComponent(String(sessionId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'sessionId' is not null or undefined
                        if (sessionId === null || sessionId === undefined) {
                        throw new Error('Required parameter sessionId was null or undefined when calling connectionsSessionIdDelete.');
                        }


                    if (typeof sessionId === 'object') {
                        for( const [key,value] of Object.entries(sessionId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['sessionId'] = ObjectSerializer.serialize(sessionId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            *  Approve or reject a pending connection (after you have initiated a session by calling /create)  **Note**: This endpoint is now in Beta and is not generally available.  To enroll in beta & enable this endpoint, contact your Fireblocks Customer Success Manage or reach out to [CSM@fireblocks.com](mailto:CSM@fireblocks.com) 
                * @summary Respond to pending connection
                * @param sessionId The id of the connection
                * @param connectionsSessionIdPutRequest 
            */
        public async connectionsSessionIdPut (sessionId: string, connectionsSessionIdPutRequest: ConnectionsSessionIdPutRequest, ) : Promise<any> {
                const path = this.configuration.basePath + '/connections/{sessionId}'
                .replace('{' + 'sessionId' + '}', encodeURIComponent(String(sessionId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'sessionId' is not null or undefined
                        if (sessionId === null || sessionId === undefined) {
                        throw new Error('Required parameter sessionId was null or undefined when calling connectionsSessionIdPut.');
                        }


                    if (typeof sessionId === 'object') {
                        for( const [key,value] of Object.entries(sessionId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['sessionId'] = ObjectSerializer.serialize(sessionId, "string");
                    }
                        // verify required parameter 'connectionsSessionIdPutRequest' is not null or undefined
                        if (connectionsSessionIdPutRequest === null || connectionsSessionIdPutRequest === undefined) {
                        throw new Error('Required parameter connectionsSessionIdPutRequest was null or undefined when calling connectionsSessionIdPut.');
                        }


                    if (typeof connectionsSessionIdPutRequest === 'object') {
                        for( const [key,value] of Object.entries(connectionsSessionIdPutRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['ConnectionsSessionIdPutRequest'] = ObjectSerializer.serialize(connectionsSessionIdPutRequest, "ConnectionsSessionIdPutRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PUT',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
        }
