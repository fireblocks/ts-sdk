/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { TravelRuleGetAllVASPsResponse } from '../model/travelRuleGetAllVASPsResponse';
    import { TravelRuleUpdateVASPDetails } from '../model/travelRuleUpdateVASPDetails';
    import { TravelRuleVASP } from '../model/travelRuleVASP';
    import { TravelRuleValidateFullTransactionRequest } from '../model/travelRuleValidateFullTransactionRequest';
    import { TravelRuleValidateTransactionRequest } from '../model/travelRuleValidateTransactionRequest';
    import { TravelRuleValidateTransactionResponse } from '../model/travelRuleValidateTransactionResponse';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class TravelRuleBetaApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Get VASP Details.  Returns information about a VASP that has the specified DID.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
                * @summary Get VASP details
                * @param did 
                * @param fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
            */
        public async getVASPByDID (did: string, fields?: string, ) : Promise<TravelRuleVASP> {
                const path = this.configuration.basePath + '/screening/travel_rule/vasp/{did}'
                .replace('{' + 'did' + '}', encodeURIComponent(String(did)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'did' is not null or undefined
                        if (did === null || did === undefined) {
                        throw new Error('Required parameter did was null or undefined when calling getVASPByDID.');
                        }


                    if (typeof did === 'object') {
                        for( const [key,value] of Object.entries(did)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['did'] = ObjectSerializer.serialize(did, "string");
                    }

                    if (typeof fields === 'object') {
                        for( const [key,value] of Object.entries(fields)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['fields'] = ObjectSerializer.serialize(fields, "string");
                    }
                    if (fields !== undefined) {
                        params['fields'] = ObjectSerializer.serialize(fields, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<TravelRuleVASP>(requestOptions);
        }
            /**
            * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted and results are paginated.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
                * @summary Get All VASPs
                * @param order Field to order by
                * @param perPage Records per page
                * @param page Page number
                * @param fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
            */
        public async getVASPs (order?: string, perPage?: number, page?: number, fields?: string, ) : Promise<TravelRuleGetAllVASPsResponse> {
                const path = this.configuration.basePath + '/screening/travel_rule/vasp';
                let params: any = {};
                let headers: any = {}

                    if (typeof order === 'object') {
                        for( const [key,value] of Object.entries(order)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['order'] = ObjectSerializer.serialize(order, "string");
                    }

                    if (typeof perPage === 'object') {
                        for( const [key,value] of Object.entries(perPage)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['per_page'] = ObjectSerializer.serialize(perPage, "number");
                    }

                    if (typeof page === 'object') {
                        for( const [key,value] of Object.entries(page)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['page'] = ObjectSerializer.serialize(page, "number");
                    }

                    if (typeof fields === 'object') {
                        for( const [key,value] of Object.entries(fields)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['fields'] = ObjectSerializer.serialize(fields, "string");
                    }
                    if (order !== undefined) {
                        params['order'] = ObjectSerializer.serialize(order, "string");
                    }
                    if (perPage !== undefined) {
                        params['per_page'] = ObjectSerializer.serialize(perPage, "number");
                    }
                    if (page !== undefined) {
                        params['page'] = ObjectSerializer.serialize(page, "number");
                    }
                    if (fields !== undefined) {
                        params['fields'] = ObjectSerializer.serialize(fields, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<TravelRuleGetAllVASPsResponse>(requestOptions);
        }
            /**
            * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
                * @summary Add jsonDidKey to VASP details
                * @param travelRuleUpdateVASPDetails 
            */
        public async travelRuleApiControllerUpdateVasp (travelRuleUpdateVASPDetails: TravelRuleUpdateVASPDetails, ) : Promise<TravelRuleUpdateVASPDetails> {
                const path = this.configuration.basePath + '/screeening/travel_rule/vasp/update';
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'travelRuleUpdateVASPDetails' is not null or undefined
                        if (travelRuleUpdateVASPDetails === null || travelRuleUpdateVASPDetails === undefined) {
                        throw new Error('Required parameter travelRuleUpdateVASPDetails was null or undefined when calling travelRuleApiControllerUpdateVasp.');
                        }


                    if (typeof travelRuleUpdateVASPDetails === 'object') {
                        for( const [key,value] of Object.entries(travelRuleUpdateVASPDetails)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['TravelRuleUpdateVASPDetails'] = ObjectSerializer.serialize(travelRuleUpdateVASPDetails, "TravelRuleUpdateVASPDetails");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PUT',
                    url: path,
                        data: params
                };
                return this.httpClient.request<TravelRuleUpdateVASPDetails>(requestOptions);
        }
            /**
            * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
                * @summary Validate Full Travel Rule Transaction
                * @param travelRuleValidateFullTransactionRequest 
            */
        public async validateFullTravelRuleTransaction (travelRuleValidateFullTransactionRequest: TravelRuleValidateFullTransactionRequest, ) : Promise<TravelRuleValidateTransactionResponse> {
                const path = this.configuration.basePath + '/screening/travel_rule/transaction/validate/full';
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'travelRuleValidateFullTransactionRequest' is not null or undefined
                        if (travelRuleValidateFullTransactionRequest === null || travelRuleValidateFullTransactionRequest === undefined) {
                        throw new Error('Required parameter travelRuleValidateFullTransactionRequest was null or undefined when calling validateFullTravelRuleTransaction.');
                        }


                    if (typeof travelRuleValidateFullTransactionRequest === 'object') {
                        for( const [key,value] of Object.entries(travelRuleValidateFullTransactionRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['TravelRuleValidateFullTransactionRequest'] = ObjectSerializer.serialize(travelRuleValidateFullTransactionRequest, "TravelRuleValidateFullTransactionRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<TravelRuleValidateTransactionResponse>(requestOptions);
        }
            /**
            * Validate Travel Rule transactions.  Checks what beneficiary VASP details are required by your jurisdiction and the beneficiary\'s jurisdiction.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
                * @summary Validate Travel Rule Transaction
                * @param travelRuleValidateTransactionRequest 
            */
        public async validateTravelRuleTransaction (travelRuleValidateTransactionRequest: TravelRuleValidateTransactionRequest, ) : Promise<TravelRuleValidateTransactionResponse> {
                const path = this.configuration.basePath + '/screening/travel_rule/transaction/validate';
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'travelRuleValidateTransactionRequest' is not null or undefined
                        if (travelRuleValidateTransactionRequest === null || travelRuleValidateTransactionRequest === undefined) {
                        throw new Error('Required parameter travelRuleValidateTransactionRequest was null or undefined when calling validateTravelRuleTransaction.');
                        }


                    if (typeof travelRuleValidateTransactionRequest === 'object') {
                        for( const [key,value] of Object.entries(travelRuleValidateTransactionRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['TravelRuleValidateTransactionRequest'] = ObjectSerializer.serialize(travelRuleValidateTransactionRequest, "TravelRuleValidateTransactionRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<TravelRuleValidateTransactionResponse>(requestOptions);
        }
        }
