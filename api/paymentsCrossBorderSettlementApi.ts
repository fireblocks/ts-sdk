/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { ErrorResponse } from '../model/errorResponse';
    import { XBSettlementConfigCreationRequestBody } from '../model/xBSettlementConfigCreationRequestBody';
    import { XBSettlementConfigEditRequestBody } from '../model/xBSettlementConfigEditRequestBody';
    import { XBSettlementConfigModel } from '../model/xBSettlementConfigModel';
    import { XBSettlementCreateFlowRequestBody } from '../model/xBSettlementCreateFlowRequestBody';
    import { XBSettlementFlowExecutionModel } from '../model/xBSettlementFlowExecutionModel';
    import { XBSettlementFlowExecutionRequestBody } from '../model/xBSettlementFlowExecutionRequestBody';
    import { XBSettlementFlowPreviewModel } from '../model/xBSettlementFlowPreviewModel';
    import { XBSettlementGetAllConfigsResponse } from '../model/xBSettlementGetAllConfigsResponse';
    import { XBSettlementGetFlowResponse } from '../model/xBSettlementGetFlowResponse';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class PaymentsCrossBorderSettlementApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * <u><b>Create a new cross-border settlement configuration. </u></b></br>Configurations define the default assets, on-ramps, and off-ramps to use for the cross-border settlement. </br>  A configuration must contain at least two steps - `ON_RAMP` and `VAULT_ACCOUNT`. </br> All other steps (e.g., `OFF_RAMP`, `FIAT_DESTINATION`, etc.) are optional. </br> Every step must include the `accountId` to be used, while `inputAssetId` and `outputAssetId` are optional.  If those are not provided, a default value will be used from the Corridor Settings.</br> If the inputAssetId or the outputAssetId is provided for one of the objects, all assets in the objects must be consistent. For example, if the output asset of ON_RAMP is XLM_USDC_5F3T, then the input asset of the VAULT_ACCOUNT must also be XLM_USDC_5F3T..</br> You can set a slippage amount for your configuration. Slippage is defined by basis points (bps). This value can be overloaded on execution. If you do not configure a slippage amount, the default slippage of 10000 bps (10%) is used. </br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
                * @summary Create a new cross-border settlement configuration
                * @param xBSettlementConfigCreationRequestBody 
            */
        public async createXBSettlementConfig (xBSettlementConfigCreationRequestBody?: XBSettlementConfigCreationRequestBody, ) : Promise<XBSettlementConfigModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/configs';
                let params: any = {};
                let headers: any = {}

                    if (typeof xBSettlementConfigCreationRequestBody === 'object') {
                        for( const [key,value] of Object.entries(xBSettlementConfigCreationRequestBody)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['XBSettlementConfigCreationRequestBody'] = ObjectSerializer.serialize(xBSettlementConfigCreationRequestBody, "XBSettlementConfigCreationRequestBody");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<XBSettlementConfigModel>(requestOptions);
        }
            /**
            * Create a cross-border flow (based on a cross-border configuration) with an amount to transfer.  The assetId is defined by the cross-border configuration. Creating a flow triggers a calculation of the flow estimations, including FX rates, times, and fees based on the amount provided. Creating a cross-border flow will not execute the flow.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
                * @summary Create a new cross-border settlement flow
                * @param xBSettlementCreateFlowRequestBody 
            */
        public async createXBSettlementFlow (xBSettlementCreateFlowRequestBody?: XBSettlementCreateFlowRequestBody, ) : Promise<XBSettlementFlowPreviewModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/flows';
                let params: any = {};
                let headers: any = {}

                    if (typeof xBSettlementCreateFlowRequestBody === 'object') {
                        for( const [key,value] of Object.entries(xBSettlementCreateFlowRequestBody)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['XBSettlementCreateFlowRequestBody'] = ObjectSerializer.serialize(xBSettlementCreateFlowRequestBody, "XBSettlementCreateFlowRequestBody");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<XBSettlementFlowPreviewModel>(requestOptions);
        }
            /**
            * Delete a cross-border settlement configuration. This does not delete or remove previously executed flows that used this configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
                * @summary Delete a cross-border settlement configuration
                * @param configId The cross-border settlement configuration ID.
            */
        public async deleteXBSettlementConfig (configId: string, ) : Promise<XBSettlementConfigModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/configs/{configId}'
                .replace('{' + 'configId' + '}', encodeURIComponent(String(configId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'configId' is not null or undefined
                        if (configId === null || configId === undefined) {
                        throw new Error('Required parameter configId was null or undefined when calling deleteXBSettlementConfig.');
                        }


                    if (typeof configId === 'object') {
                        for( const [key,value] of Object.entries(configId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['configId'] = ObjectSerializer.serialize(configId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<XBSettlementConfigModel>(requestOptions);
        }
            /**
            * Send a payment flow with \'flowId\' for execution. If a differet slippage configuraion is needed for this execution than configured in the flow configuration, the request body must define the desired slippage configuration for this execution.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
                * @summary Execute cross-border settlement flow
                * @param flowId The cross-border settlement flow ID.
                * @param xBSettlementFlowExecutionRequestBody 
            */
        public async executeXBSettlementFlowAction (flowId: string, xBSettlementFlowExecutionRequestBody?: XBSettlementFlowExecutionRequestBody, ) : Promise<XBSettlementFlowExecutionModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/flows/{flowId}/actions/execute'
                .replace('{' + 'flowId' + '}', encodeURIComponent(String(flowId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'flowId' is not null or undefined
                        if (flowId === null || flowId === undefined) {
                        throw new Error('Required parameter flowId was null or undefined when calling executeXBSettlementFlowAction.');
                        }


                    if (typeof flowId === 'object') {
                        for( const [key,value] of Object.entries(flowId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['flowId'] = ObjectSerializer.serialize(flowId, "string");
                    }

                    if (typeof xBSettlementFlowExecutionRequestBody === 'object') {
                        for( const [key,value] of Object.entries(xBSettlementFlowExecutionRequestBody)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['XBSettlementFlowExecutionRequestBody'] = ObjectSerializer.serialize(xBSettlementFlowExecutionRequestBody, "XBSettlementFlowExecutionRequestBody");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<XBSettlementFlowExecutionModel>(requestOptions);
        }
            /**
            * Get a specific cross-border settlement configuration.</br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
                * @summary Get a specific cross-border settlement configuration
                * @param configId The cross-border settlement configuration ID.
            */
        public async getXBSettlementConfigById (configId: string, ) : Promise<XBSettlementConfigModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/configs/{configId}'
                .replace('{' + 'configId' + '}', encodeURIComponent(String(configId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'configId' is not null or undefined
                        if (configId === null || configId === undefined) {
                        throw new Error('Required parameter configId was null or undefined when calling getXBSettlementConfigById.');
                        }


                    if (typeof configId === 'object') {
                        for( const [key,value] of Object.entries(configId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['configId'] = ObjectSerializer.serialize(configId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<XBSettlementConfigModel>(requestOptions);
        }
            /**
            * Get all the cross-border settlement configurations. </br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
                * @summary Get all the cross-border settlement configurations
            */
        public async getXBSettlementConfigs () : Promise<XBSettlementGetAllConfigsResponse> {
                const path = this.configuration.basePath + '/payments/xb-settlements/configs';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<XBSettlementGetAllConfigsResponse>(requestOptions);
        }
            /**
            * Gets details for a specific cross-border settlement flow **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
                * @summary Get specific cross-border settlement flow details
                * @param flowId The cross-border settlement flow ID.
            */
        public async getXBSettlementFlowById (flowId: string, ) : Promise<XBSettlementGetFlowResponse> {
                const path = this.configuration.basePath + '/payments/xb-settlements/flows/{flowId}'
                .replace('{' + 'flowId' + '}', encodeURIComponent(String(flowId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'flowId' is not null or undefined
                        if (flowId === null || flowId === undefined) {
                        throw new Error('Required parameter flowId was null or undefined when calling getXBSettlementFlowById.');
                        }


                    if (typeof flowId === 'object') {
                        for( const [key,value] of Object.entries(flowId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['flowId'] = ObjectSerializer.serialize(flowId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<XBSettlementGetFlowResponse>(requestOptions);
        }
            /**
            * Edit a cross-border settlement configuration. Editing a configuration does not affect previously executed flows that used the configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
                * @summary Edit a cross-border settlement configuration
                * @param configId The cross-border settlement configuration ID.
                * @param xBSettlementConfigEditRequestBody 
            */
        public async updateXBSettlementConfig (configId: string, xBSettlementConfigEditRequestBody?: XBSettlementConfigEditRequestBody, ) : Promise<XBSettlementConfigModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/configs/{configId}'
                .replace('{' + 'configId' + '}', encodeURIComponent(String(configId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'configId' is not null or undefined
                        if (configId === null || configId === undefined) {
                        throw new Error('Required parameter configId was null or undefined when calling updateXBSettlementConfig.');
                        }


                    if (typeof configId === 'object') {
                        for( const [key,value] of Object.entries(configId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['configId'] = ObjectSerializer.serialize(configId, "string");
                    }

                    if (typeof xBSettlementConfigEditRequestBody === 'object') {
                        for( const [key,value] of Object.entries(xBSettlementConfigEditRequestBody)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['XBSettlementConfigEditRequestBody'] = ObjectSerializer.serialize(xBSettlementConfigEditRequestBody, "XBSettlementConfigEditRequestBody");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PUT',
                    url: path,
                        data: params
                };
                return this.httpClient.request<XBSettlementConfigModel>(requestOptions);
        }
        }
