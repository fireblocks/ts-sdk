/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { PublicKeyInformation } from '../models';
/**
 * EmbeddedWalletsApi - axios parameter creator
 * @export
 */
export const EmbeddedWalletsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets the public key of an asset associated with a specific account within a Non-Custodial Wallet
         * @summary Get the public key of an asset
         * @param {string} walletId The ID of the Non-Custodial wallet
         * @param {string} accountId The ID of the account
         * @param {string} assetId The ID of the asset
         * @param {number} change BIP44 derivation path - change value
         * @param {number} addressIndex BIP44 derivation path - index value
         * @param {boolean} [compressed] Compressed/Uncompressed public key format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKeyInfoForAddressNcw: async (walletId: string, accountId: string, assetId: string, change: number, addressIndex: number, compressed?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getPublicKeyInfoForAddressNcw', 'walletId', walletId)
            assertParamExistsAndNotEmpty('getPublicKeyInfoForAddressNcw', 'accountId', accountId)
            assertParamExistsAndNotEmpty('getPublicKeyInfoForAddressNcw', 'assetId', assetId)
            assertParamExists('getPublicKeyInfoForAddressNcw', 'change', change)
            assertParamExists('getPublicKeyInfoForAddressNcw', 'addressIndex', addressIndex)
            const localVarPath = `/ncw/{walletId}/accounts/{accountId}/{assetId}/{change}/{addressIndex}/public_key_info`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)))
                .replace(`{${"change"}}`, encodeURIComponent(String(change)))
                .replace(`{${"addressIndex"}}`, encodeURIComponent(String(addressIndex)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (compressed !== undefined) {
                localVarQueryParameter['compressed'] = compressed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the public key information based on derivation path and signing algorithm within a Non-Custodial Wallet
         * @summary Get the public key for a derivation path
         * @param {string} walletId The ID of the Non-Custodial wallet
         * @param {string} derivationPath An array of integers (passed as JSON stringified array) representing the full BIP44 derivation path of the requested public key.  The first element must always be 44. 
         * @param {GetPublicKeyInfoNcwAlgorithmEnum} algorithm Elliptic Curve
         * @param {boolean} [compressed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKeyInfoNcw: async (walletId: string, derivationPath: string, algorithm: GetPublicKeyInfoNcwAlgorithmEnum, compressed?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getPublicKeyInfoNcw', 'walletId', walletId)
            assertParamExistsAndNotEmpty('getPublicKeyInfoNcw', 'derivationPath', derivationPath)
            assertParamExistsAndNotEmpty('getPublicKeyInfoNcw', 'algorithm', algorithm)
            const localVarPath = `/ncw/{walletId}/public_key_info`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (derivationPath !== undefined) {
                localVarQueryParameter['derivationPath'] = derivationPath;
            }

            if (algorithm !== undefined) {
                localVarQueryParameter['algorithm'] = algorithm;
            }

            if (compressed !== undefined) {
                localVarQueryParameter['compressed'] = compressed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmbeddedWalletsApi - functional programming interface
 * @export
 */
export const EmbeddedWalletsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmbeddedWalletsApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets the public key of an asset associated with a specific account within a Non-Custodial Wallet
         * @summary Get the public key of an asset
         * @param {string} walletId The ID of the Non-Custodial wallet
         * @param {string} accountId The ID of the account
         * @param {string} assetId The ID of the asset
         * @param {number} change BIP44 derivation path - change value
         * @param {number} addressIndex BIP44 derivation path - index value
         * @param {boolean} [compressed] Compressed/Uncompressed public key format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicKeyInfoForAddressNcw(walletId: string, accountId: string, assetId: string, change: number, addressIndex: number, compressed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKeyInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicKeyInfoForAddressNcw(walletId, accountId, assetId, change, addressIndex, compressed, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmbeddedWalletsApi.getPublicKeyInfoForAddressNcw']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Gets the public key information based on derivation path and signing algorithm within a Non-Custodial Wallet
         * @summary Get the public key for a derivation path
         * @param {string} walletId The ID of the Non-Custodial wallet
         * @param {string} derivationPath An array of integers (passed as JSON stringified array) representing the full BIP44 derivation path of the requested public key.  The first element must always be 44. 
         * @param {GetPublicKeyInfoNcwAlgorithmEnum} algorithm Elliptic Curve
         * @param {boolean} [compressed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublicKeyInfoNcw(walletId: string, derivationPath: string, algorithm: GetPublicKeyInfoNcwAlgorithmEnum, compressed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicKeyInformation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublicKeyInfoNcw(walletId, derivationPath, algorithm, compressed, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EmbeddedWalletsApi.getPublicKeyInfoNcw']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EmbeddedWalletsApi - factory interface
 * @export
 */
export const EmbeddedWalletsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmbeddedWalletsApiFp(configuration)
    return {
        /**
         * Gets the public key of an asset associated with a specific account within a Non-Custodial Wallet
         * @summary Get the public key of an asset
         * @param {EmbeddedWalletsApiGetPublicKeyInfoForAddressNcwRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKeyInfoForAddressNcw(requestParameters: EmbeddedWalletsApiGetPublicKeyInfoForAddressNcwRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicKeyInformation> {
            return localVarFp.getPublicKeyInfoForAddressNcw(requestParameters.walletId, requestParameters.accountId, requestParameters.assetId, requestParameters.change, requestParameters.addressIndex, requestParameters.compressed, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the public key information based on derivation path and signing algorithm within a Non-Custodial Wallet
         * @summary Get the public key for a derivation path
         * @param {EmbeddedWalletsApiGetPublicKeyInfoNcwRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicKeyInfoNcw(requestParameters: EmbeddedWalletsApiGetPublicKeyInfoNcwRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicKeyInformation> {
            return localVarFp.getPublicKeyInfoNcw(requestParameters.walletId, requestParameters.derivationPath, requestParameters.algorithm, requestParameters.compressed, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPublicKeyInfoForAddressNcw operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetPublicKeyInfoForAddressNcwRequest
 */
export interface EmbeddedWalletsApiGetPublicKeyInfoForAddressNcwRequest {
    /**
     * The ID of the Non-Custodial wallet
     * @type {string}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoForAddressNcw
     */
    readonly walletId: string

    /**
     * The ID of the account
     * @type {string}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoForAddressNcw
     */
    readonly accountId: string

    /**
     * The ID of the asset
     * @type {string}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoForAddressNcw
     */
    readonly assetId: string

    /**
     * BIP44 derivation path - change value
     * @type {number}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoForAddressNcw
     */
    readonly change: number

    /**
     * BIP44 derivation path - index value
     * @type {number}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoForAddressNcw
     */
    readonly addressIndex: number

    /**
     * Compressed/Uncompressed public key format
     * @type {boolean}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoForAddressNcw
     */
    readonly compressed?: boolean
}

/**
 * Request parameters for getPublicKeyInfoNcw operation in EmbeddedWalletsApi.
 * @export
 * @interface EmbeddedWalletsApiGetPublicKeyInfoNcwRequest
 */
export interface EmbeddedWalletsApiGetPublicKeyInfoNcwRequest {
    /**
     * The ID of the Non-Custodial wallet
     * @type {string}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoNcw
     */
    readonly walletId: string

    /**
     * An array of integers (passed as JSON stringified array) representing the full BIP44 derivation path of the requested public key.  The first element must always be 44. 
     * @type {string}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoNcw
     */
    readonly derivationPath: string

    /**
     * Elliptic Curve
     * @type {'MPC_ECDSA_SECP256K1' | 'MPC_ECDSA_SECP256R1' | 'MPC_EDDSA_ED25519'}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoNcw
     */
    readonly algorithm: GetPublicKeyInfoNcwAlgorithmEnum

    /**
     * 
     * @type {boolean}
     * @memberof EmbeddedWalletsApiGetPublicKeyInfoNcw
     */
    readonly compressed?: boolean
}

/**
 * EmbeddedWalletsApi - object-oriented interface
 * @export
 * @class EmbeddedWalletsApi
 * @extends {BaseAPI}
 */
export class EmbeddedWalletsApi extends BaseAPI {
    /**
     * Gets the public key of an asset associated with a specific account within a Non-Custodial Wallet
     * @summary Get the public key of an asset
     * @param {EmbeddedWalletsApiGetPublicKeyInfoForAddressNcwRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    public getPublicKeyInfoForAddressNcw(requestParameters: EmbeddedWalletsApiGetPublicKeyInfoForAddressNcwRequest) {
        return EmbeddedWalletsApiFp(this.configuration).getPublicKeyInfoForAddressNcw(requestParameters.walletId, requestParameters.accountId, requestParameters.assetId, requestParameters.change, requestParameters.addressIndex, requestParameters.compressed).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Gets the public key information based on derivation path and signing algorithm within a Non-Custodial Wallet
     * @summary Get the public key for a derivation path
     * @param {EmbeddedWalletsApiGetPublicKeyInfoNcwRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmbeddedWalletsApi
     */
    public getPublicKeyInfoNcw(requestParameters: EmbeddedWalletsApiGetPublicKeyInfoNcwRequest) {
        return EmbeddedWalletsApiFp(this.configuration).getPublicKeyInfoNcw(requestParameters.walletId, requestParameters.derivationPath, requestParameters.algorithm, requestParameters.compressed).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

/**
 * @export
 */
export const GetPublicKeyInfoNcwAlgorithmEnum = {
    EcdsaSecp256K1: 'MPC_ECDSA_SECP256K1',
    EcdsaSecp256R1: 'MPC_ECDSA_SECP256R1',
    EddsaEd25519: 'MPC_EDDSA_ED25519'
} as const;
export type GetPublicKeyInfoNcwAlgorithmEnum = typeof GetPublicKeyInfoNcwAlgorithmEnum[keyof typeof GetPublicKeyInfoNcwAlgorithmEnum];
