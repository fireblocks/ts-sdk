/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';


// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { GetOtaStatus200Response } from '../models';
// @ts-ignore
import { SetOtaStatusRequest } from '../models';



    /**
 * OTABetaApi - axios parameter creator
 * @export
 */
export const OTABetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns current OTA status
         * @summary Returns current OTA status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtaStatus: async (): Promise<AxiosRequestConfig> => {
            const localVarPath = `/management/ota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Enable or disable transactions to OTA
         * @summary Enable or disable transactions to OTA
         * @param {SetOtaStatusRequest} setOtaStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOtaStatus: async (setOtaStatusRequest: SetOtaStatusRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'setOtaStatusRequest' is not null or undefined
            assertParamExists('setOtaStatus', 'setOtaStatusRequest', setOtaStatusRequest)
            const localVarPath = `/management/ota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = setOtaStatusRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * OTABetaApi - functional programming interface
 * @export
 */
export const OTABetaApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = OTABetaApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * Returns current OTA status
         * @summary Returns current OTA status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOtaStatus(): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOtaStatus200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOtaStatus();
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Enable or disable transactions to OTA
         * @summary Enable or disable transactions to OTA
         * @param {SetOtaStatusRequest} setOtaStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setOtaStatus(setOtaStatusRequest: SetOtaStatusRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setOtaStatus(setOtaStatusRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for setOtaStatus operation in OTABetaApi.
 * @export
 * @interface OTABetaApiSetOtaStatusRequest
 */
export interface OTABetaApiSetOtaStatusRequest {
    /**
     * 
     * @type {SetOtaStatusRequest}
     * @memberof OTABetaApiSetOtaStatus
     */
    readonly setOtaStatusRequest: SetOtaStatusRequest
}

/**
 * OTABetaApi - object-oriented interface
 * @export
 * @class OTABetaApi
 * @extends {BaseAPI}
 */
export class OTABetaApi extends BaseAPI {
    /**
     * Returns current OTA status
     * @summary Returns current OTA status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OTABetaApi
     */
    public getOtaStatus() {
        return OTABetaApiFp(this.httpClient).getOtaStatus();
    }

    /**
     * Enable or disable transactions to OTA
     * @summary Enable or disable transactions to OTA
     * @param {OTABetaApiSetOtaStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OTABetaApi
     */
    public setOtaStatus(requestParameters: OTABetaApiSetOtaStatusRequest, ) {
        return OTABetaApiFp(this.httpClient).setOtaStatus(requestParameters.setOtaStatusRequest, );
    }
}
