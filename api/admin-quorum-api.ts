/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { SetAdminQuorumThresholdRequest } from '../models';
/**
 * AdminQuorumApi - axios parameter creator
 * @export
 */
export const AdminQuorumApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update admin quorum threshold
         * @summary Update admin quorum threshold
         * @param {SetAdminQuorumThresholdRequest} setAdminQuorumThresholdRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAdminQuorumThreshold: async (setAdminQuorumThresholdRequest: SetAdminQuorumThresholdRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setAdminQuorumThresholdRequest' is not null or undefined
            assertParamExists('setAdminQuorumThreshold', 'setAdminQuorumThresholdRequest', setAdminQuorumThresholdRequest)
            const localVarPath = `/admin_quorum`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setAdminQuorumThresholdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminQuorumApi - functional programming interface
 * @export
 */
export const AdminQuorumApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminQuorumApiAxiosParamCreator(configuration)
    return {
        /**
         * Update admin quorum threshold
         * @summary Update admin quorum threshold
         * @param {SetAdminQuorumThresholdRequest} setAdminQuorumThresholdRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAdminQuorumThreshold(setAdminQuorumThresholdRequest: SetAdminQuorumThresholdRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAdminQuorumThreshold(setAdminQuorumThresholdRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['AdminQuorumApi.setAdminQuorumThreshold']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * AdminQuorumApi - factory interface
 * @export
 */
export const AdminQuorumApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminQuorumApiFp(configuration)
    return {
        /**
         * Update admin quorum threshold
         * @summary Update admin quorum threshold
         * @param {AdminQuorumApiSetAdminQuorumThresholdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAdminQuorumThreshold(requestParameters: AdminQuorumApiSetAdminQuorumThresholdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setAdminQuorumThreshold(requestParameters.setAdminQuorumThresholdRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for setAdminQuorumThreshold operation in AdminQuorumApi.
 * @export
 * @interface AdminQuorumApiSetAdminQuorumThresholdRequest
 */
export interface AdminQuorumApiSetAdminQuorumThresholdRequest {
    /**
     * 
     * @type {SetAdminQuorumThresholdRequest}
     * @memberof AdminQuorumApiSetAdminQuorumThreshold
     */
    readonly setAdminQuorumThresholdRequest: SetAdminQuorumThresholdRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof AdminQuorumApiSetAdminQuorumThreshold
     */
    readonly idempotencyKey?: string
}

/**
 * AdminQuorumApi - object-oriented interface
 * @export
 * @class AdminQuorumApi
 * @extends {BaseAPI}
 */
export class AdminQuorumApi extends BaseAPI {
    /**
     * Update admin quorum threshold
     * @summary Update admin quorum threshold
     * @param {AdminQuorumApiSetAdminQuorumThresholdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminQuorumApi
     */
    public setAdminQuorumThreshold(requestParameters: AdminQuorumApiSetAdminQuorumThresholdRequest) {
        return AdminQuorumApiFp(this.configuration).setAdminQuorumThreshold(requestParameters.setAdminQuorumThresholdRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

