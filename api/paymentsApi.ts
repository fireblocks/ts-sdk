/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { ErrorResponse } from '../model/errorResponse';
    import { GetAllXBSettlementConfigsResponse } from '../model/getAllXBSettlementConfigsResponse';
    import { PaymentsXbSettlementsFlowsFlowIdGet200Response } from '../model/paymentsXbSettlementsFlowsFlowIdGet200Response';
    import { XBCreateSettlementFlowRequestBody } from '../model/xBCreateSettlementFlowRequestBody';
    import { XBSettlementConfigCreationRequestBody } from '../model/xBSettlementConfigCreationRequestBody';
    import { XBSettlementConfigDeletionResponse } from '../model/xBSettlementConfigDeletionResponse';
    import { XBSettlementConfigEditRequestBody } from '../model/xBSettlementConfigEditRequestBody';
    import { XBSettlementConfigModel } from '../model/xBSettlementConfigModel';
    import { XBSettlementFlowExecutionModel } from '../model/xBSettlementFlowExecutionModel';
    import { XBSettlementFlowSetupModel } from '../model/xBSettlementFlowSetupModel';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class PaymentsApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * 
                * @summary Delete a cross-border (XB) settlement configuration
                * @param configId The cross-border (XB) settlement configuration ID.
            */
        public async paymentsXbSettlementsConfigsConfigIdDelete (configId: string, ) : Promise<XBSettlementConfigDeletionResponse> {
                const path = this.configuration.basePath + '/payments/xb-settlements/configs/{configId}'
                .replace('{' + 'configId' + '}', encodeURIComponent(String(configId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'configId' is not null or undefined
                        if (configId === null || configId === undefined) {
                        throw new Error('Required parameter configId was null or undefined when calling paymentsXbSettlementsConfigsConfigIdDelete.');
                        }


                    if (typeof configId === 'object') {
                        for( const [key,value] of Object.entries(configId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['configId'] = ObjectSerializer.serialize(configId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<XBSettlementConfigDeletionResponse>(requestOptions);
        }
            /**
            * 
                * @summary Get a specific XB settlement configuration
                * @param configId The cross-border (XB) settlement configuration ID.
            */
        public async paymentsXbSettlementsConfigsConfigIdGet (configId: string, ) : Promise<XBSettlementConfigModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/configs/{configId}'
                .replace('{' + 'configId' + '}', encodeURIComponent(String(configId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'configId' is not null or undefined
                        if (configId === null || configId === undefined) {
                        throw new Error('Required parameter configId was null or undefined when calling paymentsXbSettlementsConfigsConfigIdGet.');
                        }


                    if (typeof configId === 'object') {
                        for( const [key,value] of Object.entries(configId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['configId'] = ObjectSerializer.serialize(configId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<XBSettlementConfigModel>(requestOptions);
        }
            /**
            * 
                * @summary Edit a cross-border (XB) settlement configuration
                * @param configId The cross-border (XB) settlement configuration ID.
                * @param xBSettlementConfigEditRequestBody 
            */
        public async paymentsXbSettlementsConfigsConfigIdPut (configId: string, xBSettlementConfigEditRequestBody?: XBSettlementConfigEditRequestBody, ) : Promise<XBSettlementConfigModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/configs/{configId}'
                .replace('{' + 'configId' + '}', encodeURIComponent(String(configId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'configId' is not null or undefined
                        if (configId === null || configId === undefined) {
                        throw new Error('Required parameter configId was null or undefined when calling paymentsXbSettlementsConfigsConfigIdPut.');
                        }


                    if (typeof configId === 'object') {
                        for( const [key,value] of Object.entries(configId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['configId'] = ObjectSerializer.serialize(configId, "string");
                    }

                    if (typeof xBSettlementConfigEditRequestBody === 'object') {
                        for( const [key,value] of Object.entries(xBSettlementConfigEditRequestBody)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['XBSettlementConfigEditRequestBody'] = ObjectSerializer.serialize(xBSettlementConfigEditRequestBody, "XBSettlementConfigEditRequestBody");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'PUT',
                    url: path,
                        data: params
                };
                return this.httpClient.request<XBSettlementConfigModel>(requestOptions);
        }
            /**
            * 
                * @summary Get all the cross-border (XB) settlement configurations of a tenant
            */
        public async paymentsXbSettlementsConfigsGet () : Promise<GetAllXBSettlementConfigsResponse> {
                const path = this.configuration.basePath + '/payments/xb-settlements/configs';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<GetAllXBSettlementConfigsResponse>(requestOptions);
        }
            /**
            * 
                * @summary Create a new cross-border (XB) settlement configuration
                * @param xBSettlementConfigCreationRequestBody 
            */
        public async paymentsXbSettlementsConfigsPost (xBSettlementConfigCreationRequestBody?: XBSettlementConfigCreationRequestBody, ) : Promise<XBSettlementConfigModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/configs';
                let params: any = {};
                let headers: any = {}

                    if (typeof xBSettlementConfigCreationRequestBody === 'object') {
                        for( const [key,value] of Object.entries(xBSettlementConfigCreationRequestBody)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['XBSettlementConfigCreationRequestBody'] = ObjectSerializer.serialize(xBSettlementConfigCreationRequestBody, "XBSettlementConfigCreationRequestBody");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<XBSettlementConfigModel>(requestOptions);
        }
            /**
            * 
                * @summary Execute cross-border (XB) settlement flow
                * @param flowId The ID of the cross-border (XB) settlement flow.
            */
        public async paymentsXbSettlementsFlowsFlowIdActionsExecutePost (flowId: string, ) : Promise<XBSettlementFlowExecutionModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/flows/{flowId}/actions/execute'
                .replace('{' + 'flowId' + '}', encodeURIComponent(String(flowId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'flowId' is not null or undefined
                        if (flowId === null || flowId === undefined) {
                        throw new Error('Required parameter flowId was null or undefined when calling paymentsXbSettlementsFlowsFlowIdActionsExecutePost.');
                        }


                    if (typeof flowId === 'object') {
                        for( const [key,value] of Object.entries(flowId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['flowId'] = ObjectSerializer.serialize(flowId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                };
                return this.httpClient.request<XBSettlementFlowExecutionModel>(requestOptions);
        }
            /**
            * 
                * @summary Get a specific cross-border (XB) settlement flow
                * @param flowId The ID of the cross-border (XB) settlement flow.
            */
        public async paymentsXbSettlementsFlowsFlowIdGet (flowId: string, ) : Promise<PaymentsXbSettlementsFlowsFlowIdGet200Response> {
                const path = this.configuration.basePath + '/payments/xb-settlements/flows/{flowId}'
                .replace('{' + 'flowId' + '}', encodeURIComponent(String(flowId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'flowId' is not null or undefined
                        if (flowId === null || flowId === undefined) {
                        throw new Error('Required parameter flowId was null or undefined when calling paymentsXbSettlementsFlowsFlowIdGet.');
                        }


                    if (typeof flowId === 'object') {
                        for( const [key,value] of Object.entries(flowId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['flowId'] = ObjectSerializer.serialize(flowId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<PaymentsXbSettlementsFlowsFlowIdGet200Response>(requestOptions);
        }
            /**
            * 
                * @summary Create a new cross-border (XB) settlement flow
                * @param xBCreateSettlementFlowRequestBody 
            */
        public async paymentsXbSettlementsFlowsPost (xBCreateSettlementFlowRequestBody?: XBCreateSettlementFlowRequestBody, ) : Promise<XBSettlementFlowSetupModel> {
                const path = this.configuration.basePath + '/payments/xb-settlements/flows';
                let params: any = {};
                let headers: any = {}

                    if (typeof xBCreateSettlementFlowRequestBody === 'object') {
                        for( const [key,value] of Object.entries(xBCreateSettlementFlowRequestBody)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['XBCreateSettlementFlowRequestBody'] = ObjectSerializer.serialize(xBCreateSettlementFlowRequestBody, "XBCreateSettlementFlowRequestBody");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<XBSettlementFlowSetupModel>(requestOptions);
        }
        }
