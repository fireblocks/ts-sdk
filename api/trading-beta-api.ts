/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateOrderRequest } from '../models';
// @ts-ignore
import { CreateQuote } from '../models';
// @ts-ignore
import { GetOrdersResponse } from '../models';
// @ts-ignore
import { OrderDetails } from '../models';
// @ts-ignore
import { OrderStatus } from '../models';
// @ts-ignore
import { ProvidersListResponse } from '../models';
// @ts-ignore
import { QuotesResponse } from '../models';
// @ts-ignore
import { TradingErrorResponse } from '../models';
/**
 * TradingBetaApi - axios parameter creator
 * @export
 */
export const TradingBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an order to buy or sell an asset. If no source is given, an external source will be use.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Create an order
         * @param {CreateOrderRequest} createOrderRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (createOrderRequest: CreateOrderRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('createOrder', 'createOrderRequest', createOrderRequest)
            const localVarPath = `/trading/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a time-limited quote for asset conversion, providing exchange rate and amount calculations.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Create a quote
         * @param {CreateQuote} createQuote 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuote: async (createQuote: CreateQuote, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('createQuote', 'createQuote', createQuote)
            const localVarPath = `/trading/quotes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createQuote, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve detailed information about a specific order by its ID.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get order details
         * @param {string} orderId The ID of the order to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getOrder', 'orderId', orderId)
            const localVarPath = `/trading/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a paginated list of orders with optional filtering by account, provider, status, and time range.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get orders
         * @param {number} pageSize pageSize for pagination.
         * @param {string} [pageCursor] 
         * @param {GetOrdersOrderEnum} [order] ASC / DESC ordering (default DESC)
         * @param {Array<string>} [accountId] Filter by accountId.
         * @param {Array<string>} [providerId] Filter by providerId.
         * @param {Array<OrderStatus>} [statuses] Filter by order status.
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {GetOrdersAssetConversionTypeEnum} [assetConversionType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (pageSize: number, pageCursor?: string, order?: GetOrdersOrderEnum, accountId?: Array<string>, providerId?: Array<string>, statuses?: Array<OrderStatus>, startTime?: number, endTime?: number, assetConversionType?: GetOrdersAssetConversionTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('getOrders', 'pageSize', pageSize)
            const localVarPath = `/trading/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (accountId) {
                localVarQueryParameter['accountId'] = accountId;
            }

            if (providerId) {
                localVarQueryParameter['providerId'] = providerId;
            }

            if (statuses) {
                localVarQueryParameter['statuses'] = statuses;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (assetConversionType !== undefined) {
                localVarQueryParameter['assetConversionType'] = assetConversionType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all available external providers supporting trading activities through the platform.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get providers
         * @param {number} [pageSize] Page size for pagination.
         * @param {string} [pageCursor] Page cursor for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradingProviders: async (pageSize?: number, pageCursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trading/providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradingBetaApi - functional programming interface
 * @export
 */
export const TradingBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TradingBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an order to buy or sell an asset. If no source is given, an external source will be use.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Create an order
         * @param {CreateOrderRequest} createOrderRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(createOrderRequest: CreateOrderRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(createOrderRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TradingBetaApi.createOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Generate a time-limited quote for asset conversion, providing exchange rate and amount calculations.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Create a quote
         * @param {CreateQuote} createQuote 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuote(createQuote: CreateQuote, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuote(createQuote, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TradingBetaApi.createQuote']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve detailed information about a specific order by its ID.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get order details
         * @param {string} orderId The ID of the order to fetch.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(orderId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TradingBetaApi.getOrder']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve a paginated list of orders with optional filtering by account, provider, status, and time range.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get orders
         * @param {number} pageSize pageSize for pagination.
         * @param {string} [pageCursor] 
         * @param {GetOrdersOrderEnum} [order] ASC / DESC ordering (default DESC)
         * @param {Array<string>} [accountId] Filter by accountId.
         * @param {Array<string>} [providerId] Filter by providerId.
         * @param {Array<OrderStatus>} [statuses] Filter by order status.
         * @param {number} [startTime] 
         * @param {number} [endTime] 
         * @param {GetOrdersAssetConversionTypeEnum} [assetConversionType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(pageSize: number, pageCursor?: string, order?: GetOrdersOrderEnum, accountId?: Array<string>, providerId?: Array<string>, statuses?: Array<OrderStatus>, startTime?: number, endTime?: number, assetConversionType?: GetOrdersAssetConversionTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(pageSize, pageCursor, order, accountId, providerId, statuses, startTime, endTime, assetConversionType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TradingBetaApi.getOrders']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve a list of all available external providers supporting trading activities through the platform.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get providers
         * @param {number} [pageSize] Page size for pagination.
         * @param {string} [pageCursor] Page cursor for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTradingProviders(pageSize?: number, pageCursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProvidersListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTradingProviders(pageSize, pageCursor, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TradingBetaApi.getTradingProviders']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TradingBetaApi - factory interface
 * @export
 */
export const TradingBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TradingBetaApiFp(configuration)
    return {
        /**
         * Create an order to buy or sell an asset. If no source is given, an external source will be use.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Create an order
         * @param {TradingBetaApiCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(requestParameters: TradingBetaApiCreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderDetails> {
            return localVarFp.createOrder(requestParameters.createOrderRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a time-limited quote for asset conversion, providing exchange rate and amount calculations.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
         * @summary Create a quote
         * @param {TradingBetaApiCreateQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuote(requestParameters: TradingBetaApiCreateQuoteRequest, options?: RawAxiosRequestConfig): AxiosPromise<QuotesResponse> {
            return localVarFp.createQuote(requestParameters.createQuote, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve detailed information about a specific order by its ID.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get order details
         * @param {TradingBetaApiGetOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(requestParameters: TradingBetaApiGetOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrderDetails> {
            return localVarFp.getOrder(requestParameters.orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a paginated list of orders with optional filtering by account, provider, status, and time range.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get orders
         * @param {TradingBetaApiGetOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(requestParameters: TradingBetaApiGetOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetOrdersResponse> {
            return localVarFp.getOrders(requestParameters.pageSize, requestParameters.pageCursor, requestParameters.order, requestParameters.accountId, requestParameters.providerId, requestParameters.statuses, requestParameters.startTime, requestParameters.endTime, requestParameters.assetConversionType, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all available external providers supporting trading activities through the platform.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
         * @summary Get providers
         * @param {TradingBetaApiGetTradingProvidersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTradingProviders(requestParameters: TradingBetaApiGetTradingProvidersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ProvidersListResponse> {
            return localVarFp.getTradingProviders(requestParameters.pageSize, requestParameters.pageCursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOrder operation in TradingBetaApi.
 * @export
 * @interface TradingBetaApiCreateOrderRequest
 */
export interface TradingBetaApiCreateOrderRequest {
    /**
     * 
     * @type {CreateOrderRequest}
     * @memberof TradingBetaApiCreateOrder
     */
    readonly createOrderRequest: CreateOrderRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TradingBetaApiCreateOrder
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for createQuote operation in TradingBetaApi.
 * @export
 * @interface TradingBetaApiCreateQuoteRequest
 */
export interface TradingBetaApiCreateQuoteRequest {
    /**
     * 
     * @type {CreateQuote}
     * @memberof TradingBetaApiCreateQuote
     */
    readonly createQuote: CreateQuote

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TradingBetaApiCreateQuote
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for getOrder operation in TradingBetaApi.
 * @export
 * @interface TradingBetaApiGetOrderRequest
 */
export interface TradingBetaApiGetOrderRequest {
    /**
     * The ID of the order to fetch.
     * @type {string}
     * @memberof TradingBetaApiGetOrder
     */
    readonly orderId: string
}

/**
 * Request parameters for getOrders operation in TradingBetaApi.
 * @export
 * @interface TradingBetaApiGetOrdersRequest
 */
export interface TradingBetaApiGetOrdersRequest {
    /**
     * pageSize for pagination.
     * @type {number}
     * @memberof TradingBetaApiGetOrders
     */
    readonly pageSize: number

    /**
     * 
     * @type {string}
     * @memberof TradingBetaApiGetOrders
     */
    readonly pageCursor?: string

    /**
     * ASC / DESC ordering (default DESC)
     * @type {'ASC' | 'DESC'}
     * @memberof TradingBetaApiGetOrders
     */
    readonly order?: GetOrdersOrderEnum

    /**
     * Filter by accountId.
     * @type {Array<string>}
     * @memberof TradingBetaApiGetOrders
     */
    readonly accountId?: Array<string>

    /**
     * Filter by providerId.
     * @type {Array<string>}
     * @memberof TradingBetaApiGetOrders
     */
    readonly providerId?: Array<string>

    /**
     * Filter by order status.
     * @type {Array<OrderStatus>}
     * @memberof TradingBetaApiGetOrders
     */
    readonly statuses?: Array<OrderStatus>

    /**
     * 
     * @type {number}
     * @memberof TradingBetaApiGetOrders
     */
    readonly startTime?: number

    /**
     * 
     * @type {number}
     * @memberof TradingBetaApiGetOrders
     */
    readonly endTime?: number

    /**
     * 
     * @type {'DIGITAL_ONLY' | 'FIAT'}
     * @memberof TradingBetaApiGetOrders
     */
    readonly assetConversionType?: GetOrdersAssetConversionTypeEnum
}

/**
 * Request parameters for getTradingProviders operation in TradingBetaApi.
 * @export
 * @interface TradingBetaApiGetTradingProvidersRequest
 */
export interface TradingBetaApiGetTradingProvidersRequest {
    /**
     * Page size for pagination.
     * @type {number}
     * @memberof TradingBetaApiGetTradingProviders
     */
    readonly pageSize?: number

    /**
     * Page cursor for pagination.
     * @type {string}
     * @memberof TradingBetaApiGetTradingProviders
     */
    readonly pageCursor?: string
}

/**
 * TradingBetaApi - object-oriented interface
 * @export
 * @class TradingBetaApi
 * @extends {BaseAPI}
 */
export class TradingBetaApi extends BaseAPI {
    /**
     * Create an order to buy or sell an asset. If no source is given, an external source will be use.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
     * @summary Create an order
     * @param {TradingBetaApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingBetaApi
     */
    public createOrder(requestParameters: TradingBetaApiCreateOrderRequest) {
        return TradingBetaApiFp(this.configuration).createOrder(requestParameters.createOrderRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Generate a time-limited quote for asset conversion, providing exchange rate and amount calculations.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Editor.
     * @summary Create a quote
     * @param {TradingBetaApiCreateQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingBetaApi
     */
    public createQuote(requestParameters: TradingBetaApiCreateQuoteRequest) {
        return TradingBetaApiFp(this.configuration).createQuote(requestParameters.createQuote, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Retrieve detailed information about a specific order by its ID.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
     * @summary Get order details
     * @param {TradingBetaApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingBetaApi
     */
    public getOrder(requestParameters: TradingBetaApiGetOrderRequest) {
        return TradingBetaApiFp(this.configuration).getOrder(requestParameters.orderId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Retrieve a paginated list of orders with optional filtering by account, provider, status, and time range.  Note:These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
     * @summary Get orders
     * @param {TradingBetaApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingBetaApi
     */
    public getOrders(requestParameters: TradingBetaApiGetOrdersRequest) {
        return TradingBetaApiFp(this.configuration).getOrders(requestParameters.pageSize, requestParameters.pageCursor, requestParameters.order, requestParameters.accountId, requestParameters.providerId, requestParameters.statuses, requestParameters.startTime, requestParameters.endTime, requestParameters.assetConversionType).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Retrieve a list of all available external providers supporting trading activities through the platform.  Note: These endpoints are currently in beta and might be subject to changes.  If you want to participate and learn more about the Fireblocks Trading, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com.  Endpoint Permission: Owner, Admin, Non-Signing Admin, Signer, Approver, Editor, Viewer.
     * @summary Get providers
     * @param {TradingBetaApiGetTradingProvidersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradingBetaApi
     */
    public getTradingProviders(requestParameters: TradingBetaApiGetTradingProvidersRequest = {}) {
        return TradingBetaApiFp(this.configuration).getTradingProviders(requestParameters.pageSize, requestParameters.pageCursor).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

/**
 * @export
 */
export const GetOrdersOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type GetOrdersOrderEnum = typeof GetOrdersOrderEnum[keyof typeof GetOrdersOrderEnum];
/**
 * @export
 */
export const GetOrdersAssetConversionTypeEnum = {
    DigitalOnly: 'DIGITAL_ONLY',
    Fiat: 'FIAT'
} as const;
export type GetOrdersAssetConversionTypeEnum = typeof GetOrdersAssetConversionTypeEnum[keyof typeof GetOrdersAssetConversionTypeEnum];
