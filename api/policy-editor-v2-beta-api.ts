/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { DraftReviewAndValidationResponse } from '../models';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { PolicyAndValidationResponse } from '../models';
// @ts-ignore
import { PolicyType } from '../models';
// @ts-ignore
import { PublishDraftRequest } from '../models';
// @ts-ignore
import { PublishResult } from '../models';
// @ts-ignore
import { UpdateDraftRequest } from '../models';
/**
 * PolicyEditorV2BetaApi - axios parameter creator
 * @export
 */
export const PolicyEditorV2BetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the active policy and its validation for a specific policy type. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
         * @summary Get the active policy and its validation by policy type
         * @param {PolicyType} policyType The policy type(s) to retrieve. Can be a single type or multiple types by repeating the parameter (e.g., ?policyType&#x3D;TRANSFER&amp;policyType&#x3D;MINT).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivePolicy: async (policyType: PolicyType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('getActivePolicy', 'policyType', policyType)
            const localVarPath = `/policy/active_policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (policyType !== undefined) {
                localVarQueryParameter['policyType'] = policyType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the active draft and its validation for a specific policy type. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
         * @summary Get the active draft by policy type
         * @param {PolicyType} policyType The policy type(s) to retrieve. Can be a single type or multiple types by repeating the parameter (e.g., ?policyType&#x3D;TRANSFER&amp;policyType&#x3D;MINT).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraft: async (policyType: PolicyType, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('getDraft', 'policyType', policyType)
            const localVarPath = `/policy/draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (policyType !== undefined) {
                localVarQueryParameter['policyType'] = policyType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send publish request of certain draft id and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Policy Editor, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a certain draft id
         * @param {PublishDraftRequest} publishDraftRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishDraft: async (publishDraftRequest: PublishDraftRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('publishDraft', 'publishDraftRequest', publishDraftRequest)
            const localVarPath = `/policy/draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publishDraftRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the draft and return its validation for specific policy types. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
         * @summary Update the draft with a new set of rules by policy types
         * @param {UpdateDraftRequest} updateDraftRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDraft: async (updateDraftRequest: UpdateDraftRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExists('updateDraft', 'updateDraftRequest', updateDraftRequest)
            const localVarPath = `/policy/draft`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDraftRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicyEditorV2BetaApi - functional programming interface
 * @export
 */
export const PolicyEditorV2BetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PolicyEditorV2BetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the active policy and its validation for a specific policy type. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
         * @summary Get the active policy and its validation by policy type
         * @param {PolicyType} policyType The policy type(s) to retrieve. Can be a single type or multiple types by repeating the parameter (e.g., ?policyType&#x3D;TRANSFER&amp;policyType&#x3D;MINT).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActivePolicy(policyType: PolicyType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PolicyAndValidationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActivePolicy(policyType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PolicyEditorV2BetaApi.getActivePolicy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns the active draft and its validation for a specific policy type. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
         * @summary Get the active draft by policy type
         * @param {PolicyType} policyType The policy type(s) to retrieve. Can be a single type or multiple types by repeating the parameter (e.g., ?policyType&#x3D;TRANSFER&amp;policyType&#x3D;MINT).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDraft(policyType: PolicyType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DraftReviewAndValidationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDraft(policyType, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PolicyEditorV2BetaApi.getDraft']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Send publish request of certain draft id and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Policy Editor, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a certain draft id
         * @param {PublishDraftRequest} publishDraftRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishDraft(publishDraftRequest: PublishDraftRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublishResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishDraft(publishDraftRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PolicyEditorV2BetaApi.publishDraft']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Update the draft and return its validation for specific policy types. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
         * @summary Update the draft with a new set of rules by policy types
         * @param {UpdateDraftRequest} updateDraftRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDraft(updateDraftRequest: UpdateDraftRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DraftReviewAndValidationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDraft(updateDraftRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PolicyEditorV2BetaApi.updateDraft']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PolicyEditorV2BetaApi - factory interface
 * @export
 */
export const PolicyEditorV2BetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PolicyEditorV2BetaApiFp(configuration)
    return {
        /**
         * Returns the active policy and its validation for a specific policy type. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
         * @summary Get the active policy and its validation by policy type
         * @param {PolicyEditorV2BetaApiGetActivePolicyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActivePolicy(requestParameters: PolicyEditorV2BetaApiGetActivePolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<PolicyAndValidationResponse> {
            return localVarFp.getActivePolicy(requestParameters.policyType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the active draft and its validation for a specific policy type. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
         * @summary Get the active draft by policy type
         * @param {PolicyEditorV2BetaApiGetDraftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraft(requestParameters: PolicyEditorV2BetaApiGetDraftRequest, options?: RawAxiosRequestConfig): AxiosPromise<DraftReviewAndValidationResponse> {
            return localVarFp.getDraft(requestParameters.policyType, options).then((request) => request(axios, basePath));
        },
        /**
         * Send publish request of certain draft id and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Policy Editor, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Send publish request for a certain draft id
         * @param {PolicyEditorV2BetaApiPublishDraftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishDraft(requestParameters: PolicyEditorV2BetaApiPublishDraftRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublishResult> {
            return localVarFp.publishDraft(requestParameters.publishDraftRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the draft and return its validation for specific policy types. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
         * @summary Update the draft with a new set of rules by policy types
         * @param {PolicyEditorV2BetaApiUpdateDraftRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDraft(requestParameters: PolicyEditorV2BetaApiUpdateDraftRequest, options?: RawAxiosRequestConfig): AxiosPromise<DraftReviewAndValidationResponse> {
            return localVarFp.updateDraft(requestParameters.updateDraftRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getActivePolicy operation in PolicyEditorV2BetaApi.
 * @export
 * @interface PolicyEditorV2BetaApiGetActivePolicyRequest
 */
export interface PolicyEditorV2BetaApiGetActivePolicyRequest {
    /**
     * The policy type(s) to retrieve. Can be a single type or multiple types by repeating the parameter (e.g., ?policyType&#x3D;TRANSFER&amp;policyType&#x3D;MINT).
     * @type {PolicyType}
     * @memberof PolicyEditorV2BetaApiGetActivePolicy
     */
    readonly policyType: PolicyType
}

/**
 * Request parameters for getDraft operation in PolicyEditorV2BetaApi.
 * @export
 * @interface PolicyEditorV2BetaApiGetDraftRequest
 */
export interface PolicyEditorV2BetaApiGetDraftRequest {
    /**
     * The policy type(s) to retrieve. Can be a single type or multiple types by repeating the parameter (e.g., ?policyType&#x3D;TRANSFER&amp;policyType&#x3D;MINT).
     * @type {PolicyType}
     * @memberof PolicyEditorV2BetaApiGetDraft
     */
    readonly policyType: PolicyType
}

/**
 * Request parameters for publishDraft operation in PolicyEditorV2BetaApi.
 * @export
 * @interface PolicyEditorV2BetaApiPublishDraftRequest
 */
export interface PolicyEditorV2BetaApiPublishDraftRequest {
    /**
     * 
     * @type {PublishDraftRequest}
     * @memberof PolicyEditorV2BetaApiPublishDraft
     */
    readonly publishDraftRequest: PublishDraftRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof PolicyEditorV2BetaApiPublishDraft
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for updateDraft operation in PolicyEditorV2BetaApi.
 * @export
 * @interface PolicyEditorV2BetaApiUpdateDraftRequest
 */
export interface PolicyEditorV2BetaApiUpdateDraftRequest {
    /**
     * 
     * @type {UpdateDraftRequest}
     * @memberof PolicyEditorV2BetaApiUpdateDraft
     */
    readonly updateDraftRequest: UpdateDraftRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof PolicyEditorV2BetaApiUpdateDraft
     */
    readonly idempotencyKey?: string
}

/**
 * PolicyEditorV2BetaApi - object-oriented interface
 * @export
 * @class PolicyEditorV2BetaApi
 * @extends {BaseAPI}
 */
export class PolicyEditorV2BetaApi extends BaseAPI {
    /**
     * Returns the active policy and its validation for a specific policy type. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
     * @summary Get the active policy and its validation by policy type
     * @param {PolicyEditorV2BetaApiGetActivePolicyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorV2BetaApi
     */
    public getActivePolicy(requestParameters: PolicyEditorV2BetaApiGetActivePolicyRequest) {
        return PolicyEditorV2BetaApiFp(this.configuration).getActivePolicy(requestParameters.policyType).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns the active draft and its validation for a specific policy type. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
     * @summary Get the active draft by policy type
     * @param {PolicyEditorV2BetaApiGetDraftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorV2BetaApi
     */
    public getDraft(requestParameters: PolicyEditorV2BetaApiGetDraftRequest) {
        return PolicyEditorV2BetaApiFp(this.configuration).getDraft(requestParameters.policyType).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Send publish request of certain draft id and returns the response. </br> **Note:** These endpoints are currently in beta and might be subject to changes. If you want to participate and learn more about the Fireblocks Policy Editor, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Send publish request for a certain draft id
     * @param {PolicyEditorV2BetaApiPublishDraftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorV2BetaApi
     */
    public publishDraft(requestParameters: PolicyEditorV2BetaApiPublishDraftRequest) {
        return PolicyEditorV2BetaApiFp(this.configuration).publishDraft(requestParameters.publishDraftRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Update the draft and return its validation for specific policy types. </br> **Note:** These endpoints are currently in beta and might be subject to changes. 
     * @summary Update the draft with a new set of rules by policy types
     * @param {PolicyEditorV2BetaApiUpdateDraftRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyEditorV2BetaApi
     */
    public updateDraft(requestParameters: PolicyEditorV2BetaApiUpdateDraftRequest) {
        return PolicyEditorV2BetaApiFp(this.configuration).updateDraft(requestParameters.updateDraftRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

