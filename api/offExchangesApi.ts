/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { OffExchangeEntityResponse } from '../model/offExchangeEntityResponse';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class OffExchangesApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Gets a list of off exchanges.
                * @summary List off exchanges
            */
        public async offExchangeAccountsGet () : Promise<Array<OffExchangeEntityResponse>> {
                const path = this.configuration.basePath + '/off_exchange_accounts';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<OffExchangeEntityResponse>>(requestOptions);
        }
            /**
            * Gets an off exchange by its ID.
                * @summary Get an off exchange by ID
                * @param virtualAccountId The ID of the off exchange entity
            */
        public async offExchangeAccountsVirtualAccountIdGet (virtualAccountId: string, ) : Promise<OffExchangeEntityResponse> {
                const path = this.configuration.basePath + '/off_exchange_accounts/{virtualAccountId}'
                .replace('{' + 'virtualAccountId' + '}', encodeURIComponent(String(virtualAccountId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'virtualAccountId' is not null or undefined
                        if (virtualAccountId === null || virtualAccountId === undefined) {
                        throw new Error('Required parameter virtualAccountId was null or undefined when calling offExchangeAccountsVirtualAccountIdGet.');
                        }


                    if (typeof virtualAccountId === 'object') {
                        for( const [key,value] of Object.entries(virtualAccountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['virtualAccountId'] = ObjectSerializer.serialize(virtualAccountId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<OffExchangeEntityResponse>(requestOptions);
        }
            /**
            * Settles an off exchange entity.
                * @summary Settle an off exchange
                * @param virtualAccountId The ID of the off exchange entity
            */
        public async offExchangeAccountsVirtualAccountIdSettlePost (virtualAccountId: string, ) : Promise<any> {
                const path = this.configuration.basePath + '/off_exchange_accounts/{virtualAccountId}/settle'
                .replace('{' + 'virtualAccountId' + '}', encodeURIComponent(String(virtualAccountId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'virtualAccountId' is not null or undefined
                        if (virtualAccountId === null || virtualAccountId === undefined) {
                        throw new Error('Required parameter virtualAccountId was null or undefined when calling offExchangeAccountsVirtualAccountIdSettlePost.');
                        }


                    if (typeof virtualAccountId === 'object') {
                        for( const [key,value] of Object.entries(virtualAccountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['virtualAccountId'] = ObjectSerializer.serialize(virtualAccountId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                };
                return this.httpClient.request<any>(requestOptions);
        }
        }
