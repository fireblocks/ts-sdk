/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { AddCollateralRequestBody } from '../model/addCollateralRequestBody';
    import { CreateTransactionResponse } from '../model/createTransactionResponse';
    import { ExchangeAccount } from '../model/exchangeAccount';
    import { RemoveCollateralRequestBody } from '../model/removeCollateralRequestBody';
    import { SettlementRequestBody } from '../model/settlementRequestBody';
    import { SettlementResponse } from '../model/settlementResponse';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class OffExchangesApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * add collateral, create deposit request
                * @summary add collateral
                * @param addCollateralRequestBody 
            */
        public async addOffExchange (addCollateralRequestBody?: AddCollateralRequestBody, ) : Promise<CreateTransactionResponse> {
                const path = this.configuration.basePath + '/off_exchange/add';
                let params: any = {};
                let headers: any = {}

                    if (typeof addCollateralRequestBody === 'object') {
                        for( const [key,value] of Object.entries(addCollateralRequestBody)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['AddCollateralRequestBody'] = ObjectSerializer.serialize(addCollateralRequestBody, "AddCollateralRequestBody");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<CreateTransactionResponse>(requestOptions);
        }
            /**
            * Returns a collateral account by mainExchangeAccountId.
                * @summary Find a specific collateral exchange account
                * @param mainExchangeAccountId The id of the main exchange account for which the requested collateral account is associated with
            */
        public async getOffExchangeCollateralAccounts (mainExchangeAccountId: string, ) : Promise<ExchangeAccount> {
                const path = this.configuration.basePath + '/off_exchange/collateral_accounts/{mainExchangeAccountId}'
                .replace('{' + 'mainExchangeAccountId' + '}', encodeURIComponent(String(mainExchangeAccountId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'mainExchangeAccountId' is not null or undefined
                        if (mainExchangeAccountId === null || mainExchangeAccountId === undefined) {
                        throw new Error('Required parameter mainExchangeAccountId was null or undefined when calling getOffExchangeCollateralAccounts.');
                        }


                    if (typeof mainExchangeAccountId === 'object') {
                        for( const [key,value] of Object.entries(mainExchangeAccountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['mainExchangeAccountId'] = ObjectSerializer.serialize(mainExchangeAccountId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<ExchangeAccount>(requestOptions);
        }
            /**
            * get settlements transactions from exchange
                * @summary get settlements transactions from exchange
                * @param mainExchangeAccountId 
            */
        public async getOffExchangeSettlementTransactions (mainExchangeAccountId: string, ) : Promise<SettlementResponse> {
                const path = this.configuration.basePath + '/off_exchange/settlements/transactions';
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'mainExchangeAccountId' is not null or undefined
                        if (mainExchangeAccountId === null || mainExchangeAccountId === undefined) {
                        throw new Error('Required parameter mainExchangeAccountId was null or undefined when calling getOffExchangeSettlementTransactions.');
                        }


                    if (typeof mainExchangeAccountId === 'object') {
                        for( const [key,value] of Object.entries(mainExchangeAccountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['mainExchangeAccountId'] = ObjectSerializer.serialize(mainExchangeAccountId, "string");
                    }
                    if (mainExchangeAccountId !== undefined) {
                        params['mainExchangeAccountId'] = ObjectSerializer.serialize(mainExchangeAccountId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<SettlementResponse>(requestOptions);
        }
            /**
            * remove collateral, create withdraw request
                * @summary remove collateral
                * @param removeCollateralRequestBody 
            */
        public async removeOffExchange (removeCollateralRequestBody?: RemoveCollateralRequestBody, ) : Promise<CreateTransactionResponse> {
                const path = this.configuration.basePath + '/off_exchange/remove';
                let params: any = {};
                let headers: any = {}

                    if (typeof removeCollateralRequestBody === 'object') {
                        for( const [key,value] of Object.entries(removeCollateralRequestBody)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['RemoveCollateralRequestBody'] = ObjectSerializer.serialize(removeCollateralRequestBody, "RemoveCollateralRequestBody");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<CreateTransactionResponse>(requestOptions);
        }
            /**
            * create settlement for a trader
                * @summary create settlement for a trader
                * @param settlementRequestBody 
            */
        public async settleOffExchangeTrades (settlementRequestBody?: SettlementRequestBody, ) : Promise<SettlementResponse> {
                const path = this.configuration.basePath + '/off_exchange/settlements/trader';
                let params: any = {};
                let headers: any = {}

                    if (typeof settlementRequestBody === 'object') {
                        for( const [key,value] of Object.entries(settlementRequestBody)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['SettlementRequestBody'] = ObjectSerializer.serialize(settlementRequestBody, "SettlementRequestBody");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<SettlementResponse>(requestOptions);
        }
        }
