/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateAPIUser } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { GetAPIUsersResponse } from '../models';
/**
 * ApiUserApi - axios parameter creator
 * @export
 */
export const ApiUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates Api user in your tenant
         * @summary Create Api user
         * @param {CreateAPIUser} [createAPIUser] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiUser: async (createAPIUser?: CreateAPIUser, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/api_users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAPIUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Api users of your tenant
         * @summary Get Api users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/api_users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiUserApi - functional programming interface
 * @export
 */
export const ApiUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiUserApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates Api user in your tenant
         * @summary Create Api user
         * @param {CreateAPIUser} [createAPIUser] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiUser(createAPIUser?: CreateAPIUser, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiUser(createAPIUser, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiUserApi.createApiUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get Api users of your tenant
         * @summary Get Api users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApiUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAPIUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApiUsers(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiUserApi.getApiUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ApiUserApi - factory interface
 * @export
 */
export const ApiUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiUserApiFp(configuration)
    return {
        /**
         * Creates Api user in your tenant
         * @summary Create Api user
         * @param {ApiUserApiCreateApiUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiUser(requestParameters: ApiUserApiCreateApiUserRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createApiUser(requestParameters.createAPIUser, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Api users of your tenant
         * @summary Get Api users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApiUsers(options?: RawAxiosRequestConfig): AxiosPromise<GetAPIUsersResponse> {
            return localVarFp.getApiUsers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createApiUser operation in ApiUserApi.
 * @export
 * @interface ApiUserApiCreateApiUserRequest
 */
export interface ApiUserApiCreateApiUserRequest {
    /**
     * 
     * @type {CreateAPIUser}
     * @memberof ApiUserApiCreateApiUser
     */
    readonly createAPIUser?: CreateAPIUser

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ApiUserApiCreateApiUser
     */
    readonly idempotencyKey?: string
}

/**
 * ApiUserApi - object-oriented interface
 * @export
 * @class ApiUserApi
 * @extends {BaseAPI}
 */
export class ApiUserApi extends BaseAPI {
    /**
     * Creates Api user in your tenant
     * @summary Create Api user
     * @param {ApiUserApiCreateApiUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiUserApi
     */
    public createApiUser(requestParameters: ApiUserApiCreateApiUserRequest = {}) {
        return ApiUserApiFp(this.configuration).createApiUser(requestParameters.createAPIUser, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Get Api users of your tenant
     * @summary Get Api users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiUserApi
     */
    public getApiUsers() {
        return ApiUserApiFp(this.configuration).getApiUsers().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

