/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { AssetClassBeta } from '../models';
// @ts-ignore
import { AssetInternalServerErrorResponse } from '../models';
// @ts-ignore
import { AssetNotFoundErrorResponse } from '../models';
// @ts-ignore
import { AssetResponseBeta } from '../models';
// @ts-ignore
import { BlockchainNotFoundErrorResponse } from '../models';
// @ts-ignore
import { BlockchainResponse } from '../models';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { ListAssetsResponse } from '../models';
// @ts-ignore
import { ListBlockchainsResponse } from '../models';
/**
 * BlockchainsAssetsBetaApi - axios parameter creator
 * @export
 */
export const BlockchainsAssetsBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an asset by ID or legacyID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary Get an asset
         * @param {string} id The ID or legacyId of the asset
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetById: async (id: string, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getAssetById', 'id', id)
            const localVarPath = `/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an blockchain by ID or legacyID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary Get an blockchain
         * @param {string} id The ID or legacyId of the blockchain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockchainById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getBlockchainById', 'id', id)
            const localVarPath = `/blockchains/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all asset type supported by Fireblocks.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary List assets
         * @param {string} [blockchainId] Blockchain id of the assets
         * @param {AssetClassBeta} [assetClass] Assets class
         * @param {string} [symbol] Assets onchain symbol
         * @param {ListAssetsScopeEnum} [scope] Scope of the assets
         * @param {boolean} [deprecated] Are assets deprecated
         * @param {string} [pageCursor] Next page cursor to fetch
         * @param {number} [pageSize] Items per page
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssets: async (blockchainId?: string, assetClass?: AssetClassBeta, symbol?: string, scope?: ListAssetsScopeEnum, deprecated?: boolean, pageCursor?: string, pageSize?: number, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (blockchainId !== undefined) {
                localVarQueryParameter['blockchainId'] = blockchainId;
            }

            if (assetClass !== undefined) {
                localVarQueryParameter['assetClass'] = assetClass;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            if (deprecated !== undefined) {
                localVarQueryParameter['deprecated'] = deprecated;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all blockchains supported by Fireblocks.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary List blockchains
         * @param {string} [protocol] Blockchain protocol
         * @param {boolean} [deprecated] Is blockchain deprecated
         * @param {boolean} [test] Is test blockchain
         * @param {string} [pageCursor] Page cursor to fetch
         * @param {number} [pageSize] Items per page (max 500)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlockchains: async (protocol?: string, deprecated?: boolean, test?: boolean, pageCursor?: string, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/blockchains`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (protocol !== undefined) {
                localVarQueryParameter['protocol'] = protocol;
            }

            if (deprecated !== undefined) {
                localVarQueryParameter['deprecated'] = deprecated;
            }

            if (test !== undefined) {
                localVarQueryParameter['test'] = test;
            }

            if (pageCursor !== undefined) {
                localVarQueryParameter['pageCursor'] = pageCursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BlockchainsAssetsBetaApi - functional programming interface
 * @export
 */
export const BlockchainsAssetsBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BlockchainsAssetsBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an asset by ID or legacyID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary Get an asset
         * @param {string} id The ID or legacyId of the asset
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAssetById(id: string, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetResponseBeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetById(id, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlockchainsAssetsBetaApi.getAssetById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns an blockchain by ID or legacyID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary Get an blockchain
         * @param {string} id The ID or legacyId of the blockchain
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockchainById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BlockchainResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockchainById(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlockchainsAssetsBetaApi.getBlockchainById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns all asset type supported by Fireblocks.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary List assets
         * @param {string} [blockchainId] Blockchain id of the assets
         * @param {AssetClassBeta} [assetClass] Assets class
         * @param {string} [symbol] Assets onchain symbol
         * @param {ListAssetsScopeEnum} [scope] Scope of the assets
         * @param {boolean} [deprecated] Are assets deprecated
         * @param {string} [pageCursor] Next page cursor to fetch
         * @param {number} [pageSize] Items per page
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAssets(blockchainId?: string, assetClass?: AssetClassBeta, symbol?: string, scope?: ListAssetsScopeEnum, deprecated?: boolean, pageCursor?: string, pageSize?: number, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAssets(blockchainId, assetClass, symbol, scope, deprecated, pageCursor, pageSize, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlockchainsAssetsBetaApi.listAssets']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns all blockchains supported by Fireblocks.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary List blockchains
         * @param {string} [protocol] Blockchain protocol
         * @param {boolean} [deprecated] Is blockchain deprecated
         * @param {boolean} [test] Is test blockchain
         * @param {string} [pageCursor] Page cursor to fetch
         * @param {number} [pageSize] Items per page (max 500)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBlockchains(protocol?: string, deprecated?: boolean, test?: boolean, pageCursor?: string, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBlockchainsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBlockchains(protocol, deprecated, test, pageCursor, pageSize, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['BlockchainsAssetsBetaApi.listBlockchains']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * BlockchainsAssetsBetaApi - factory interface
 * @export
 */
export const BlockchainsAssetsBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BlockchainsAssetsBetaApiFp(configuration)
    return {
        /**
         * Returns an asset by ID or legacyID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary Get an asset
         * @param {BlockchainsAssetsBetaApiGetAssetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAssetById(requestParameters: BlockchainsAssetsBetaApiGetAssetByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<AssetResponseBeta> {
            return localVarFp.getAssetById(requestParameters.id, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an blockchain by ID or legacyID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary Get an blockchain
         * @param {BlockchainsAssetsBetaApiGetBlockchainByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockchainById(requestParameters: BlockchainsAssetsBetaApiGetBlockchainByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<BlockchainResponse> {
            return localVarFp.getBlockchainById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all asset type supported by Fireblocks.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary List assets
         * @param {BlockchainsAssetsBetaApiListAssetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAssets(requestParameters: BlockchainsAssetsBetaApiListAssetsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListAssetsResponse> {
            return localVarFp.listAssets(requestParameters.blockchainId, requestParameters.assetClass, requestParameters.symbol, requestParameters.scope, requestParameters.deprecated, requestParameters.pageCursor, requestParameters.pageSize, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all blockchains supported by Fireblocks.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
         * @summary List blockchains
         * @param {BlockchainsAssetsBetaApiListBlockchainsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBlockchains(requestParameters: BlockchainsAssetsBetaApiListBlockchainsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ListBlockchainsResponse> {
            return localVarFp.listBlockchains(requestParameters.protocol, requestParameters.deprecated, requestParameters.test, requestParameters.pageCursor, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAssetById operation in BlockchainsAssetsBetaApi.
 * @export
 * @interface BlockchainsAssetsBetaApiGetAssetByIdRequest
 */
export interface BlockchainsAssetsBetaApiGetAssetByIdRequest {
    /**
     * The ID or legacyId of the asset
     * @type {string}
     * @memberof BlockchainsAssetsBetaApiGetAssetById
     */
    readonly id: string

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof BlockchainsAssetsBetaApiGetAssetById
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for getBlockchainById operation in BlockchainsAssetsBetaApi.
 * @export
 * @interface BlockchainsAssetsBetaApiGetBlockchainByIdRequest
 */
export interface BlockchainsAssetsBetaApiGetBlockchainByIdRequest {
    /**
     * The ID or legacyId of the blockchain
     * @type {string}
     * @memberof BlockchainsAssetsBetaApiGetBlockchainById
     */
    readonly id: string
}

/**
 * Request parameters for listAssets operation in BlockchainsAssetsBetaApi.
 * @export
 * @interface BlockchainsAssetsBetaApiListAssetsRequest
 */
export interface BlockchainsAssetsBetaApiListAssetsRequest {
    /**
     * Blockchain id of the assets
     * @type {string}
     * @memberof BlockchainsAssetsBetaApiListAssets
     */
    readonly blockchainId?: string

    /**
     * Assets class
     * @type {AssetClassBeta}
     * @memberof BlockchainsAssetsBetaApiListAssets
     */
    readonly assetClass?: AssetClassBeta

    /**
     * Assets onchain symbol
     * @type {string}
     * @memberof BlockchainsAssetsBetaApiListAssets
     */
    readonly symbol?: string

    /**
     * Scope of the assets
     * @type {'Global' | 'Local'}
     * @memberof BlockchainsAssetsBetaApiListAssets
     */
    readonly scope?: ListAssetsScopeEnum

    /**
     * Are assets deprecated
     * @type {boolean}
     * @memberof BlockchainsAssetsBetaApiListAssets
     */
    readonly deprecated?: boolean

    /**
     * Next page cursor to fetch
     * @type {string}
     * @memberof BlockchainsAssetsBetaApiListAssets
     */
    readonly pageCursor?: string

    /**
     * Items per page
     * @type {number}
     * @memberof BlockchainsAssetsBetaApiListAssets
     */
    readonly pageSize?: number

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof BlockchainsAssetsBetaApiListAssets
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for listBlockchains operation in BlockchainsAssetsBetaApi.
 * @export
 * @interface BlockchainsAssetsBetaApiListBlockchainsRequest
 */
export interface BlockchainsAssetsBetaApiListBlockchainsRequest {
    /**
     * Blockchain protocol
     * @type {string}
     * @memberof BlockchainsAssetsBetaApiListBlockchains
     */
    readonly protocol?: string

    /**
     * Is blockchain deprecated
     * @type {boolean}
     * @memberof BlockchainsAssetsBetaApiListBlockchains
     */
    readonly deprecated?: boolean

    /**
     * Is test blockchain
     * @type {boolean}
     * @memberof BlockchainsAssetsBetaApiListBlockchains
     */
    readonly test?: boolean

    /**
     * Page cursor to fetch
     * @type {string}
     * @memberof BlockchainsAssetsBetaApiListBlockchains
     */
    readonly pageCursor?: string

    /**
     * Items per page (max 500)
     * @type {number}
     * @memberof BlockchainsAssetsBetaApiListBlockchains
     */
    readonly pageSize?: number
}

/**
 * BlockchainsAssetsBetaApi - object-oriented interface
 * @export
 * @class BlockchainsAssetsBetaApi
 * @extends {BaseAPI}
 */
export class BlockchainsAssetsBetaApi extends BaseAPI {
    /**
     * Returns an asset by ID or legacyID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
     * @summary Get an asset
     * @param {BlockchainsAssetsBetaApiGetAssetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainsAssetsBetaApi
     */
    public getAssetById(requestParameters: BlockchainsAssetsBetaApiGetAssetByIdRequest) {
        return BlockchainsAssetsBetaApiFp(this.configuration).getAssetById(requestParameters.id, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns an blockchain by ID or legacyID.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
     * @summary Get an blockchain
     * @param {BlockchainsAssetsBetaApiGetBlockchainByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainsAssetsBetaApi
     */
    public getBlockchainById(requestParameters: BlockchainsAssetsBetaApiGetBlockchainByIdRequest) {
        return BlockchainsAssetsBetaApiFp(this.configuration).getBlockchainById(requestParameters.id).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns all asset type supported by Fireblocks.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
     * @summary List assets
     * @param {BlockchainsAssetsBetaApiListAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainsAssetsBetaApi
     */
    public listAssets(requestParameters: BlockchainsAssetsBetaApiListAssetsRequest = {}) {
        return BlockchainsAssetsBetaApiFp(this.configuration).listAssets(requestParameters.blockchainId, requestParameters.assetClass, requestParameters.symbol, requestParameters.scope, requestParameters.deprecated, requestParameters.pageCursor, requestParameters.pageSize, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns all blockchains supported by Fireblocks.</br>  **Note**: - This endpoint is now in Beta, disabled for general availability at this time. 
     * @summary List blockchains
     * @param {BlockchainsAssetsBetaApiListBlockchainsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainsAssetsBetaApi
     */
    public listBlockchains(requestParameters: BlockchainsAssetsBetaApiListBlockchainsRequest = {}) {
        return BlockchainsAssetsBetaApiFp(this.configuration).listBlockchains(requestParameters.protocol, requestParameters.deprecated, requestParameters.test, requestParameters.pageCursor, requestParameters.pageSize).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

/**
 * @export
 */
export const ListAssetsScopeEnum = {
    Global: 'Global',
    Local: 'Local'
} as const;
export type ListAssetsScopeEnum = typeof ListAssetsScopeEnum[keyof typeof ListAssetsScopeEnum];
