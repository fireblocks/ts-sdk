/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { CreateConsoleUser } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { ErrorSchema } from '../models';
/**
 * ConsoleUserApi - axios parameter creator
 * @export
 */
export const ConsoleUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * creates fireblocks console user
         * @summary create console user
         * @param {CreateConsoleUser} [createConsoleUser] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsoleUser: async (createConsoleUser?: CreateConsoleUser, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createConsoleUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get console users from the current tenant
         * @summary get console users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsoleUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/management/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConsoleUserApi - functional programming interface
 * @export
 */
export const ConsoleUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConsoleUserApiAxiosParamCreator(configuration)
    return {
        /**
         * creates fireblocks console user
         * @summary create console user
         * @param {CreateConsoleUser} [createConsoleUser] 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConsoleUser(createConsoleUser?: CreateConsoleUser, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConsoleUser(createConsoleUser, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConsoleUserApi.createConsoleUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * get console users from the current tenant
         * @summary get console users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConsoleUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConsoleUsers(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ConsoleUserApi.getConsoleUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ConsoleUserApi - factory interface
 * @export
 */
export const ConsoleUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConsoleUserApiFp(configuration)
    return {
        /**
         * creates fireblocks console user
         * @summary create console user
         * @param {ConsoleUserApiCreateConsoleUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConsoleUser(requestParameters: ConsoleUserApiCreateConsoleUserRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createConsoleUser(requestParameters.createConsoleUser, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * get console users from the current tenant
         * @summary get console users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConsoleUsers(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getConsoleUsers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createConsoleUser operation in ConsoleUserApi.
 * @export
 * @interface ConsoleUserApiCreateConsoleUserRequest
 */
export interface ConsoleUserApiCreateConsoleUserRequest {
    /**
     * 
     * @type {CreateConsoleUser}
     * @memberof ConsoleUserApiCreateConsoleUser
     */
    readonly createConsoleUser?: CreateConsoleUser

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ConsoleUserApiCreateConsoleUser
     */
    readonly idempotencyKey?: string
}

/**
 * ConsoleUserApi - object-oriented interface
 * @export
 * @class ConsoleUserApi
 * @extends {BaseAPI}
 */
export class ConsoleUserApi extends BaseAPI {
    /**
     * creates fireblocks console user
     * @summary create console user
     * @param {ConsoleUserApiCreateConsoleUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleUserApi
     */
    public createConsoleUser(requestParameters: ConsoleUserApiCreateConsoleUserRequest = {}) {
        return ConsoleUserApiFp(this.configuration).createConsoleUser(requestParameters.createConsoleUser, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * get console users from the current tenant
     * @summary get console users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleUserApi
     */
    public getConsoleUsers() {
        return ConsoleUserApiFp(this.configuration).getConsoleUsers().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

