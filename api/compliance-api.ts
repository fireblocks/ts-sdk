/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ScreeningConfigurationsRequest } from '../models';
// @ts-ignore
import { ScreeningPolicyResponse } from '../models';
// @ts-ignore
import { ScreeningProviderRulesConfigurationResponse } from '../models';
// @ts-ignore
import { ScreeningUpdateConfigurationsRequest } from '../models';
/**
 * ComplianceApi - axios parameter creator
 * @export
 */
export const ComplianceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the post-screening policy for AML.
         * @summary AML - View Post-Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmlPostScreeningPolicy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/screening/aml/post_screening_policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the screening policy for AML.
         * @summary AML - View Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmlScreeningPolicy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/screening/aml/screening_policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the post-screening policy for Travel Rule.
         * @summary Travel Rule - View Post-Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostScreeningPolicy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/screening/travel_rule/post_screening_policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the screening policy for Travel Rule.
         * @summary Travel Rule - View Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreeningPolicy: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/screening/travel_rule/screening_policy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates bypass screening, inbound delay, or outbound delay configurations for AML.
         * @summary Update AML Configuration
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAmlScreeningConfiguration: async (idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/screening/aml/policy_configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update tenant screening configuration.
         * @summary Tenant - Screening Configuration
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreeningConfiguration: async (idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/screening/configurations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates bypass screening, inbound delay, or outbound delay configurations for Travel Rule.
         * @summary Update Travel Rule Configuration
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTravelRuleConfig: async (idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/screening/travel_rule/policy_configuration`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ComplianceApi - functional programming interface
 * @export
 */
export const ComplianceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ComplianceApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the post-screening policy for AML.
         * @summary AML - View Post-Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmlPostScreeningPolicy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmlPostScreeningPolicy(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ComplianceApi.getAmlPostScreeningPolicy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the screening policy for AML.
         * @summary AML - View Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAmlScreeningPolicy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningProviderRulesConfigurationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAmlScreeningPolicy(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ComplianceApi.getAmlScreeningPolicy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the post-screening policy for Travel Rule.
         * @summary Travel Rule - View Post-Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostScreeningPolicy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningPolicyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostScreeningPolicy(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ComplianceApi.getPostScreeningPolicy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get the screening policy for Travel Rule.
         * @summary Travel Rule - View Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScreeningPolicy(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningProviderRulesConfigurationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScreeningPolicy(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ComplianceApi.getScreeningPolicy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Updates bypass screening, inbound delay, or outbound delay configurations for AML.
         * @summary Update AML Configuration
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAmlScreeningConfiguration(idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningConfigurationsRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAmlScreeningConfiguration(idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ComplianceApi.updateAmlScreeningConfiguration']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Update tenant screening configuration.
         * @summary Tenant - Screening Configuration
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScreeningConfiguration(idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningUpdateConfigurationsRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScreeningConfiguration(idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ComplianceApi.updateScreeningConfiguration']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Updates bypass screening, inbound delay, or outbound delay configurations for Travel Rule.
         * @summary Update Travel Rule Configuration
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTravelRuleConfig(idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreeningConfigurationsRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTravelRuleConfig(idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ComplianceApi.updateTravelRuleConfig']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ComplianceApi - factory interface
 * @export
 */
export const ComplianceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ComplianceApiFp(configuration)
    return {
        /**
         * Get the post-screening policy for AML.
         * @summary AML - View Post-Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmlPostScreeningPolicy(options?: RawAxiosRequestConfig): AxiosPromise<ScreeningPolicyResponse> {
            return localVarFp.getAmlPostScreeningPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the screening policy for AML.
         * @summary AML - View Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAmlScreeningPolicy(options?: RawAxiosRequestConfig): AxiosPromise<ScreeningProviderRulesConfigurationResponse> {
            return localVarFp.getAmlScreeningPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the post-screening policy for Travel Rule.
         * @summary Travel Rule - View Post-Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostScreeningPolicy(options?: RawAxiosRequestConfig): AxiosPromise<ScreeningPolicyResponse> {
            return localVarFp.getPostScreeningPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the screening policy for Travel Rule.
         * @summary Travel Rule - View Screening Policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScreeningPolicy(options?: RawAxiosRequestConfig): AxiosPromise<ScreeningProviderRulesConfigurationResponse> {
            return localVarFp.getScreeningPolicy(options).then((request) => request(axios, basePath));
        },
        /**
         * Updates bypass screening, inbound delay, or outbound delay configurations for AML.
         * @summary Update AML Configuration
         * @param {ComplianceApiUpdateAmlScreeningConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAmlScreeningConfiguration(requestParameters: ComplianceApiUpdateAmlScreeningConfigurationRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ScreeningConfigurationsRequest> {
            return localVarFp.updateAmlScreeningConfiguration(requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Update tenant screening configuration.
         * @summary Tenant - Screening Configuration
         * @param {ComplianceApiUpdateScreeningConfigurationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScreeningConfiguration(requestParameters: ComplianceApiUpdateScreeningConfigurationRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ScreeningUpdateConfigurationsRequest> {
            return localVarFp.updateScreeningConfiguration(requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates bypass screening, inbound delay, or outbound delay configurations for Travel Rule.
         * @summary Update Travel Rule Configuration
         * @param {ComplianceApiUpdateTravelRuleConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTravelRuleConfig(requestParameters: ComplianceApiUpdateTravelRuleConfigRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ScreeningConfigurationsRequest> {
            return localVarFp.updateTravelRuleConfig(requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updateAmlScreeningConfiguration operation in ComplianceApi.
 * @export
 * @interface ComplianceApiUpdateAmlScreeningConfigurationRequest
 */
export interface ComplianceApiUpdateAmlScreeningConfigurationRequest {
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ComplianceApiUpdateAmlScreeningConfiguration
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for updateScreeningConfiguration operation in ComplianceApi.
 * @export
 * @interface ComplianceApiUpdateScreeningConfigurationRequest
 */
export interface ComplianceApiUpdateScreeningConfigurationRequest {
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ComplianceApiUpdateScreeningConfiguration
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for updateTravelRuleConfig operation in ComplianceApi.
 * @export
 * @interface ComplianceApiUpdateTravelRuleConfigRequest
 */
export interface ComplianceApiUpdateTravelRuleConfigRequest {
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof ComplianceApiUpdateTravelRuleConfig
     */
    readonly idempotencyKey?: string
}

/**
 * ComplianceApi - object-oriented interface
 * @export
 * @class ComplianceApi
 * @extends {BaseAPI}
 */
export class ComplianceApi extends BaseAPI {
    /**
     * Get the post-screening policy for AML.
     * @summary AML - View Post-Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public getAmlPostScreeningPolicy() {
        return ComplianceApiFp(this.configuration).getAmlPostScreeningPolicy().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Get the screening policy for AML.
     * @summary AML - View Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public getAmlScreeningPolicy() {
        return ComplianceApiFp(this.configuration).getAmlScreeningPolicy().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Get the post-screening policy for Travel Rule.
     * @summary Travel Rule - View Post-Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public getPostScreeningPolicy() {
        return ComplianceApiFp(this.configuration).getPostScreeningPolicy().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Get the screening policy for Travel Rule.
     * @summary Travel Rule - View Screening Policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public getScreeningPolicy() {
        return ComplianceApiFp(this.configuration).getScreeningPolicy().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Updates bypass screening, inbound delay, or outbound delay configurations for AML.
     * @summary Update AML Configuration
     * @param {ComplianceApiUpdateAmlScreeningConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public updateAmlScreeningConfiguration(requestParameters: ComplianceApiUpdateAmlScreeningConfigurationRequest = {}) {
        return ComplianceApiFp(this.configuration).updateAmlScreeningConfiguration(requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Update tenant screening configuration.
     * @summary Tenant - Screening Configuration
     * @param {ComplianceApiUpdateScreeningConfigurationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public updateScreeningConfiguration(requestParameters: ComplianceApiUpdateScreeningConfigurationRequest = {}) {
        return ComplianceApiFp(this.configuration).updateScreeningConfiguration(requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Updates bypass screening, inbound delay, or outbound delay configurations for Travel Rule.
     * @summary Update Travel Rule Configuration
     * @param {ComplianceApiUpdateTravelRuleConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComplianceApi
     */
    public updateTravelRuleConfig(requestParameters: ComplianceApiUpdateTravelRuleConfigRequest = {}) {
        return ComplianceApiFp(this.configuration).updateTravelRuleConfig(requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

