/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";

// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { CreateInternalWalletAssetRequest } from '../models';
// @ts-ignore
import { CreateInternalWalletRequest } from '../models';
// @ts-ignore
import { SetCustomerRefIdForVaultAccountRequest } from '../models';
// @ts-ignore
import { UnmanagedWallet } from '../models';
// @ts-ignore
import { WalletAsset } from '../models';



    /**
 * InternalWalletsApi - axios parameter creator
 * @export
 */
export const InternalWalletsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new internal wallet with the requested name.
         * @summary Create an internal wallet
         * @param {CreateInternalWalletRequest} [createInternalWalletRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInternalWallet: async (createInternalWalletRequest?: CreateInternalWalletRequest, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/internal_wallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = createInternalWalletRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Adds an asset to an existing internal wallet.
         * @summary Add an asset to an internal wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to add
         * @param {CreateInternalWalletAssetRequest} [createInternalWalletAssetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInternalWalletAsset: async (walletId: string, assetId: string, createInternalWalletAssetRequest?: CreateInternalWalletAssetRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('createInternalWalletAsset', 'walletId', walletId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('createInternalWalletAsset', 'assetId', assetId)
            const localVarPath = `/internal_wallets/{walletId}/{assetId}`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = createInternalWalletAssetRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Deletes an internal wallet by ID.
         * @summary Delete an internal wallet
         * @param {string} walletId The ID of the wallet to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInternalWallet: async (walletId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('deleteInternalWallet', 'walletId', walletId)
            const localVarPath = `/internal_wallets/{walletId}`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'DELETE'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Deletes a whitelisted address (for an asset) from an internal wallet.
         * @summary Delete a whitelisted address from an internal wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInternalWalletAsset: async (walletId: string, assetId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('deleteInternalWalletAsset', 'walletId', walletId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('deleteInternalWalletAsset', 'assetId', assetId)
            const localVarPath = `/internal_wallets/{walletId}/{assetId}`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'DELETE'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns information for an asset in an internal wallet.
         * @summary Get an asset from an internal wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInternalWalletAsset: async (walletId: string, assetId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('getInternalWalletAsset', 'walletId', walletId)
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('getInternalWalletAsset', 'assetId', assetId)
            const localVarPath = `/internal_wallets/{walletId}/{assetId}`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)))
                .replace(`{${"assetId"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns all assets in an internal wallet by ID.
         * @summary Get assets for internal wallet
         * @param {string} walletId The ID of the wallet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInternalWalletById: async (walletId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('getInternalWalletById', 'walletId', walletId)
            const localVarPath = `/internal_wallets/{walletId}`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets a list of internal wallets.  **Note**: BTC-based assets belonging to whitelisted addresses cannot be retrieved between 00:00 UTC and 00:01 UTC daily due to third-party provider, Blockchair, being unavailable for this 60 second period. Please wait until the next minute to retrieve BTC-based assets. 
         * @summary List internal wallets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInternalWallets: async (): Promise<AxiosRequestConfig> => {
            const localVarPath = `/internal_wallets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Sets an AML/KYT customer reference ID for the specific internal wallet.
         * @summary Set an AML/KYT customer reference ID for an internal wallet
         * @param {SetCustomerRefIdForVaultAccountRequest} setCustomerRefIdForVaultAccountRequest 
         * @param {string} walletId The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCustomerRefIdForInternalWallet: async (setCustomerRefIdForVaultAccountRequest: SetCustomerRefIdForVaultAccountRequest, walletId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'setCustomerRefIdForVaultAccountRequest' is not null or undefined
            assertParamExists('setCustomerRefIdForInternalWallet', 'setCustomerRefIdForVaultAccountRequest', setCustomerRefIdForVaultAccountRequest)
            // verify required parameter 'walletId' is not null or undefined
            assertParamExists('setCustomerRefIdForInternalWallet', 'walletId', walletId)
            const localVarPath = `/internal_wallets/{walletId}/set_customer_ref_id`
                .replace(`{${"walletId"}}`, encodeURIComponent(String(walletId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = setCustomerRefIdForVaultAccountRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * InternalWalletsApi - functional programming interface
 * @export
 */
export const InternalWalletsApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = InternalWalletsApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * Creates a new internal wallet with the requested name.
         * @summary Create an internal wallet
         * @param {CreateInternalWalletRequest} [createInternalWalletRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInternalWallet(createInternalWalletRequest?: CreateInternalWalletRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInternalWallet(createInternalWalletRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Adds an asset to an existing internal wallet.
         * @summary Add an asset to an internal wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to add
         * @param {CreateInternalWalletAssetRequest} [createInternalWalletAssetRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInternalWalletAsset(walletId: string, assetId: string, createInternalWalletAssetRequest?: CreateInternalWalletAssetRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInternalWalletAsset(walletId, assetId, createInternalWalletAssetRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Deletes an internal wallet by ID.
         * @summary Delete an internal wallet
         * @param {string} walletId The ID of the wallet to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInternalWallet(walletId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInternalWallet(walletId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Deletes a whitelisted address (for an asset) from an internal wallet.
         * @summary Delete a whitelisted address from an internal wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInternalWalletAsset(walletId: string, assetId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInternalWalletAsset(walletId, assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns information for an asset in an internal wallet.
         * @summary Get an asset from an internal wallet
         * @param {string} walletId The ID of the wallet
         * @param {string} assetId The ID of the asset to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInternalWalletAsset(walletId: string, assetId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletAsset>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInternalWalletAsset(walletId, assetId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns all assets in an internal wallet by ID.
         * @summary Get assets for internal wallet
         * @param {string} walletId The ID of the wallet to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInternalWalletById(walletId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnmanagedWallet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInternalWalletById(walletId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets a list of internal wallets.  **Note**: BTC-based assets belonging to whitelisted addresses cannot be retrieved between 00:00 UTC and 00:01 UTC daily due to third-party provider, Blockchair, being unavailable for this 60 second period. Please wait until the next minute to retrieve BTC-based assets. 
         * @summary List internal wallets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInternalWallets(): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UnmanagedWallet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInternalWallets();
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Sets an AML/KYT customer reference ID for the specific internal wallet.
         * @summary Set an AML/KYT customer reference ID for an internal wallet
         * @param {SetCustomerRefIdForVaultAccountRequest} setCustomerRefIdForVaultAccountRequest 
         * @param {string} walletId The wallet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setCustomerRefIdForInternalWallet(setCustomerRefIdForVaultAccountRequest: SetCustomerRefIdForVaultAccountRequest, walletId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setCustomerRefIdForInternalWallet(setCustomerRefIdForVaultAccountRequest, walletId, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for createInternalWallet operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiCreateInternalWalletRequest
 */
export interface InternalWalletsApiCreateInternalWalletRequest {
    /**
     * 
     * @type {CreateInternalWalletRequest}
     * @memberof InternalWalletsApiCreateInternalWallet
     */
    readonly createInternalWalletRequest?: CreateInternalWalletRequest
}

/**
 * Request parameters for createInternalWalletAsset operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiCreateInternalWalletAssetRequest
 */
export interface InternalWalletsApiCreateInternalWalletAssetRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof InternalWalletsApiCreateInternalWalletAsset
     */
    readonly walletId: string

    /**
     * The ID of the asset to add
     * @type {string}
     * @memberof InternalWalletsApiCreateInternalWalletAsset
     */
    readonly assetId: string

    /**
     * 
     * @type {CreateInternalWalletAssetRequest}
     * @memberof InternalWalletsApiCreateInternalWalletAsset
     */
    readonly createInternalWalletAssetRequest?: CreateInternalWalletAssetRequest
}

/**
 * Request parameters for deleteInternalWallet operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiDeleteInternalWalletRequest
 */
export interface InternalWalletsApiDeleteInternalWalletRequest {
    /**
     * The ID of the wallet to delete
     * @type {string}
     * @memberof InternalWalletsApiDeleteInternalWallet
     */
    readonly walletId: string
}

/**
 * Request parameters for deleteInternalWalletAsset operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiDeleteInternalWalletAssetRequest
 */
export interface InternalWalletsApiDeleteInternalWalletAssetRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof InternalWalletsApiDeleteInternalWalletAsset
     */
    readonly walletId: string

    /**
     * The ID of the asset to delete
     * @type {string}
     * @memberof InternalWalletsApiDeleteInternalWalletAsset
     */
    readonly assetId: string
}

/**
 * Request parameters for getInternalWalletAsset operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiGetInternalWalletAssetRequest
 */
export interface InternalWalletsApiGetInternalWalletAssetRequest {
    /**
     * The ID of the wallet
     * @type {string}
     * @memberof InternalWalletsApiGetInternalWalletAsset
     */
    readonly walletId: string

    /**
     * The ID of the asset to return
     * @type {string}
     * @memberof InternalWalletsApiGetInternalWalletAsset
     */
    readonly assetId: string
}

/**
 * Request parameters for getInternalWalletById operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiGetInternalWalletByIdRequest
 */
export interface InternalWalletsApiGetInternalWalletByIdRequest {
    /**
     * The ID of the wallet to return
     * @type {string}
     * @memberof InternalWalletsApiGetInternalWalletById
     */
    readonly walletId: string
}

/**
 * Request parameters for setCustomerRefIdForInternalWallet operation in InternalWalletsApi.
 * @export
 * @interface InternalWalletsApiSetCustomerRefIdForInternalWalletRequest
 */
export interface InternalWalletsApiSetCustomerRefIdForInternalWalletRequest {
    /**
     * 
     * @type {SetCustomerRefIdForVaultAccountRequest}
     * @memberof InternalWalletsApiSetCustomerRefIdForInternalWallet
     */
    readonly setCustomerRefIdForVaultAccountRequest: SetCustomerRefIdForVaultAccountRequest

    /**
     * The wallet ID
     * @type {string}
     * @memberof InternalWalletsApiSetCustomerRefIdForInternalWallet
     */
    readonly walletId: string
}

/**
 * InternalWalletsApi - object-oriented interface
 * @export
 * @class InternalWalletsApi
 * @extends {BaseAPI}
 */
export class InternalWalletsApi extends BaseAPI {
    /**
     * Creates a new internal wallet with the requested name.
     * @summary Create an internal wallet
     * @param {InternalWalletsApiCreateInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    public createInternalWallet(requestParameters: InternalWalletsApiCreateInternalWalletRequest = {}, ) {
        return InternalWalletsApiFp(this.httpClient).createInternalWallet(requestParameters.createInternalWalletRequest, );
    }

    /**
     * Adds an asset to an existing internal wallet.
     * @summary Add an asset to an internal wallet
     * @param {InternalWalletsApiCreateInternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    public createInternalWalletAsset(requestParameters: InternalWalletsApiCreateInternalWalletAssetRequest, ) {
        return InternalWalletsApiFp(this.httpClient).createInternalWalletAsset(requestParameters.walletId, requestParameters.assetId, requestParameters.createInternalWalletAssetRequest, );
    }

    /**
     * Deletes an internal wallet by ID.
     * @summary Delete an internal wallet
     * @param {InternalWalletsApiDeleteInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    public deleteInternalWallet(requestParameters: InternalWalletsApiDeleteInternalWalletRequest, ) {
        return InternalWalletsApiFp(this.httpClient).deleteInternalWallet(requestParameters.walletId, );
    }

    /**
     * Deletes a whitelisted address (for an asset) from an internal wallet.
     * @summary Delete a whitelisted address from an internal wallet
     * @param {InternalWalletsApiDeleteInternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    public deleteInternalWalletAsset(requestParameters: InternalWalletsApiDeleteInternalWalletAssetRequest, ) {
        return InternalWalletsApiFp(this.httpClient).deleteInternalWalletAsset(requestParameters.walletId, requestParameters.assetId, );
    }

    /**
     * Returns information for an asset in an internal wallet.
     * @summary Get an asset from an internal wallet
     * @param {InternalWalletsApiGetInternalWalletAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    public getInternalWalletAsset(requestParameters: InternalWalletsApiGetInternalWalletAssetRequest, ) {
        return InternalWalletsApiFp(this.httpClient).getInternalWalletAsset(requestParameters.walletId, requestParameters.assetId, );
    }

    /**
     * Returns all assets in an internal wallet by ID.
     * @summary Get assets for internal wallet
     * @param {InternalWalletsApiGetInternalWalletByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    public getInternalWalletById(requestParameters: InternalWalletsApiGetInternalWalletByIdRequest, ) {
        return InternalWalletsApiFp(this.httpClient).getInternalWalletById(requestParameters.walletId, );
    }

    /**
     * Gets a list of internal wallets.  **Note**: BTC-based assets belonging to whitelisted addresses cannot be retrieved between 00:00 UTC and 00:01 UTC daily due to third-party provider, Blockchair, being unavailable for this 60 second period. Please wait until the next minute to retrieve BTC-based assets. 
     * @summary List internal wallets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    public getInternalWallets() {
        return InternalWalletsApiFp(this.httpClient).getInternalWallets();
    }

    /**
     * Sets an AML/KYT customer reference ID for the specific internal wallet.
     * @summary Set an AML/KYT customer reference ID for an internal wallet
     * @param {InternalWalletsApiSetCustomerRefIdForInternalWalletRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalWalletsApi
     */
    public setCustomerRefIdForInternalWallet(requestParameters: InternalWalletsApiSetCustomerRefIdForInternalWalletRequest, ) {
        return InternalWalletsApiFp(this.httpClient).setCustomerRefIdForInternalWallet(requestParameters.setCustomerRefIdForVaultAccountRequest, requestParameters.walletId, );
    }
}
