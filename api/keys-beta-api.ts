/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import { assertParamExistsAndNotEmpty } from '../utils/validation_utils';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ErrorSchema } from '../models';
// @ts-ignore
import { GetMpcKeysResponse } from '../models';
/**
 * KeysBetaApi - axios parameter creator
 * @export
 */
export const KeysBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of MPC signing keys of the workspace. For each key, the list of players associated with it is attached. **Note:**  This endpoint is currently in beta and might be subject to changes.
         * @summary Get list of mpc keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMpcKeysList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/keys/mpc/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of MPC signing keys of a specific user. For each key, the list of players associated with it is attached. **Note:** This endpoint is currently in beta and might be subject to changes.
         * @summary Get list of mpc keys by `userId`
         * @param {string} userId The id for the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMpcKeysListByUser: async (userId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            assertParamExistsAndNotEmpty('getMpcKeysListByUser', 'userId', userId)
            const localVarPath = `/keys/mpc/list/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeysBetaApi - functional programming interface
 * @export
 */
export const KeysBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KeysBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of MPC signing keys of the workspace. For each key, the list of players associated with it is attached. **Note:**  This endpoint is currently in beta and might be subject to changes.
         * @summary Get list of mpc keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMpcKeysList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMpcKeysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMpcKeysList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeysBetaApi.getMpcKeysList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns a list of MPC signing keys of a specific user. For each key, the list of players associated with it is attached. **Note:** This endpoint is currently in beta and might be subject to changes.
         * @summary Get list of mpc keys by `userId`
         * @param {string} userId The id for the user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMpcKeysListByUser(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMpcKeysResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMpcKeysListByUser(userId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['KeysBetaApi.getMpcKeysListByUser']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * KeysBetaApi - factory interface
 * @export
 */
export const KeysBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KeysBetaApiFp(configuration)
    return {
        /**
         * Returns a list of MPC signing keys of the workspace. For each key, the list of players associated with it is attached. **Note:**  This endpoint is currently in beta and might be subject to changes.
         * @summary Get list of mpc keys
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMpcKeysList(options?: RawAxiosRequestConfig): AxiosPromise<GetMpcKeysResponse> {
            return localVarFp.getMpcKeysList(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of MPC signing keys of a specific user. For each key, the list of players associated with it is attached. **Note:** This endpoint is currently in beta and might be subject to changes.
         * @summary Get list of mpc keys by `userId`
         * @param {KeysBetaApiGetMpcKeysListByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMpcKeysListByUser(requestParameters: KeysBetaApiGetMpcKeysListByUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetMpcKeysResponse> {
            return localVarFp.getMpcKeysListByUser(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMpcKeysListByUser operation in KeysBetaApi.
 * @export
 * @interface KeysBetaApiGetMpcKeysListByUserRequest
 */
export interface KeysBetaApiGetMpcKeysListByUserRequest {
    /**
     * The id for the user
     * @type {string}
     * @memberof KeysBetaApiGetMpcKeysListByUser
     */
    readonly userId: string
}

/**
 * KeysBetaApi - object-oriented interface
 * @export
 * @class KeysBetaApi
 * @extends {BaseAPI}
 */
export class KeysBetaApi extends BaseAPI {
    /**
     * Returns a list of MPC signing keys of the workspace. For each key, the list of players associated with it is attached. **Note:**  This endpoint is currently in beta and might be subject to changes.
     * @summary Get list of mpc keys
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeysBetaApi
     */
    public getMpcKeysList() {
        return KeysBetaApiFp(this.configuration).getMpcKeysList().then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Returns a list of MPC signing keys of a specific user. For each key, the list of players associated with it is attached. **Note:** This endpoint is currently in beta and might be subject to changes.
     * @summary Get list of mpc keys by `userId`
     * @param {KeysBetaApiGetMpcKeysListByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeysBetaApi
     */
    public getMpcKeysListByUser(requestParameters: KeysBetaApiGetMpcKeysListByUserRequest) {
        return KeysBetaApiFp(this.configuration).getMpcKeysListByUser(requestParameters.userId).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

