/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { CreateTransferTicketResponse } from '../model/createTransferTicketResponse';
    import { TransferTicketResponse } from '../model/transferTicketResponse';
    import { TransferTicketTermResponse } from '../model/transferTicketTermResponse';
    import { TransferTicketsPostRequest } from '../model/transferTicketsPostRequest';
    import { TransferTicketsTicketIdTermIdTransferPostRequest } from '../model/transferTicketsTicketIdTermIdTransferPostRequest';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class TransferTicketsApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Gets a list of transfer tickets.
                * @summary List transfer tickets
            */
        public async transferTicketsGet () : Promise<Array<TransferTicketResponse>> {
                const path = this.configuration.basePath + '/transfer_tickets';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<TransferTicketResponse>>(requestOptions);
        }
            /**
            * Creates a new transfer ticket.
                * @summary Create a new transfer ticket
                * @param transferTicketsPostRequest 
            */
        public async transferTicketsPost (transferTicketsPostRequest?: TransferTicketsPostRequest, ) : Promise<CreateTransferTicketResponse> {
                const path = this.configuration.basePath + '/transfer_tickets';
                let params: any = {};
                let headers: any = {}

                    if (typeof transferTicketsPostRequest === 'object') {
                        for( const [key,value] of Object.entries(transferTicketsPostRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['TransferTicketsPostRequest'] = ObjectSerializer.serialize(transferTicketsPostRequest, "TransferTicketsPostRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<CreateTransferTicketResponse>(requestOptions);
        }
            /**
            * Cancels a transfer ticket.
                * @summary Cancel a transfer ticket
                * @param ticketId The ID of the ticket
            */
        public async transferTicketsTicketIdCancelPost (ticketId: string, ) : Promise<any> {
                const path = this.configuration.basePath + '/transfer_tickets/{ticketId}/cancel'
                .replace('{' + 'ticketId' + '}', encodeURIComponent(String(ticketId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'ticketId' is not null or undefined
                        if (ticketId === null || ticketId === undefined) {
                        throw new Error('Required parameter ticketId was null or undefined when calling transferTicketsTicketIdCancelPost.');
                        }


                    if (typeof ticketId === 'object') {
                        for( const [key,value] of Object.entries(ticketId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['ticketId'] = ObjectSerializer.serialize(ticketId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            * Gets a specific transfer ticket by ticket ID.
                * @summary Get a transfer ticket by ticket ID
                * @param ticketId The ID of the ticket
            */
        public async transferTicketsTicketIdGet (ticketId: string, ) : Promise<TransferTicketResponse> {
                const path = this.configuration.basePath + '/transfer_tickets/{ticketId}'
                .replace('{' + 'ticketId' + '}', encodeURIComponent(String(ticketId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'ticketId' is not null or undefined
                        if (ticketId === null || ticketId === undefined) {
                        throw new Error('Required parameter ticketId was null or undefined when calling transferTicketsTicketIdGet.');
                        }


                    if (typeof ticketId === 'object') {
                        for( const [key,value] of Object.entries(ticketId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['ticketId'] = ObjectSerializer.serialize(ticketId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<TransferTicketResponse>(requestOptions);
        }
            /**
            * Gets the term of a transfer ticket by ticket ID and term ID.
                * @summary Get a term of a transfer ticket
                * @param ticketId The ID of the ticket
                * @param termId The ID of the term
            */
        public async transferTicketsTicketIdTermIdGet (ticketId: string, termId: string, ) : Promise<TransferTicketTermResponse> {
                const path = this.configuration.basePath + '/transfer_tickets/{ticketId}/{termId}'
                .replace('{' + 'ticketId' + '}', encodeURIComponent(String(ticketId)))
                .replace('{' + 'termId' + '}', encodeURIComponent(String(termId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'ticketId' is not null or undefined
                        if (ticketId === null || ticketId === undefined) {
                        throw new Error('Required parameter ticketId was null or undefined when calling transferTicketsTicketIdTermIdGet.');
                        }


                    if (typeof ticketId === 'object') {
                        for( const [key,value] of Object.entries(ticketId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['ticketId'] = ObjectSerializer.serialize(ticketId, "string");
                    }
                        // verify required parameter 'termId' is not null or undefined
                        if (termId === null || termId === undefined) {
                        throw new Error('Required parameter termId was null or undefined when calling transferTicketsTicketIdTermIdGet.');
                        }


                    if (typeof termId === 'object') {
                        for( const [key,value] of Object.entries(termId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['termId'] = ObjectSerializer.serialize(termId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<TransferTicketTermResponse>(requestOptions);
        }
            /**
            * Transfers a term for a transfer ticket.
                * @summary Transfer a term for a transfer ticket
                * @param ticketId The ID of the ticket
                * @param termId The ID of the term
                * @param transferTicketsTicketIdTermIdTransferPostRequest 
            */
        public async transferTicketsTicketIdTermIdTransferPost (ticketId: string, termId: string, transferTicketsTicketIdTermIdTransferPostRequest?: TransferTicketsTicketIdTermIdTransferPostRequest, ) : Promise<any> {
                const path = this.configuration.basePath + '/transfer_tickets/{ticketId}/{termId}/transfer'
                .replace('{' + 'ticketId' + '}', encodeURIComponent(String(ticketId)))
                .replace('{' + 'termId' + '}', encodeURIComponent(String(termId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'ticketId' is not null or undefined
                        if (ticketId === null || ticketId === undefined) {
                        throw new Error('Required parameter ticketId was null or undefined when calling transferTicketsTicketIdTermIdTransferPost.');
                        }


                    if (typeof ticketId === 'object') {
                        for( const [key,value] of Object.entries(ticketId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['ticketId'] = ObjectSerializer.serialize(ticketId, "string");
                    }
                        // verify required parameter 'termId' is not null or undefined
                        if (termId === null || termId === undefined) {
                        throw new Error('Required parameter termId was null or undefined when calling transferTicketsTicketIdTermIdTransferPost.');
                        }


                    if (typeof termId === 'object') {
                        for( const [key,value] of Object.entries(termId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['termId'] = ObjectSerializer.serialize(termId, "string");
                    }

                    if (typeof transferTicketsTicketIdTermIdTransferPostRequest === 'object') {
                        for( const [key,value] of Object.entries(transferTicketsTicketIdTermIdTransferPostRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['TransferTicketsTicketIdTermIdTransferPostRequest'] = ObjectSerializer.serialize(transferTicketsTicketIdTermIdTransferPostRequest, "TransferTicketsTicketIdTermIdTransferPostRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
        }
