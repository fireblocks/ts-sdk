/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { TravelRuleGetAllVASPsResponse } from '../models';
// @ts-ignore
import { TravelRuleUpdateVASPDetails } from '../models';
// @ts-ignore
import { TravelRuleVASP } from '../models';
// @ts-ignore
import { TravelRuleValidateFullTransactionRequest } from '../models';
// @ts-ignore
import { TravelRuleValidateTransactionRequest } from '../models';
// @ts-ignore
import { TravelRuleValidateTransactionResponse } from '../models';
/**
 * TravelRuleBetaApi - axios parameter creator
 * @export
 */
export const TravelRuleBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get VASP Details.  Returns information about a VASP that has the specified DID.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Get VASP details
         * @param {string} did 
         * @param {string} [fields] CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVASPByDID: async (did: string, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'did' is not null or undefined
            assertParamExists('getVASPByDID', 'did', did)
            const localVarPath = `/screening/travel_rule/vasp/{did}`
                .replace(`{${"did"}}`, encodeURIComponent(String(did)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted and results are paginated.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Get All VASPs
         * @param {string} [order] Field to order by
         * @param {number} [perPage] Records per page
         * @param {number} [page] Page number
         * @param {string} [fields] CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVASPs: async (order?: string, perPage?: number, page?: number, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/screening/travel_rule/vasp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Add jsonDidKey to VASP details
         * @param {TravelRuleUpdateVASPDetails} travelRuleUpdateVASPDetails 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelRuleApiControllerUpdateVasp: async (travelRuleUpdateVASPDetails: TravelRuleUpdateVASPDetails, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'travelRuleUpdateVASPDetails' is not null or undefined
            assertParamExists('travelRuleApiControllerUpdateVasp', 'travelRuleUpdateVASPDetails', travelRuleUpdateVASPDetails)
            const localVarPath = `/screening/travel_rule/vasp/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(travelRuleUpdateVASPDetails, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Validate Full Travel Rule Transaction
         * @param {TravelRuleValidateFullTransactionRequest} travelRuleValidateFullTransactionRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFullTravelRuleTransaction: async (travelRuleValidateFullTransactionRequest: TravelRuleValidateFullTransactionRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'travelRuleValidateFullTransactionRequest' is not null or undefined
            assertParamExists('validateFullTravelRuleTransaction', 'travelRuleValidateFullTransactionRequest', travelRuleValidateFullTransactionRequest)
            const localVarPath = `/screening/travel_rule/transaction/validate/full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(travelRuleValidateFullTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validate Travel Rule transactions.  Checks what beneficiary VASP details are required by your jurisdiction and the beneficiary\'s jurisdiction.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Validate Travel Rule Transaction
         * @param {TravelRuleValidateTransactionRequest} travelRuleValidateTransactionRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTravelRuleTransaction: async (travelRuleValidateTransactionRequest: TravelRuleValidateTransactionRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'travelRuleValidateTransactionRequest' is not null or undefined
            assertParamExists('validateTravelRuleTransaction', 'travelRuleValidateTransactionRequest', travelRuleValidateTransactionRequest)
            const localVarPath = `/screening/travel_rule/transaction/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(travelRuleValidateTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TravelRuleBetaApi - functional programming interface
 * @export
 */
export const TravelRuleBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TravelRuleBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Get VASP Details.  Returns information about a VASP that has the specified DID.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Get VASP details
         * @param {string} did 
         * @param {string} [fields] CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVASPByDID(did: string, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleVASP>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVASPByDID(did, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TravelRuleBetaApi.getVASPByDID']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted and results are paginated.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Get All VASPs
         * @param {string} [order] Field to order by
         * @param {number} [perPage] Records per page
         * @param {number} [page] Page number
         * @param {string} [fields] CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVASPs(order?: string, perPage?: number, page?: number, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleGetAllVASPsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVASPs(order, perPage, page, fields, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TravelRuleBetaApi.getVASPs']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Add jsonDidKey to VASP details
         * @param {TravelRuleUpdateVASPDetails} travelRuleUpdateVASPDetails 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async travelRuleApiControllerUpdateVasp(travelRuleUpdateVASPDetails: TravelRuleUpdateVASPDetails, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleUpdateVASPDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.travelRuleApiControllerUpdateVasp(travelRuleUpdateVASPDetails, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TravelRuleBetaApi.travelRuleApiControllerUpdateVasp']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Validate Full Travel Rule Transaction
         * @param {TravelRuleValidateFullTransactionRequest} travelRuleValidateFullTransactionRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateFullTravelRuleTransaction(travelRuleValidateFullTransactionRequest: TravelRuleValidateFullTransactionRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleValidateTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFullTravelRuleTransaction(travelRuleValidateFullTransactionRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TravelRuleBetaApi.validateFullTravelRuleTransaction']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Validate Travel Rule transactions.  Checks what beneficiary VASP details are required by your jurisdiction and the beneficiary\'s jurisdiction.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Validate Travel Rule Transaction
         * @param {TravelRuleValidateTransactionRequest} travelRuleValidateTransactionRequest 
         * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateTravelRuleTransaction(travelRuleValidateTransactionRequest: TravelRuleValidateTransactionRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TravelRuleValidateTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateTravelRuleTransaction(travelRuleValidateTransactionRequest, idempotencyKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TravelRuleBetaApi.validateTravelRuleTransaction']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TravelRuleBetaApi - factory interface
 * @export
 */
export const TravelRuleBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TravelRuleBetaApiFp(configuration)
    return {
        /**
         * Get VASP Details.  Returns information about a VASP that has the specified DID.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Get VASP details
         * @param {TravelRuleBetaApiGetVASPByDIDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVASPByDID(requestParameters: TravelRuleBetaApiGetVASPByDIDRequest, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleVASP> {
            return localVarFp.getVASPByDID(requestParameters.did, requestParameters.fields, options).then((request) => request(axios, basePath));
        },
        /**
         * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted and results are paginated.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Get All VASPs
         * @param {TravelRuleBetaApiGetVASPsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVASPs(requestParameters: TravelRuleBetaApiGetVASPsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleGetAllVASPsResponse> {
            return localVarFp.getVASPs(requestParameters.order, requestParameters.perPage, requestParameters.page, requestParameters.fields, options).then((request) => request(axios, basePath));
        },
        /**
         * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Add jsonDidKey to VASP details
         * @param {TravelRuleBetaApiTravelRuleApiControllerUpdateVaspRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        travelRuleApiControllerUpdateVasp(requestParameters: TravelRuleBetaApiTravelRuleApiControllerUpdateVaspRequest, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleUpdateVASPDetails> {
            return localVarFp.travelRuleApiControllerUpdateVasp(requestParameters.travelRuleUpdateVASPDetails, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Validate Full Travel Rule Transaction
         * @param {TravelRuleBetaApiValidateFullTravelRuleTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateFullTravelRuleTransaction(requestParameters: TravelRuleBetaApiValidateFullTravelRuleTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleValidateTransactionResponse> {
            return localVarFp.validateFullTravelRuleTransaction(requestParameters.travelRuleValidateFullTransactionRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
        /**
         * Validate Travel Rule transactions.  Checks what beneficiary VASP details are required by your jurisdiction and the beneficiary\'s jurisdiction.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
         * @summary Validate Travel Rule Transaction
         * @param {TravelRuleBetaApiValidateTravelRuleTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateTravelRuleTransaction(requestParameters: TravelRuleBetaApiValidateTravelRuleTransactionRequest, options?: RawAxiosRequestConfig): AxiosPromise<TravelRuleValidateTransactionResponse> {
            return localVarFp.validateTravelRuleTransaction(requestParameters.travelRuleValidateTransactionRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getVASPByDID operation in TravelRuleBetaApi.
 * @export
 * @interface TravelRuleBetaApiGetVASPByDIDRequest
 */
export interface TravelRuleBetaApiGetVASPByDIDRequest {
    /**
     * 
     * @type {string}
     * @memberof TravelRuleBetaApiGetVASPByDID
     */
    readonly did: string

    /**
     * CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
     * @type {string}
     * @memberof TravelRuleBetaApiGetVASPByDID
     */
    readonly fields?: string
}

/**
 * Request parameters for getVASPs operation in TravelRuleBetaApi.
 * @export
 * @interface TravelRuleBetaApiGetVASPsRequest
 */
export interface TravelRuleBetaApiGetVASPsRequest {
    /**
     * Field to order by
     * @type {string}
     * @memberof TravelRuleBetaApiGetVASPs
     */
    readonly order?: string

    /**
     * Records per page
     * @type {number}
     * @memberof TravelRuleBetaApiGetVASPs
     */
    readonly perPage?: number

    /**
     * Page number
     * @type {number}
     * @memberof TravelRuleBetaApiGetVASPs
     */
    readonly page?: number

    /**
     * CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below)
     * @type {string}
     * @memberof TravelRuleBetaApiGetVASPs
     */
    readonly fields?: string
}

/**
 * Request parameters for travelRuleApiControllerUpdateVasp operation in TravelRuleBetaApi.
 * @export
 * @interface TravelRuleBetaApiTravelRuleApiControllerUpdateVaspRequest
 */
export interface TravelRuleBetaApiTravelRuleApiControllerUpdateVaspRequest {
    /**
     * 
     * @type {TravelRuleUpdateVASPDetails}
     * @memberof TravelRuleBetaApiTravelRuleApiControllerUpdateVasp
     */
    readonly travelRuleUpdateVASPDetails: TravelRuleUpdateVASPDetails

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TravelRuleBetaApiTravelRuleApiControllerUpdateVasp
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for validateFullTravelRuleTransaction operation in TravelRuleBetaApi.
 * @export
 * @interface TravelRuleBetaApiValidateFullTravelRuleTransactionRequest
 */
export interface TravelRuleBetaApiValidateFullTravelRuleTransactionRequest {
    /**
     * 
     * @type {TravelRuleValidateFullTransactionRequest}
     * @memberof TravelRuleBetaApiValidateFullTravelRuleTransaction
     */
    readonly travelRuleValidateFullTransactionRequest: TravelRuleValidateFullTransactionRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TravelRuleBetaApiValidateFullTravelRuleTransaction
     */
    readonly idempotencyKey?: string
}

/**
 * Request parameters for validateTravelRuleTransaction operation in TravelRuleBetaApi.
 * @export
 * @interface TravelRuleBetaApiValidateTravelRuleTransactionRequest
 */
export interface TravelRuleBetaApiValidateTravelRuleTransactionRequest {
    /**
     * 
     * @type {TravelRuleValidateTransactionRequest}
     * @memberof TravelRuleBetaApiValidateTravelRuleTransaction
     */
    readonly travelRuleValidateTransactionRequest: TravelRuleValidateTransactionRequest

    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TravelRuleBetaApiValidateTravelRuleTransaction
     */
    readonly idempotencyKey?: string
}

/**
 * TravelRuleBetaApi - object-oriented interface
 * @export
 * @class TravelRuleBetaApi
 * @extends {BaseAPI}
 */
export class TravelRuleBetaApi extends BaseAPI {
    /**
     * Get VASP Details.  Returns information about a VASP that has the specified DID.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
     * @summary Get VASP details
     * @param {TravelRuleBetaApiGetVASPByDIDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleBetaApi
     */
    public getVASPByDID(requestParameters: TravelRuleBetaApiGetVASPByDIDRequest) {
        return TravelRuleBetaApiFp(this.configuration).getVASPByDID(requestParameters.did, requestParameters.fields).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted and results are paginated.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
     * @summary Get All VASPs
     * @param {TravelRuleBetaApiGetVASPsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleBetaApi
     */
    public getVASPs(requestParameters: TravelRuleBetaApiGetVASPsRequest = {}) {
        return TravelRuleBetaApiFp(this.configuration).getVASPs(requestParameters.order, requestParameters.perPage, requestParameters.page, requestParameters.fields).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
     * @summary Add jsonDidKey to VASP details
     * @param {TravelRuleBetaApiTravelRuleApiControllerUpdateVaspRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleBetaApi
     */
    public travelRuleApiControllerUpdateVasp(requestParameters: TravelRuleBetaApiTravelRuleApiControllerUpdateVaspRequest) {
        return TravelRuleBetaApiFp(this.configuration).travelRuleApiControllerUpdateVasp(requestParameters.travelRuleUpdateVASPDetails, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
     * @summary Validate Full Travel Rule Transaction
     * @param {TravelRuleBetaApiValidateFullTravelRuleTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleBetaApi
     */
    public validateFullTravelRuleTransaction(requestParameters: TravelRuleBetaApiValidateFullTravelRuleTransactionRequest) {
        return TravelRuleBetaApiFp(this.configuration).validateFullTravelRuleTransaction(requestParameters.travelRuleValidateFullTransactionRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }

    /**
     * Validate Travel Rule transactions.  Checks what beneficiary VASP details are required by your jurisdiction and the beneficiary\'s jurisdiction.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren\'t yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
     * @summary Validate Travel Rule Transaction
     * @param {TravelRuleBetaApiValidateTravelRuleTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TravelRuleBetaApi
     */
    public validateTravelRuleTransaction(requestParameters: TravelRuleBetaApiValidateTravelRuleTransactionRequest) {
        return TravelRuleBetaApiFp(this.configuration).validateTravelRuleTransaction(requestParameters.travelRuleValidateTransactionRequest, requestParameters.idempotencyKey).then((request) => request(this.axios, this.basePath)).then(convertToFireblocksResponse);
    }
}

