/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";

// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { CheckThirdPartyRoutingForNetworkConnection200Response } from '../models';
// @ts-ignore
import { CreateNetworkIdRequest } from '../models';
// @ts-ignore
import { GetNetworkIds200ResponseInner } from '../models';
// @ts-ignore
import { NetworkConnection } from '../models';
// @ts-ignore
import { NetworkConnectionResponse } from '../models';
// @ts-ignore
import { NetworkIdResponse } from '../models';
// @ts-ignore
import { SetDiscoverabilityForNetworkIdRequest } from '../models';
// @ts-ignore
import { SetNetworkIdNameRequest } from '../models';
// @ts-ignore
import { SetRoutingPolicyForNetworkConnection200Response } from '../models';
// @ts-ignore
import { SetRoutingPolicyForNetworkConnectionRequest } from '../models';
// @ts-ignore
import { SetRoutingPolicyForNetworkIdRequest } from '../models';



    /**
 * NetworkConnectionsApi - axios parameter creator
 * @export
 */
export const NetworkConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The Fireblocks Network allows for flexibility around incoming deposits. A receiver can receive network deposits to locations other than Fireblocks. This endpoint validates whether future transactions are routed to the displayed recipient or to a 3rd party.
         * @summary Retrieve third-party network routing validation by asset type.
         * @param {string} connectionId The ID of the network connection
         * @param {'CRYPTO' | 'SIGNET' | 'SEN' | 'SIGNET_TEST' | 'SEN_TEST'} assetType The destination asset type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkThirdPartyRoutingForNetworkConnection: async (connectionId: string, assetType: 'CRYPTO' | 'SIGNET' | 'SEN' | 'SIGNET_TEST' | 'SEN_TEST', ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'connectionId' is not null or undefined
            assertParamExists('checkThirdPartyRoutingForNetworkConnection', 'connectionId', connectionId)
            // verify required parameter 'assetType' is not null or undefined
            assertParamExists('checkThirdPartyRoutingForNetworkConnection', 'assetType', assetType)
            const localVarPath = `/network_connections/{connectionId}/is_third_party_routing/{assetType}`
                .replace(`{${"connectionId"}}`, encodeURIComponent(String(connectionId)))
                .replace(`{${"assetType"}}`, encodeURIComponent(String(assetType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Initiates a new network connection.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Creates a new network connection
         * @param {NetworkConnection} [networkConnection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNetworkConnection: async (networkConnection?: NetworkConnection, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/network_connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = networkConnection as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Creates a new Network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Creates a new Network ID
         * @param {CreateNetworkIdRequest} [createNetworkIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNetworkId: async (createNetworkIdRequest?: CreateNetworkIdRequest, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/network_ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = createNetworkIdRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Deletes an existing network connection specified by its connection ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Deletes a network connection by ID
         * @param {string} connectionId The ID of the network connection to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNetworkConnection: async (connectionId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'connectionId' is not null or undefined
            assertParamExists('deleteNetworkConnection', 'connectionId', connectionId)
            const localVarPath = `/network_connections/{connectionId}`
                .replace(`{${"connectionId"}}`, encodeURIComponent(String(connectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'DELETE'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Deletes a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Deletes specific network ID.
         * @param {string} networkId The ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNetworkId: async (networkId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'networkId' is not null or undefined
            assertParamExists('deleteNetworkId', 'networkId', networkId)
            const localVarPath = `/network_ids/{networkId}`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'DELETE'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets a network connection by ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Get a network connection
         * @param {string} connectionId The ID of the connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworkConnectionById: async (connectionId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'connectionId' is not null or undefined
            assertParamExists('getNetworkConnectionById', 'connectionId', connectionId)
            const localVarPath = `/network_connections/{connectionId}`
                .replace(`{${"connectionId"}}`, encodeURIComponent(String(connectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Returns all network connections.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary List network connections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworkConnections: async (): Promise<AxiosRequestConfig> => {
            const localVarPath = `/network_connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Retrieves a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Returns specific network ID.
         * @param {string} networkId The ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworkIdById: async (networkId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'networkId' is not null or undefined
            assertParamExists('getNetworkIdById', 'networkId', networkId)
            const localVarPath = `/network_ids/{networkId}`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all local and discoverable remote network IDs.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Returns all network IDs, both local IDs and discoverable remote IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworkIds: async (): Promise<AxiosRequestConfig> => {
            const localVarPath = `/network_ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Update whether or not the network ID is discoverable by others.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Update network ID\'s discoverability.
         * @param {SetDiscoverabilityForNetworkIdRequest} setDiscoverabilityForNetworkIdRequest 
         * @param {string} networkId The ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDiscoverabilityForNetworkId: async (setDiscoverabilityForNetworkIdRequest: SetDiscoverabilityForNetworkIdRequest, networkId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'setDiscoverabilityForNetworkIdRequest' is not null or undefined
            assertParamExists('setDiscoverabilityForNetworkId', 'setDiscoverabilityForNetworkIdRequest', setDiscoverabilityForNetworkIdRequest)
            // verify required parameter 'networkId' is not null or undefined
            assertParamExists('setDiscoverabilityForNetworkId', 'networkId', networkId)
            const localVarPath = `/network_ids/{networkId}/set_discoverability`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PATCH'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = setDiscoverabilityForNetworkIdRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Updates name of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Update network ID\'s name.
         * @param {SetNetworkIdNameRequest} setNetworkIdNameRequest 
         * @param {string} networkId The ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setNetworkIdName: async (setNetworkIdNameRequest: SetNetworkIdNameRequest, networkId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'setNetworkIdNameRequest' is not null or undefined
            assertParamExists('setNetworkIdName', 'setNetworkIdNameRequest', setNetworkIdNameRequest)
            // verify required parameter 'networkId' is not null or undefined
            assertParamExists('setNetworkIdName', 'networkId', networkId)
            const localVarPath = `/network_ids/{networkId}/set_name`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PATCH'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = setNetworkIdNameRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Updates an existing network connection\'s routing policy.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Update network connection routing policy.
         * @param {string} connectionId The ID of the network connection
         * @param {SetRoutingPolicyForNetworkConnectionRequest} [setRoutingPolicyForNetworkConnectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoutingPolicyForNetworkConnection: async (connectionId: string, setRoutingPolicyForNetworkConnectionRequest?: SetRoutingPolicyForNetworkConnectionRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'connectionId' is not null or undefined
            assertParamExists('setRoutingPolicyForNetworkConnection', 'connectionId', connectionId)
            const localVarPath = `/network_connections/{connectionId}/set_routing_policy`
                .replace(`{${"connectionId"}}`, encodeURIComponent(String(connectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PATCH'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = setRoutingPolicyForNetworkConnectionRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Updates the routing policy of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Update network id routing policy.
         * @param {string} networkId The ID of the network
         * @param {SetRoutingPolicyForNetworkIdRequest} [setRoutingPolicyForNetworkIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setRoutingPolicyForNetworkId: async (networkId: string, setRoutingPolicyForNetworkIdRequest?: SetRoutingPolicyForNetworkIdRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'networkId' is not null or undefined
            assertParamExists('setRoutingPolicyForNetworkId', 'networkId', networkId)
            const localVarPath = `/network_ids/{networkId}/set_routing_policy`
                .replace(`{${"networkId"}}`, encodeURIComponent(String(networkId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PATCH'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = setRoutingPolicyForNetworkIdRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * NetworkConnectionsApi - functional programming interface
 * @export
 */
export const NetworkConnectionsApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = NetworkConnectionsApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * The Fireblocks Network allows for flexibility around incoming deposits. A receiver can receive network deposits to locations other than Fireblocks. This endpoint validates whether future transactions are routed to the displayed recipient or to a 3rd party.
         * @summary Retrieve third-party network routing validation by asset type.
         * @param {string} connectionId The ID of the network connection
         * @param {'CRYPTO' | 'SIGNET' | 'SEN' | 'SIGNET_TEST' | 'SEN_TEST'} assetType The destination asset type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkThirdPartyRoutingForNetworkConnection(connectionId: string, assetType: 'CRYPTO' | 'SIGNET' | 'SEN' | 'SIGNET_TEST' | 'SEN_TEST', ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckThirdPartyRoutingForNetworkConnection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkThirdPartyRoutingForNetworkConnection(connectionId, assetType, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Initiates a new network connection.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Creates a new network connection
         * @param {NetworkConnection} [networkConnection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNetworkConnection(networkConnection?: NetworkConnection, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkConnectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNetworkConnection(networkConnection, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Creates a new Network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Creates a new Network ID
         * @param {CreateNetworkIdRequest} [createNetworkIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNetworkId(createNetworkIdRequest?: CreateNetworkIdRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNetworkId(createNetworkIdRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Deletes an existing network connection specified by its connection ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Deletes a network connection by ID
         * @param {string} connectionId The ID of the network connection to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNetworkConnection(connectionId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetRoutingPolicyForNetworkConnection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNetworkConnection(connectionId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Deletes a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Deletes specific network ID.
         * @param {string} networkId The ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNetworkId(networkId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetRoutingPolicyForNetworkConnection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNetworkId(networkId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets a network connection by ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Get a network connection
         * @param {string} connectionId The ID of the connection
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNetworkConnectionById(connectionId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkConnectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNetworkConnectionById(connectionId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Returns all network connections.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary List network connections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNetworkConnections(): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NetworkConnectionResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNetworkConnections();
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Retrieves a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Returns specific network ID.
         * @param {string} networkId The ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNetworkIdById(networkId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNetworkIdById(networkId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Retrieves a list of all local and discoverable remote network IDs.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Returns all network IDs, both local IDs and discoverable remote IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNetworkIds(): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GetNetworkIds200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNetworkIds();
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Update whether or not the network ID is discoverable by others.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Update network ID\'s discoverability.
         * @param {SetDiscoverabilityForNetworkIdRequest} setDiscoverabilityForNetworkIdRequest 
         * @param {string} networkId The ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDiscoverabilityForNetworkId(setDiscoverabilityForNetworkIdRequest: SetDiscoverabilityForNetworkIdRequest, networkId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetRoutingPolicyForNetworkConnection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDiscoverabilityForNetworkId(setDiscoverabilityForNetworkIdRequest, networkId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Updates name of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Update network ID\'s name.
         * @param {SetNetworkIdNameRequest} setNetworkIdNameRequest 
         * @param {string} networkId The ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setNetworkIdName(setNetworkIdNameRequest: SetNetworkIdNameRequest, networkId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetRoutingPolicyForNetworkConnection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setNetworkIdName(setNetworkIdNameRequest, networkId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Updates an existing network connection\'s routing policy.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Update network connection routing policy.
         * @param {string} connectionId The ID of the network connection
         * @param {SetRoutingPolicyForNetworkConnectionRequest} [setRoutingPolicyForNetworkConnectionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRoutingPolicyForNetworkConnection(connectionId: string, setRoutingPolicyForNetworkConnectionRequest?: SetRoutingPolicyForNetworkConnectionRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetRoutingPolicyForNetworkConnection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRoutingPolicyForNetworkConnection(connectionId, setRoutingPolicyForNetworkConnectionRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Updates the routing policy of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
         * @summary Update network id routing policy.
         * @param {string} networkId The ID of the network
         * @param {SetRoutingPolicyForNetworkIdRequest} [setRoutingPolicyForNetworkIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setRoutingPolicyForNetworkId(networkId: string, setRoutingPolicyForNetworkIdRequest?: SetRoutingPolicyForNetworkIdRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetRoutingPolicyForNetworkConnection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setRoutingPolicyForNetworkId(networkId, setRoutingPolicyForNetworkIdRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for checkThirdPartyRoutingForNetworkConnection operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiCheckThirdPartyRoutingForNetworkConnectionRequest
 */
export interface NetworkConnectionsApiCheckThirdPartyRoutingForNetworkConnectionRequest {
    /**
     * The ID of the network connection
     * @type {string}
     * @memberof NetworkConnectionsApiCheckThirdPartyRoutingForNetworkConnection
     */
    readonly connectionId: string

    /**
     * The destination asset type
     * @type {'CRYPTO' | 'SIGNET' | 'SEN' | 'SIGNET_TEST' | 'SEN_TEST'}
     * @memberof NetworkConnectionsApiCheckThirdPartyRoutingForNetworkConnection
     */
    readonly assetType: 'CRYPTO' | 'SIGNET' | 'SEN' | 'SIGNET_TEST' | 'SEN_TEST'
}

/**
 * Request parameters for createNetworkConnection operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiCreateNetworkConnectionRequest
 */
export interface NetworkConnectionsApiCreateNetworkConnectionRequest {
    /**
     * 
     * @type {NetworkConnection}
     * @memberof NetworkConnectionsApiCreateNetworkConnection
     */
    readonly networkConnection?: NetworkConnection
}

/**
 * Request parameters for createNetworkId operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiCreateNetworkIdRequest
 */
export interface NetworkConnectionsApiCreateNetworkIdRequest {
    /**
     * 
     * @type {CreateNetworkIdRequest}
     * @memberof NetworkConnectionsApiCreateNetworkId
     */
    readonly createNetworkIdRequest?: CreateNetworkIdRequest
}

/**
 * Request parameters for deleteNetworkConnection operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiDeleteNetworkConnectionRequest
 */
export interface NetworkConnectionsApiDeleteNetworkConnectionRequest {
    /**
     * The ID of the network connection to delete
     * @type {string}
     * @memberof NetworkConnectionsApiDeleteNetworkConnection
     */
    readonly connectionId: string
}

/**
 * Request parameters for deleteNetworkId operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiDeleteNetworkIdRequest
 */
export interface NetworkConnectionsApiDeleteNetworkIdRequest {
    /**
     * The ID of the network
     * @type {string}
     * @memberof NetworkConnectionsApiDeleteNetworkId
     */
    readonly networkId: string
}

/**
 * Request parameters for getNetworkConnectionById operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiGetNetworkConnectionByIdRequest
 */
export interface NetworkConnectionsApiGetNetworkConnectionByIdRequest {
    /**
     * The ID of the connection
     * @type {string}
     * @memberof NetworkConnectionsApiGetNetworkConnectionById
     */
    readonly connectionId: string
}

/**
 * Request parameters for getNetworkIdById operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiGetNetworkIdByIdRequest
 */
export interface NetworkConnectionsApiGetNetworkIdByIdRequest {
    /**
     * The ID of the network
     * @type {string}
     * @memberof NetworkConnectionsApiGetNetworkIdById
     */
    readonly networkId: string
}

/**
 * Request parameters for setDiscoverabilityForNetworkId operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiSetDiscoverabilityForNetworkIdRequest
 */
export interface NetworkConnectionsApiSetDiscoverabilityForNetworkIdRequest {
    /**
     * 
     * @type {SetDiscoverabilityForNetworkIdRequest}
     * @memberof NetworkConnectionsApiSetDiscoverabilityForNetworkId
     */
    readonly setDiscoverabilityForNetworkIdRequest: SetDiscoverabilityForNetworkIdRequest

    /**
     * The ID of the network
     * @type {string}
     * @memberof NetworkConnectionsApiSetDiscoverabilityForNetworkId
     */
    readonly networkId: string
}

/**
 * Request parameters for setNetworkIdName operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiSetNetworkIdNameRequest
 */
export interface NetworkConnectionsApiSetNetworkIdNameRequest {
    /**
     * 
     * @type {SetNetworkIdNameRequest}
     * @memberof NetworkConnectionsApiSetNetworkIdName
     */
    readonly setNetworkIdNameRequest: SetNetworkIdNameRequest

    /**
     * The ID of the network
     * @type {string}
     * @memberof NetworkConnectionsApiSetNetworkIdName
     */
    readonly networkId: string
}

/**
 * Request parameters for setRoutingPolicyForNetworkConnection operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiSetRoutingPolicyForNetworkConnectionRequest
 */
export interface NetworkConnectionsApiSetRoutingPolicyForNetworkConnectionRequest {
    /**
     * The ID of the network connection
     * @type {string}
     * @memberof NetworkConnectionsApiSetRoutingPolicyForNetworkConnection
     */
    readonly connectionId: string

    /**
     * 
     * @type {SetRoutingPolicyForNetworkConnectionRequest}
     * @memberof NetworkConnectionsApiSetRoutingPolicyForNetworkConnection
     */
    readonly setRoutingPolicyForNetworkConnectionRequest?: SetRoutingPolicyForNetworkConnectionRequest
}

/**
 * Request parameters for setRoutingPolicyForNetworkId operation in NetworkConnectionsApi.
 * @export
 * @interface NetworkConnectionsApiSetRoutingPolicyForNetworkIdRequest
 */
export interface NetworkConnectionsApiSetRoutingPolicyForNetworkIdRequest {
    /**
     * The ID of the network
     * @type {string}
     * @memberof NetworkConnectionsApiSetRoutingPolicyForNetworkId
     */
    readonly networkId: string

    /**
     * 
     * @type {SetRoutingPolicyForNetworkIdRequest}
     * @memberof NetworkConnectionsApiSetRoutingPolicyForNetworkId
     */
    readonly setRoutingPolicyForNetworkIdRequest?: SetRoutingPolicyForNetworkIdRequest
}

/**
 * NetworkConnectionsApi - object-oriented interface
 * @export
 * @class NetworkConnectionsApi
 * @extends {BaseAPI}
 */
export class NetworkConnectionsApi extends BaseAPI {
    /**
     * The Fireblocks Network allows for flexibility around incoming deposits. A receiver can receive network deposits to locations other than Fireblocks. This endpoint validates whether future transactions are routed to the displayed recipient or to a 3rd party.
     * @summary Retrieve third-party network routing validation by asset type.
     * @param {NetworkConnectionsApiCheckThirdPartyRoutingForNetworkConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public checkThirdPartyRoutingForNetworkConnection(requestParameters: NetworkConnectionsApiCheckThirdPartyRoutingForNetworkConnectionRequest, ) {
        return NetworkConnectionsApiFp(this.httpClient).checkThirdPartyRoutingForNetworkConnection(requestParameters.connectionId, requestParameters.assetType, );
    }

    /**
     * Initiates a new network connection.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Creates a new network connection
     * @param {NetworkConnectionsApiCreateNetworkConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public createNetworkConnection(requestParameters: NetworkConnectionsApiCreateNetworkConnectionRequest = {}, ) {
        return NetworkConnectionsApiFp(this.httpClient).createNetworkConnection(requestParameters.networkConnection, );
    }

    /**
     * Creates a new Network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Creates a new Network ID
     * @param {NetworkConnectionsApiCreateNetworkIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public createNetworkId(requestParameters: NetworkConnectionsApiCreateNetworkIdRequest = {}, ) {
        return NetworkConnectionsApiFp(this.httpClient).createNetworkId(requestParameters.createNetworkIdRequest, );
    }

    /**
     * Deletes an existing network connection specified by its connection ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Deletes a network connection by ID
     * @param {NetworkConnectionsApiDeleteNetworkConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public deleteNetworkConnection(requestParameters: NetworkConnectionsApiDeleteNetworkConnectionRequest, ) {
        return NetworkConnectionsApiFp(this.httpClient).deleteNetworkConnection(requestParameters.connectionId, );
    }

    /**
     * Deletes a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Deletes specific network ID.
     * @param {NetworkConnectionsApiDeleteNetworkIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public deleteNetworkId(requestParameters: NetworkConnectionsApiDeleteNetworkIdRequest, ) {
        return NetworkConnectionsApiFp(this.httpClient).deleteNetworkId(requestParameters.networkId, );
    }

    /**
     * Gets a network connection by ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Get a network connection
     * @param {NetworkConnectionsApiGetNetworkConnectionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public getNetworkConnectionById(requestParameters: NetworkConnectionsApiGetNetworkConnectionByIdRequest, ) {
        return NetworkConnectionsApiFp(this.httpClient).getNetworkConnectionById(requestParameters.connectionId, );
    }

    /**
     * Returns all network connections.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary List network connections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public getNetworkConnections() {
        return NetworkConnectionsApiFp(this.httpClient).getNetworkConnections();
    }

    /**
     * Retrieves a network by its ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Returns specific network ID.
     * @param {NetworkConnectionsApiGetNetworkIdByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public getNetworkIdById(requestParameters: NetworkConnectionsApiGetNetworkIdByIdRequest, ) {
        return NetworkConnectionsApiFp(this.httpClient).getNetworkIdById(requestParameters.networkId, );
    }

    /**
     * Retrieves a list of all local and discoverable remote network IDs.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Returns all network IDs, both local IDs and discoverable remote IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public getNetworkIds() {
        return NetworkConnectionsApiFp(this.httpClient).getNetworkIds();
    }

    /**
     * Update whether or not the network ID is discoverable by others.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Update network ID\'s discoverability.
     * @param {NetworkConnectionsApiSetDiscoverabilityForNetworkIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public setDiscoverabilityForNetworkId(requestParameters: NetworkConnectionsApiSetDiscoverabilityForNetworkIdRequest, ) {
        return NetworkConnectionsApiFp(this.httpClient).setDiscoverabilityForNetworkId(requestParameters.setDiscoverabilityForNetworkIdRequest, requestParameters.networkId, );
    }

    /**
     * Updates name of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Update network ID\'s name.
     * @param {NetworkConnectionsApiSetNetworkIdNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public setNetworkIdName(requestParameters: NetworkConnectionsApiSetNetworkIdNameRequest, ) {
        return NetworkConnectionsApiFp(this.httpClient).setNetworkIdName(requestParameters.setNetworkIdNameRequest, requestParameters.networkId, );
    }

    /**
     * Updates an existing network connection\'s routing policy.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Update network connection routing policy.
     * @param {NetworkConnectionsApiSetRoutingPolicyForNetworkConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public setRoutingPolicyForNetworkConnection(requestParameters: NetworkConnectionsApiSetRoutingPolicyForNetworkConnectionRequest, ) {
        return NetworkConnectionsApiFp(this.httpClient).setRoutingPolicyForNetworkConnection(requestParameters.connectionId, requestParameters.setRoutingPolicyForNetworkConnectionRequest, );
    }

    /**
     * Updates the routing policy of a specified network ID.  **Note:** This API call is subject to Flexible Routing Schemes.  Your routing policy defines how your transactions are routed. You can choose 1 of the 3 different schemes mentioned below for each asset type:   - **None**; Defines the profile routing to no destination for that asset type. Incoming transactions to asset types routed to `None` will fail.   - **Custom**; Route to an account that you choose. If you remove the account, incoming transactions will fail until you choose another one.   - **Default**; Use the routing specified by the network profile the connection is connected to. This scheme is also referred to as \"Profile Routing\"  Default Workspace Presets:   - Network Profile Crypto → **Custom**   - Network Profile FIAT → **None**   - Network Connection Crypto → **Default**   - Network Connection FIAT → **Default**      - **Note**: By default, Custom routing scheme uses (`dstId` = `0`, `dstType` = `VAULT`). 
     * @summary Update network id routing policy.
     * @param {NetworkConnectionsApiSetRoutingPolicyForNetworkIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkConnectionsApi
     */
    public setRoutingPolicyForNetworkId(requestParameters: NetworkConnectionsApiSetRoutingPolicyForNetworkIdRequest, ) {
        return NetworkConnectionsApiFp(this.httpClient).setRoutingPolicyForNetworkId(requestParameters.networkId, requestParameters.setRoutingPolicyForNetworkIdRequest, );
    }
}
