/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";

// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { CreateConnectionRequest } from '../models';
// @ts-ignore
import { CreateConnectionResponse } from '../models';
// @ts-ignore
import { GetConnectionsFilterParameter } from '../models';
// @ts-ignore
import { GetConnectionsResponse } from '../models';
// @ts-ignore
import { RespondToConnectionRequest } from '../models';



    /**
 * Web3ConnectionsApi - axios parameter creator
 * @export
 */
export const Web3ConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Initiate a new Web3 connection.  * Note: After this succeeds, make a request to `PUT /v1/connections/wc/{id}` (below) to approve or reject the new Web3 connection.
         * @summary Create a new Web3 connection.
         * @param {CreateConnectionRequest} createConnectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWCConnection: async (createConnectionRequest: CreateConnectionRequest, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'createConnectionRequest' is not null or undefined
            assertParamExists('createWCConnection', 'createConnectionRequest', createConnectionRequest)
            const localVarPath = `/connections/wc`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = createConnectionRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Remove a Web3 connection
         * @summary Remove an existing Web3 connection.
         * @param {string} id The ID of the existing Web3 connection to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWCConnection: async (id: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWCConnection', 'id', id)
            const localVarPath = `/connections/wc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'DELETE'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Get open Web3 connections.
         * @summary List all open Web3 connections.
         * @param {'ASC' | 'DESC'} [order] List order; ascending or descending.
         * @param {GetConnectionsFilterParameter} [filter] Parsed filter object
         * @param {'id' | 'userId' | 'vaultAccountId' | 'createdAt' | 'feeLevel' | 'appUrl' | 'appName'} [sort] Property to sort Web3 connections by.
         * @param {number} [pageSize] Amount of results to return in the next page.
         * @param {string} [next] Cursor to the next page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConnections: async (order?: 'ASC' | 'DESC', filter?: GetConnectionsFilterParameter, sort?: 'id' | 'userId' | 'vaultAccountId' | 'createdAt' | 'feeLevel' | 'appUrl' | 'appName', pageSize?: number, next?: string, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/connections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (next !== undefined) {
                localVarQueryParameter['next'] = next;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Submit a response to *approve* or *reject* an initiated Web3 connection. * Note: This call is used to complete your `POST /v1/connections/wc/` request.  After this succeeds, your new Web3 connection is created and functioning.
         * @summary Respond to a pending Web3 connection request.
         * @param {RespondToConnectionRequest} respondToConnectionRequest 
         * @param {string} id The ID of the initiated Web3 connection to approve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWCConnection: async (respondToConnectionRequest: RespondToConnectionRequest, id: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'respondToConnectionRequest' is not null or undefined
            assertParamExists('updateWCConnection', 'respondToConnectionRequest', respondToConnectionRequest)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWCConnection', 'id', id)
            const localVarPath = `/connections/wc/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PUT'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = respondToConnectionRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * Web3ConnectionsApi - functional programming interface
 * @export
 */
export const Web3ConnectionsApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = Web3ConnectionsApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * Initiate a new Web3 connection.  * Note: After this succeeds, make a request to `PUT /v1/connections/wc/{id}` (below) to approve or reject the new Web3 connection.
         * @summary Create a new Web3 connection.
         * @param {CreateConnectionRequest} createConnectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWCConnection(createConnectionRequest: CreateConnectionRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConnectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWCConnection(createConnectionRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Remove a Web3 connection
         * @summary Remove an existing Web3 connection.
         * @param {string} id The ID of the existing Web3 connection to remove.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWCConnection(id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWCConnection(id, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Get open Web3 connections.
         * @summary List all open Web3 connections.
         * @param {'ASC' | 'DESC'} [order] List order; ascending or descending.
         * @param {GetConnectionsFilterParameter} [filter] Parsed filter object
         * @param {'id' | 'userId' | 'vaultAccountId' | 'createdAt' | 'feeLevel' | 'appUrl' | 'appName'} [sort] Property to sort Web3 connections by.
         * @param {number} [pageSize] Amount of results to return in the next page.
         * @param {string} [next] Cursor to the next page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConnections(order?: 'ASC' | 'DESC', filter?: GetConnectionsFilterParameter, sort?: 'id' | 'userId' | 'vaultAccountId' | 'createdAt' | 'feeLevel' | 'appUrl' | 'appName', pageSize?: number, next?: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetConnectionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConnections(order, filter, sort, pageSize, next, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Submit a response to *approve* or *reject* an initiated Web3 connection. * Note: This call is used to complete your `POST /v1/connections/wc/` request.  After this succeeds, your new Web3 connection is created and functioning.
         * @summary Respond to a pending Web3 connection request.
         * @param {RespondToConnectionRequest} respondToConnectionRequest 
         * @param {string} id The ID of the initiated Web3 connection to approve.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWCConnection(respondToConnectionRequest: RespondToConnectionRequest, id: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWCConnection(respondToConnectionRequest, id, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for createWCConnection operation in Web3ConnectionsApi.
 * @export
 * @interface Web3ConnectionsApiCreateWCConnectionRequest
 */
export interface Web3ConnectionsApiCreateWCConnectionRequest {
    /**
     * 
     * @type {CreateConnectionRequest}
     * @memberof Web3ConnectionsApiCreateWCConnection
     */
    readonly createConnectionRequest: CreateConnectionRequest
}

/**
 * Request parameters for deleteWCConnection operation in Web3ConnectionsApi.
 * @export
 * @interface Web3ConnectionsApiDeleteWCConnectionRequest
 */
export interface Web3ConnectionsApiDeleteWCConnectionRequest {
    /**
     * The ID of the existing Web3 connection to remove.
     * @type {string}
     * @memberof Web3ConnectionsApiDeleteWCConnection
     */
    readonly id: string
}

/**
 * Request parameters for getConnections operation in Web3ConnectionsApi.
 * @export
 * @interface Web3ConnectionsApiGetConnectionsRequest
 */
export interface Web3ConnectionsApiGetConnectionsRequest {
    /**
     * List order; ascending or descending.
     * @type {'ASC' | 'DESC'}
     * @memberof Web3ConnectionsApiGetConnections
     */
    readonly order?: 'ASC' | 'DESC'

    /**
     * Parsed filter object
     * @type {GetConnectionsFilterParameter}
     * @memberof Web3ConnectionsApiGetConnections
     */
    readonly filter?: GetConnectionsFilterParameter

    /**
     * Property to sort Web3 connections by.
     * @type {'id' | 'userId' | 'vaultAccountId' | 'createdAt' | 'feeLevel' | 'appUrl' | 'appName'}
     * @memberof Web3ConnectionsApiGetConnections
     */
    readonly sort?: 'id' | 'userId' | 'vaultAccountId' | 'createdAt' | 'feeLevel' | 'appUrl' | 'appName'

    /**
     * Amount of results to return in the next page.
     * @type {number}
     * @memberof Web3ConnectionsApiGetConnections
     */
    readonly pageSize?: number

    /**
     * Cursor to the next page
     * @type {string}
     * @memberof Web3ConnectionsApiGetConnections
     */
    readonly next?: string
}

/**
 * Request parameters for updateWCConnection operation in Web3ConnectionsApi.
 * @export
 * @interface Web3ConnectionsApiUpdateWCConnectionRequest
 */
export interface Web3ConnectionsApiUpdateWCConnectionRequest {
    /**
     * 
     * @type {RespondToConnectionRequest}
     * @memberof Web3ConnectionsApiUpdateWCConnection
     */
    readonly respondToConnectionRequest: RespondToConnectionRequest

    /**
     * The ID of the initiated Web3 connection to approve.
     * @type {string}
     * @memberof Web3ConnectionsApiUpdateWCConnection
     */
    readonly id: string
}

/**
 * Web3ConnectionsApi - object-oriented interface
 * @export
 * @class Web3ConnectionsApi
 * @extends {BaseAPI}
 */
export class Web3ConnectionsApi extends BaseAPI {
    /**
     * Initiate a new Web3 connection.  * Note: After this succeeds, make a request to `PUT /v1/connections/wc/{id}` (below) to approve or reject the new Web3 connection.
     * @summary Create a new Web3 connection.
     * @param {Web3ConnectionsApiCreateWCConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3ConnectionsApi
     */
    public createWCConnection(requestParameters: Web3ConnectionsApiCreateWCConnectionRequest, ) {
        return Web3ConnectionsApiFp(this.httpClient).createWCConnection(requestParameters.createConnectionRequest, );
    }

    /**
     * Remove a Web3 connection
     * @summary Remove an existing Web3 connection.
     * @param {Web3ConnectionsApiDeleteWCConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3ConnectionsApi
     */
    public deleteWCConnection(requestParameters: Web3ConnectionsApiDeleteWCConnectionRequest, ) {
        return Web3ConnectionsApiFp(this.httpClient).deleteWCConnection(requestParameters.id, );
    }

    /**
     * Get open Web3 connections.
     * @summary List all open Web3 connections.
     * @param {Web3ConnectionsApiGetConnectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3ConnectionsApi
     */
    public getConnections(requestParameters: Web3ConnectionsApiGetConnectionsRequest = {}, ) {
        return Web3ConnectionsApiFp(this.httpClient).getConnections(requestParameters.order, requestParameters.filter, requestParameters.sort, requestParameters.pageSize, requestParameters.next, );
    }

    /**
     * Submit a response to *approve* or *reject* an initiated Web3 connection. * Note: This call is used to complete your `POST /v1/connections/wc/` request.  After this succeeds, your new Web3 connection is created and functioning.
     * @summary Respond to a pending Web3 connection request.
     * @param {Web3ConnectionsApiUpdateWCConnectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Web3ConnectionsApi
     */
    public updateWCConnection(requestParameters: Web3ConnectionsApiUpdateWCConnectionRequest, ) {
        return Web3ConnectionsApiFp(this.httpClient).updateWCConnection(requestParameters.respondToConnectionRequest, requestParameters.id, );
    }
}
