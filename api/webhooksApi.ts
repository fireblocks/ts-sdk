/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { ResendWebhooksForTransactionRequest } from '../model/resendWebhooksForTransactionRequest';
    import { ResendWebhooksResponse } from '../model/resendWebhooksResponse';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class WebhooksApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Resends all failed webhook notifications.
                * @summary Resend failed webhooks
            */
        public async resendWebhooks () : Promise<ResendWebhooksResponse> {
                const path = this.configuration.basePath + '/webhooks/resend';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                };
                return this.httpClient.request<ResendWebhooksResponse>(requestOptions);
        }
            /**
            * Resends failed webhook notifications for a transaction by ID.
                * @summary Resend failed webhooks for a transaction by ID
                * @param txId The ID of the transaction for webhooks
                * @param resendWebhooksForTransactionRequest 
            */
        public async resendWebhooksForTransaction (txId: string, resendWebhooksForTransactionRequest: ResendWebhooksForTransactionRequest, ) : Promise<any> {
                const path = this.configuration.basePath + '/webhooks/resend/{txId}'
                .replace('{' + 'txId' + '}', encodeURIComponent(String(txId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'txId' is not null or undefined
                        if (txId === null || txId === undefined) {
                        throw new Error('Required parameter txId was null or undefined when calling resendWebhooksForTransaction.');
                        }


                    if (typeof txId === 'object') {
                        for( const [key,value] of Object.entries(txId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['txId'] = ObjectSerializer.serialize(txId, "string");
                    }
                        // verify required parameter 'resendWebhooksForTransactionRequest' is not null or undefined
                        if (resendWebhooksForTransactionRequest === null || resendWebhooksForTransactionRequest === undefined) {
                        throw new Error('Required parameter resendWebhooksForTransactionRequest was null or undefined when calling resendWebhooksForTransaction.');
                        }


                    if (typeof resendWebhooksForTransactionRequest === 'object') {
                        for( const [key,value] of Object.entries(resendWebhooksForTransactionRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['ResendWebhooksForTransactionRequest'] = ObjectSerializer.serialize(resendWebhooksForTransactionRequest, "ResendWebhooksForTransactionRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
        }
