/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";

// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { XBSettlementConfigCreationRequestBody } from '../models';
// @ts-ignore
import { XBSettlementConfigEditRequestBody } from '../models';
// @ts-ignore
import { XBSettlementConfigModel } from '../models';
// @ts-ignore
import { XBSettlementCreateFlowRequestBody } from '../models';
// @ts-ignore
import { XBSettlementFlowExecutionModel } from '../models';
// @ts-ignore
import { XBSettlementFlowExecutionRequestBody } from '../models';
// @ts-ignore
import { XBSettlementFlowPreviewModel } from '../models';
// @ts-ignore
import { XBSettlementGetAllConfigsResponse } from '../models';
// @ts-ignore
import { XBSettlementGetFlowResponse } from '../models';



    /**
 * PaymentsCrossBorderSettlementApi - axios parameter creator
 * @export
 */
export const PaymentsCrossBorderSettlementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <u><b>Create a new cross-border settlement configuration. </u></b></br>Configurations define the default assets, on-ramps, and off-ramps to use for the cross-border settlement. </br>  A configuration must contain at least two steps - `ON_RAMP` and `VAULT_ACCOUNT`. </br> All other steps (e.g., `OFF_RAMP`, `FIAT_DESTINATION`, etc.) are optional. </br> Every step must include the `accountId` to be used, while `inputAssetId` and `outputAssetId` are optional.  If those are not provided, a default value will be used from the Corridor Settings.</br> If the inputAssetId or the outputAssetId is provided for one of the objects, all assets in the objects must be consistent. For example, if the output asset of ON_RAMP is XLM_USDC_5F3T, then the input asset of the VAULT_ACCOUNT must also be XLM_USDC_5F3T..</br> You can set a slippage amount for your configuration. Slippage is defined by basis points (bps). This value can be overloaded on execution. If you do not configure a slippage amount, the default slippage of 10000 bps (10%) is used. </br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Create a new cross-border settlement configuration
         * @param {XBSettlementConfigCreationRequestBody} [xBSettlementConfigCreationRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createXBSettlementConfig: async (xBSettlementConfigCreationRequestBody?: XBSettlementConfigCreationRequestBody, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/payments/xb-settlements/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = xBSettlementConfigCreationRequestBody as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Create a cross-border flow (based on a cross-border configuration) with an amount to transfer.  The assetId is defined by the cross-border configuration. Creating a flow triggers a calculation of the flow estimations, including FX rates, times, and fees based on the amount provided. Creating a cross-border flow will not execute the flow.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Create a new cross-border settlement flow
         * @param {XBSettlementCreateFlowRequestBody} [xBSettlementCreateFlowRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createXBSettlementFlow: async (xBSettlementCreateFlowRequestBody?: XBSettlementCreateFlowRequestBody, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/payments/xb-settlements/flows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = xBSettlementCreateFlowRequestBody as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Delete a cross-border settlement configuration. This does not delete or remove previously executed flows that used this configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Delete a cross-border settlement configuration
         * @param {string} configId The cross-border settlement configuration ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteXBSettlementConfig: async (configId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('deleteXBSettlementConfig', 'configId', configId)
            const localVarPath = `/payments/xb-settlements/configs/{configId}`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'DELETE'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Send a payment flow with \'flowId\' for execution. If a differet slippage configuraion is needed for this execution than configured in the flow configuration, the request body must define the desired slippage configuration for this execution.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Execute cross-border settlement flow
         * @param {string} flowId The cross-border settlement flow ID.
         * @param {XBSettlementFlowExecutionRequestBody} [xBSettlementFlowExecutionRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executeXBSettlementFlowAction: async (flowId: string, xBSettlementFlowExecutionRequestBody?: XBSettlementFlowExecutionRequestBody, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'flowId' is not null or undefined
            assertParamExists('executeXBSettlementFlowAction', 'flowId', flowId)
            const localVarPath = `/payments/xb-settlements/flows/{flowId}/actions/execute`
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = xBSettlementFlowExecutionRequestBody as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Get a specific cross-border settlement configuration.</br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get a specific cross-border settlement configuration
         * @param {string} configId The cross-border settlement configuration ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getXBSettlementConfigById: async (configId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('getXBSettlementConfigById', 'configId', configId)
            const localVarPath = `/payments/xb-settlements/configs/{configId}`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Get all the cross-border settlement configurations. </br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get all the cross-border settlement configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getXBSettlementConfigs: async (): Promise<AxiosRequestConfig> => {
            const localVarPath = `/payments/xb-settlements/configs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Gets details for a specific cross-border settlement flow **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get specific cross-border settlement flow details
         * @param {string} flowId The cross-border settlement flow ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getXBSettlementFlowById: async (flowId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'flowId' is not null or undefined
            assertParamExists('getXBSettlementFlowById', 'flowId', flowId)
            const localVarPath = `/payments/xb-settlements/flows/{flowId}`
                .replace(`{${"flowId"}}`, encodeURIComponent(String(flowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * Edit a cross-border settlement configuration. Editing a configuration does not affect previously executed flows that used the configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Edit a cross-border settlement configuration
         * @param {string} configId The cross-border settlement configuration ID.
         * @param {XBSettlementConfigEditRequestBody} [xBSettlementConfigEditRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateXBSettlementConfig: async (configId: string, xBSettlementConfigEditRequestBody?: XBSettlementConfigEditRequestBody, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'configId' is not null or undefined
            assertParamExists('updateXBSettlementConfig', 'configId', configId)
            const localVarPath = `/payments/xb-settlements/configs/{configId}`
                .replace(`{${"configId"}}`, encodeURIComponent(String(configId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'PUT'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = xBSettlementConfigEditRequestBody as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsCrossBorderSettlementApi - functional programming interface
 * @export
 */
export const PaymentsCrossBorderSettlementApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = PaymentsCrossBorderSettlementApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * <u><b>Create a new cross-border settlement configuration. </u></b></br>Configurations define the default assets, on-ramps, and off-ramps to use for the cross-border settlement. </br>  A configuration must contain at least two steps - `ON_RAMP` and `VAULT_ACCOUNT`. </br> All other steps (e.g., `OFF_RAMP`, `FIAT_DESTINATION`, etc.) are optional. </br> Every step must include the `accountId` to be used, while `inputAssetId` and `outputAssetId` are optional.  If those are not provided, a default value will be used from the Corridor Settings.</br> If the inputAssetId or the outputAssetId is provided for one of the objects, all assets in the objects must be consistent. For example, if the output asset of ON_RAMP is XLM_USDC_5F3T, then the input asset of the VAULT_ACCOUNT must also be XLM_USDC_5F3T..</br> You can set a slippage amount for your configuration. Slippage is defined by basis points (bps). This value can be overloaded on execution. If you do not configure a slippage amount, the default slippage of 10000 bps (10%) is used. </br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Create a new cross-border settlement configuration
         * @param {XBSettlementConfigCreationRequestBody} [xBSettlementConfigCreationRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createXBSettlementConfig(xBSettlementConfigCreationRequestBody?: XBSettlementConfigCreationRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XBSettlementConfigModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createXBSettlementConfig(xBSettlementConfigCreationRequestBody, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Create a cross-border flow (based on a cross-border configuration) with an amount to transfer.  The assetId is defined by the cross-border configuration. Creating a flow triggers a calculation of the flow estimations, including FX rates, times, and fees based on the amount provided. Creating a cross-border flow will not execute the flow.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Create a new cross-border settlement flow
         * @param {XBSettlementCreateFlowRequestBody} [xBSettlementCreateFlowRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createXBSettlementFlow(xBSettlementCreateFlowRequestBody?: XBSettlementCreateFlowRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XBSettlementFlowPreviewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createXBSettlementFlow(xBSettlementCreateFlowRequestBody, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Delete a cross-border settlement configuration. This does not delete or remove previously executed flows that used this configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Delete a cross-border settlement configuration
         * @param {string} configId The cross-border settlement configuration ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteXBSettlementConfig(configId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XBSettlementConfigModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteXBSettlementConfig(configId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Send a payment flow with \'flowId\' for execution. If a differet slippage configuraion is needed for this execution than configured in the flow configuration, the request body must define the desired slippage configuration for this execution.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Execute cross-border settlement flow
         * @param {string} flowId The cross-border settlement flow ID.
         * @param {XBSettlementFlowExecutionRequestBody} [xBSettlementFlowExecutionRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executeXBSettlementFlowAction(flowId: string, xBSettlementFlowExecutionRequestBody?: XBSettlementFlowExecutionRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XBSettlementFlowExecutionModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executeXBSettlementFlowAction(flowId, xBSettlementFlowExecutionRequestBody, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Get a specific cross-border settlement configuration.</br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get a specific cross-border settlement configuration
         * @param {string} configId The cross-border settlement configuration ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getXBSettlementConfigById(configId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XBSettlementConfigModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getXBSettlementConfigById(configId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Get all the cross-border settlement configurations. </br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get all the cross-border settlement configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getXBSettlementConfigs(): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XBSettlementGetAllConfigsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getXBSettlementConfigs();
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Gets details for a specific cross-border settlement flow **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Get specific cross-border settlement flow details
         * @param {string} flowId The cross-border settlement flow ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getXBSettlementFlowById(flowId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XBSettlementGetFlowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getXBSettlementFlowById(flowId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * Edit a cross-border settlement configuration. Editing a configuration does not affect previously executed flows that used the configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
         * @summary Edit a cross-border settlement configuration
         * @param {string} configId The cross-border settlement configuration ID.
         * @param {XBSettlementConfigEditRequestBody} [xBSettlementConfigEditRequestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateXBSettlementConfig(configId: string, xBSettlementConfigEditRequestBody?: XBSettlementConfigEditRequestBody, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<XBSettlementConfigModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateXBSettlementConfig(configId, xBSettlementConfigEditRequestBody, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for createXBSettlementConfig operation in PaymentsCrossBorderSettlementApi.
 * @export
 * @interface PaymentsCrossBorderSettlementApiCreateXBSettlementConfigRequest
 */
export interface PaymentsCrossBorderSettlementApiCreateXBSettlementConfigRequest {
    /**
     * 
     * @type {XBSettlementConfigCreationRequestBody}
     * @memberof PaymentsCrossBorderSettlementApiCreateXBSettlementConfig
     */
    readonly xBSettlementConfigCreationRequestBody?: XBSettlementConfigCreationRequestBody
}

/**
 * Request parameters for createXBSettlementFlow operation in PaymentsCrossBorderSettlementApi.
 * @export
 * @interface PaymentsCrossBorderSettlementApiCreateXBSettlementFlowRequest
 */
export interface PaymentsCrossBorderSettlementApiCreateXBSettlementFlowRequest {
    /**
     * 
     * @type {XBSettlementCreateFlowRequestBody}
     * @memberof PaymentsCrossBorderSettlementApiCreateXBSettlementFlow
     */
    readonly xBSettlementCreateFlowRequestBody?: XBSettlementCreateFlowRequestBody
}

/**
 * Request parameters for deleteXBSettlementConfig operation in PaymentsCrossBorderSettlementApi.
 * @export
 * @interface PaymentsCrossBorderSettlementApiDeleteXBSettlementConfigRequest
 */
export interface PaymentsCrossBorderSettlementApiDeleteXBSettlementConfigRequest {
    /**
     * The cross-border settlement configuration ID.
     * @type {string}
     * @memberof PaymentsCrossBorderSettlementApiDeleteXBSettlementConfig
     */
    readonly configId: string
}

/**
 * Request parameters for executeXBSettlementFlowAction operation in PaymentsCrossBorderSettlementApi.
 * @export
 * @interface PaymentsCrossBorderSettlementApiExecuteXBSettlementFlowActionRequest
 */
export interface PaymentsCrossBorderSettlementApiExecuteXBSettlementFlowActionRequest {
    /**
     * The cross-border settlement flow ID.
     * @type {string}
     * @memberof PaymentsCrossBorderSettlementApiExecuteXBSettlementFlowAction
     */
    readonly flowId: string

    /**
     * 
     * @type {XBSettlementFlowExecutionRequestBody}
     * @memberof PaymentsCrossBorderSettlementApiExecuteXBSettlementFlowAction
     */
    readonly xBSettlementFlowExecutionRequestBody?: XBSettlementFlowExecutionRequestBody
}

/**
 * Request parameters for getXBSettlementConfigById operation in PaymentsCrossBorderSettlementApi.
 * @export
 * @interface PaymentsCrossBorderSettlementApiGetXBSettlementConfigByIdRequest
 */
export interface PaymentsCrossBorderSettlementApiGetXBSettlementConfigByIdRequest {
    /**
     * The cross-border settlement configuration ID.
     * @type {string}
     * @memberof PaymentsCrossBorderSettlementApiGetXBSettlementConfigById
     */
    readonly configId: string
}

/**
 * Request parameters for getXBSettlementFlowById operation in PaymentsCrossBorderSettlementApi.
 * @export
 * @interface PaymentsCrossBorderSettlementApiGetXBSettlementFlowByIdRequest
 */
export interface PaymentsCrossBorderSettlementApiGetXBSettlementFlowByIdRequest {
    /**
     * The cross-border settlement flow ID.
     * @type {string}
     * @memberof PaymentsCrossBorderSettlementApiGetXBSettlementFlowById
     */
    readonly flowId: string
}

/**
 * Request parameters for updateXBSettlementConfig operation in PaymentsCrossBorderSettlementApi.
 * @export
 * @interface PaymentsCrossBorderSettlementApiUpdateXBSettlementConfigRequest
 */
export interface PaymentsCrossBorderSettlementApiUpdateXBSettlementConfigRequest {
    /**
     * The cross-border settlement configuration ID.
     * @type {string}
     * @memberof PaymentsCrossBorderSettlementApiUpdateXBSettlementConfig
     */
    readonly configId: string

    /**
     * 
     * @type {XBSettlementConfigEditRequestBody}
     * @memberof PaymentsCrossBorderSettlementApiUpdateXBSettlementConfig
     */
    readonly xBSettlementConfigEditRequestBody?: XBSettlementConfigEditRequestBody
}

/**
 * PaymentsCrossBorderSettlementApi - object-oriented interface
 * @export
 * @class PaymentsCrossBorderSettlementApi
 * @extends {BaseAPI}
 */
export class PaymentsCrossBorderSettlementApi extends BaseAPI {
    /**
     * <u><b>Create a new cross-border settlement configuration. </u></b></br>Configurations define the default assets, on-ramps, and off-ramps to use for the cross-border settlement. </br>  A configuration must contain at least two steps - `ON_RAMP` and `VAULT_ACCOUNT`. </br> All other steps (e.g., `OFF_RAMP`, `FIAT_DESTINATION`, etc.) are optional. </br> Every step must include the `accountId` to be used, while `inputAssetId` and `outputAssetId` are optional.  If those are not provided, a default value will be used from the Corridor Settings.</br> If the inputAssetId or the outputAssetId is provided for one of the objects, all assets in the objects must be consistent. For example, if the output asset of ON_RAMP is XLM_USDC_5F3T, then the input asset of the VAULT_ACCOUNT must also be XLM_USDC_5F3T..</br> You can set a slippage amount for your configuration. Slippage is defined by basis points (bps). This value can be overloaded on execution. If you do not configure a slippage amount, the default slippage of 10000 bps (10%) is used. </br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Create a new cross-border settlement configuration
     * @param {PaymentsCrossBorderSettlementApiCreateXBSettlementConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsCrossBorderSettlementApi
     */
    public createXBSettlementConfig(requestParameters: PaymentsCrossBorderSettlementApiCreateXBSettlementConfigRequest = {}, ) {
        return PaymentsCrossBorderSettlementApiFp(this.httpClient).createXBSettlementConfig(requestParameters.xBSettlementConfigCreationRequestBody, );
    }

    /**
     * Create a cross-border flow (based on a cross-border configuration) with an amount to transfer.  The assetId is defined by the cross-border configuration. Creating a flow triggers a calculation of the flow estimations, including FX rates, times, and fees based on the amount provided. Creating a cross-border flow will not execute the flow.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Create a new cross-border settlement flow
     * @param {PaymentsCrossBorderSettlementApiCreateXBSettlementFlowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsCrossBorderSettlementApi
     */
    public createXBSettlementFlow(requestParameters: PaymentsCrossBorderSettlementApiCreateXBSettlementFlowRequest = {}, ) {
        return PaymentsCrossBorderSettlementApiFp(this.httpClient).createXBSettlementFlow(requestParameters.xBSettlementCreateFlowRequestBody, );
    }

    /**
     * Delete a cross-border settlement configuration. This does not delete or remove previously executed flows that used this configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Delete a cross-border settlement configuration
     * @param {PaymentsCrossBorderSettlementApiDeleteXBSettlementConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsCrossBorderSettlementApi
     */
    public deleteXBSettlementConfig(requestParameters: PaymentsCrossBorderSettlementApiDeleteXBSettlementConfigRequest, ) {
        return PaymentsCrossBorderSettlementApiFp(this.httpClient).deleteXBSettlementConfig(requestParameters.configId, );
    }

    /**
     * Send a payment flow with \'flowId\' for execution. If a differet slippage configuraion is needed for this execution than configured in the flow configuration, the request body must define the desired slippage configuration for this execution.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Execute cross-border settlement flow
     * @param {PaymentsCrossBorderSettlementApiExecuteXBSettlementFlowActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsCrossBorderSettlementApi
     */
    public executeXBSettlementFlowAction(requestParameters: PaymentsCrossBorderSettlementApiExecuteXBSettlementFlowActionRequest, ) {
        return PaymentsCrossBorderSettlementApiFp(this.httpClient).executeXBSettlementFlowAction(requestParameters.flowId, requestParameters.xBSettlementFlowExecutionRequestBody, );
    }

    /**
     * Get a specific cross-border settlement configuration.</br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Get a specific cross-border settlement configuration
     * @param {PaymentsCrossBorderSettlementApiGetXBSettlementConfigByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsCrossBorderSettlementApi
     */
    public getXBSettlementConfigById(requestParameters: PaymentsCrossBorderSettlementApiGetXBSettlementConfigByIdRequest, ) {
        return PaymentsCrossBorderSettlementApiFp(this.httpClient).getXBSettlementConfigById(requestParameters.configId, );
    }

    /**
     * Get all the cross-border settlement configurations. </br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Get all the cross-border settlement configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsCrossBorderSettlementApi
     */
    public getXBSettlementConfigs() {
        return PaymentsCrossBorderSettlementApiFp(this.httpClient).getXBSettlementConfigs();
    }

    /**
     * Gets details for a specific cross-border settlement flow **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Get specific cross-border settlement flow details
     * @param {PaymentsCrossBorderSettlementApiGetXBSettlementFlowByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsCrossBorderSettlementApi
     */
    public getXBSettlementFlowById(requestParameters: PaymentsCrossBorderSettlementApiGetXBSettlementFlowByIdRequest, ) {
        return PaymentsCrossBorderSettlementApiFp(this.httpClient).getXBSettlementFlowById(requestParameters.flowId, );
    }

    /**
     * Edit a cross-border settlement configuration. Editing a configuration does not affect previously executed flows that used the configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
     * @summary Edit a cross-border settlement configuration
     * @param {PaymentsCrossBorderSettlementApiUpdateXBSettlementConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsCrossBorderSettlementApi
     */
    public updateXBSettlementConfig(requestParameters: PaymentsCrossBorderSettlementApiUpdateXBSettlementConfigRequest, ) {
        return PaymentsCrossBorderSettlementApiFp(this.httpClient).updateXBSettlementConfig(requestParameters.configId, requestParameters.xBSettlementConfigEditRequestBody, );
    }
}
