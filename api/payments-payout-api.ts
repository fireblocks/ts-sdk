/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {AxiosInstance, AxiosPromise, AxiosRequestConfig} from 'axios';
import {Configuration} from "../configuration";
import {HttpClient} from "../utils/http-client";

// Some imports not used depending on template conditions
// @ts-ignore
import { assertParamExists, setSearchParams, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';

// @ts-ignore
import { CreatePayoutRequest } from '../models';
// @ts-ignore
import { DispatchPayoutResponse } from '../models';
// @ts-ignore
import { ErrorResponse } from '../models';
// @ts-ignore
import { PayoutResponse } from '../models';



    /**
 * PaymentsPayoutApi - axios parameter creator
 * @export
 */
export const PaymentsPayoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> </br> <b u>Create a payout instruction set.</b> </u></br> A payout instruction set is a set of instructions for distributing payments from a single payment account to a list of payee accounts. </br> The instruction set defines: </br> <ul> <li>the payment account and its account type (vault, exchange, or fiat). </li> <li>the account type (vault account, exchange account, whitelisted address, network connection, fiat account, or merchant account), the amount, and the asset of payment for each payee account.</li> </ul> 
         * @summary Create a payout instruction set
         * @param {CreatePayoutRequest} [createPayoutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPayout: async (createPayoutRequest?: CreatePayoutRequest, ): Promise<AxiosRequestConfig> => {
            const localVarPath = `/payments/payout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };
            localVarRequestOptions.data = createPayoutRequest as any;

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> </br><b u>Execute a payout instruction set.</b> </u> </br> </br>The instruction set will be verified and executed.</br> <b><u>Source locking</br></b> </u> If you are executing a payout instruction set from a payment account with an already active payout the active payout will complete before the new payout instruction set can be executed. </br> You cannot execute the same payout instruction set more than once. 
         * @summary Execute a payout instruction set
         * @param {string} payoutId the payout id received from the creation of the payout instruction set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        executePayoutAction: async (payoutId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'payoutId' is not null or undefined
            assertParamExists('executePayoutAction', 'payoutId', payoutId)
            const localVarPath = `/payments/payout/{payoutId}/actions/execute`
                .replace(`{${"payoutId"}}`, encodeURIComponent(String(payoutId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'POST'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
        /**
         * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> 
         * @summary Get the status of a payout instruction set
         * @param {string} payoutId the payout id received from the creation of the payout instruction set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayoutById: async (payoutId: string, ): Promise<AxiosRequestConfig> => {
            // verify required parameter 'payoutId' is not null or undefined
            assertParamExists('getPayoutById', 'payoutId', payoutId)
            const localVarPath = `/payments/payout/{payoutId}`
                .replace(`{${"payoutId"}}`, encodeURIComponent(String(payoutId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(configuration.basePath + localVarPath);

            const localVarRequestOptions:AxiosRequestConfig = { method: 'GET'};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            localVarRequestOptions.headers = {...localVarHeaderParameter, };

            return {
                url: localVarUrlObj.toString(),
                ...localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentsPayoutApi - functional programming interface
 * @export
 */
export const PaymentsPayoutApiFp = function(httpClient: HttpClient) {
    const localVarAxiosParamCreator = PaymentsPayoutApiAxiosParamCreator(httpClient.configuration)
    return {
        /**
         * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> </br> <b u>Create a payout instruction set.</b> </u></br> A payout instruction set is a set of instructions for distributing payments from a single payment account to a list of payee accounts. </br> The instruction set defines: </br> <ul> <li>the payment account and its account type (vault, exchange, or fiat). </li> <li>the account type (vault account, exchange account, whitelisted address, network connection, fiat account, or merchant account), the amount, and the asset of payment for each payee account.</li> </ul> 
         * @summary Create a payout instruction set
         * @param {CreatePayoutRequest} [createPayoutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPayout(createPayoutRequest?: CreatePayoutRequest, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPayout(createPayoutRequest, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> </br><b u>Execute a payout instruction set.</b> </u> </br> </br>The instruction set will be verified and executed.</br> <b><u>Source locking</br></b> </u> If you are executing a payout instruction set from a payment account with an already active payout the active payout will complete before the new payout instruction set can be executed. </br> You cannot execute the same payout instruction set more than once. 
         * @summary Execute a payout instruction set
         * @param {string} payoutId the payout id received from the creation of the payout instruction set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async executePayoutAction(payoutId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DispatchPayoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.executePayoutAction(payoutId, );
            return httpClient.request(localVarAxiosArgs);
        },
        /**
         * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> 
         * @summary Get the status of a payout instruction set
         * @param {string} payoutId the payout id received from the creation of the payout instruction set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayoutById(payoutId: string, ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PayoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayoutById(payoutId, );
            return httpClient.request(localVarAxiosArgs);
        },
    }
};

/**
 * Request parameters for createPayout operation in PaymentsPayoutApi.
 * @export
 * @interface PaymentsPayoutApiCreatePayoutRequest
 */
export interface PaymentsPayoutApiCreatePayoutRequest {
    /**
     * 
     * @type {CreatePayoutRequest}
     * @memberof PaymentsPayoutApiCreatePayout
     */
    readonly createPayoutRequest?: CreatePayoutRequest
}

/**
 * Request parameters for executePayoutAction operation in PaymentsPayoutApi.
 * @export
 * @interface PaymentsPayoutApiExecutePayoutActionRequest
 */
export interface PaymentsPayoutApiExecutePayoutActionRequest {
    /**
     * the payout id received from the creation of the payout instruction set
     * @type {string}
     * @memberof PaymentsPayoutApiExecutePayoutAction
     */
    readonly payoutId: string
}

/**
 * Request parameters for getPayoutById operation in PaymentsPayoutApi.
 * @export
 * @interface PaymentsPayoutApiGetPayoutByIdRequest
 */
export interface PaymentsPayoutApiGetPayoutByIdRequest {
    /**
     * the payout id received from the creation of the payout instruction set
     * @type {string}
     * @memberof PaymentsPayoutApiGetPayoutById
     */
    readonly payoutId: string
}

/**
 * PaymentsPayoutApi - object-oriented interface
 * @export
 * @class PaymentsPayoutApi
 * @extends {BaseAPI}
 */
export class PaymentsPayoutApi extends BaseAPI {
    /**
     * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> </br> <b u>Create a payout instruction set.</b> </u></br> A payout instruction set is a set of instructions for distributing payments from a single payment account to a list of payee accounts. </br> The instruction set defines: </br> <ul> <li>the payment account and its account type (vault, exchange, or fiat). </li> <li>the account type (vault account, exchange account, whitelisted address, network connection, fiat account, or merchant account), the amount, and the asset of payment for each payee account.</li> </ul> 
     * @summary Create a payout instruction set
     * @param {PaymentsPayoutApiCreatePayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsPayoutApi
     */
    public createPayout(requestParameters: PaymentsPayoutApiCreatePayoutRequest = {}, ) {
        return PaymentsPayoutApiFp(this.httpClient).createPayout(requestParameters.createPayoutRequest, );
    }

    /**
     * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> </br><b u>Execute a payout instruction set.</b> </u> </br> </br>The instruction set will be verified and executed.</br> <b><u>Source locking</br></b> </u> If you are executing a payout instruction set from a payment account with an already active payout the active payout will complete before the new payout instruction set can be executed. </br> You cannot execute the same payout instruction set more than once. 
     * @summary Execute a payout instruction set
     * @param {PaymentsPayoutApiExecutePayoutActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsPayoutApi
     */
    public executePayoutAction(requestParameters: PaymentsPayoutApiExecutePayoutActionRequest, ) {
        return PaymentsPayoutApiFp(this.httpClient).executePayoutAction(requestParameters.payoutId, );
    }

    /**
     * **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoints include APIs available only for customers with Payments Engine enabled on their accounts. </br> </br>These endpoints are currently in beta and might be subject to changes.</br> </br>If you want to learn more about Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or email CSM@fireblocks.com. </br> 
     * @summary Get the status of a payout instruction set
     * @param {PaymentsPayoutApiGetPayoutByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentsPayoutApi
     */
    public getPayoutById(requestParameters: PaymentsPayoutApiGetPayoutByIdRequest, ) {
        return PaymentsPayoutApiFp(this.httpClient).getPayoutById(requestParameters.payoutId, );
    }
}
