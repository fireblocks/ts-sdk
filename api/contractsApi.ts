/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { AddAssetToContractRequest } from '../model/addAssetToContractRequest';
    import { CreateContractRequest } from '../model/createContractRequest';
    import { ExternalWalletAsset } from '../model/externalWalletAsset';
    import { UnmanagedWallet } from '../model/unmanagedWallet';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class ContractsApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Adds an asset to an existing contract.
                * @summary Add an asset to a contract
                * @param contractId The ID of the contract
                * @param assetId The ID of the asset to add
                * @param addAssetToContractRequest 
            */
        public async addAssetToContract (contractId: string, assetId: string, addAssetToContractRequest?: AddAssetToContractRequest, ) : Promise<ExternalWalletAsset> {
                const path = this.configuration.basePath + '/contracts/{contractId}/{assetId}'
                .replace('{' + 'contractId' + '}', encodeURIComponent(String(contractId)))
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'contractId' is not null or undefined
                        if (contractId === null || contractId === undefined) {
                        throw new Error('Required parameter contractId was null or undefined when calling addAssetToContract.');
                        }


                    if (typeof contractId === 'object') {
                        for( const [key,value] of Object.entries(contractId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['contractId'] = ObjectSerializer.serialize(contractId, "string");
                    }
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling addAssetToContract.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                    if (typeof addAssetToContractRequest === 'object') {
                        for( const [key,value] of Object.entries(addAssetToContractRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['AddAssetToContractRequest'] = ObjectSerializer.serialize(addAssetToContractRequest, "AddAssetToContractRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<ExternalWalletAsset>(requestOptions);
        }
            /**
            * Creates a new contract.
                * @summary Create a contract
                * @param createContractRequest 
            */
        public async createContract (createContractRequest?: CreateContractRequest, ) : Promise<UnmanagedWallet> {
                const path = this.configuration.basePath + '/contracts';
                let params: any = {};
                let headers: any = {}

                    if (typeof createContractRequest === 'object') {
                        for( const [key,value] of Object.entries(createContractRequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['CreateContractRequest'] = ObjectSerializer.serialize(createContractRequest, "CreateContractRequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<UnmanagedWallet>(requestOptions);
        }
            /**
            * Deletes a contract by ID.
                * @summary Delete a contract
                * @param contractId The ID of the contract to delete
            */
        public async deleteContract (contractId: string, ) : Promise<any> {
                const path = this.configuration.basePath + '/contracts/{contractId}'
                .replace('{' + 'contractId' + '}', encodeURIComponent(String(contractId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'contractId' is not null or undefined
                        if (contractId === null || contractId === undefined) {
                        throw new Error('Required parameter contractId was null or undefined when calling deleteContract.');
                        }


                    if (typeof contractId === 'object') {
                        for( const [key,value] of Object.entries(contractId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['contractId'] = ObjectSerializer.serialize(contractId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            * Returns a contract asset by ID.
                * @summary Find a contract asset
                * @param contractId The ID of the contract
                * @param assetId The ID of the asset to return
            */
        public async getAssetInContract (contractId: string, assetId: string, ) : Promise<ExternalWalletAsset> {
                const path = this.configuration.basePath + '/contracts/{contractId}/{assetId}'
                .replace('{' + 'contractId' + '}', encodeURIComponent(String(contractId)))
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'contractId' is not null or undefined
                        if (contractId === null || contractId === undefined) {
                        throw new Error('Required parameter contractId was null or undefined when calling getAssetInContract.');
                        }


                    if (typeof contractId === 'object') {
                        for( const [key,value] of Object.entries(contractId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['contractId'] = ObjectSerializer.serialize(contractId, "string");
                    }
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling getAssetInContract.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<ExternalWalletAsset>(requestOptions);
        }
            /**
            * Returns a contract by ID.
                * @summary Find a specific contract
                * @param contractId The ID of the contract to return
            */
        public async getContractById (contractId: string, ) : Promise<UnmanagedWallet> {
                const path = this.configuration.basePath + '/contracts/{contractId}'
                .replace('{' + 'contractId' + '}', encodeURIComponent(String(contractId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'contractId' is not null or undefined
                        if (contractId === null || contractId === undefined) {
                        throw new Error('Required parameter contractId was null or undefined when calling getContractById.');
                        }


                    if (typeof contractId === 'object') {
                        for( const [key,value] of Object.entries(contractId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['contractId'] = ObjectSerializer.serialize(contractId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<UnmanagedWallet>(requestOptions);
        }
            /**
            * Gets a list of contracts.
                * @summary List contracts
            */
        public async getContracts () : Promise<Array<UnmanagedWallet>> {
                const path = this.configuration.basePath + '/contracts';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<UnmanagedWallet>>(requestOptions);
        }
            /**
            * Deletes a contract asset by ID.
                * @summary Delete a contract asset
                * @param contractId The ID of the contract
                * @param assetId The ID of the asset to delete
            */
        public async removeAssetFromContract (contractId: string, assetId: string, ) : Promise<any> {
                const path = this.configuration.basePath + '/contracts/{contractId}/{assetId}'
                .replace('{' + 'contractId' + '}', encodeURIComponent(String(contractId)))
                .replace('{' + 'assetId' + '}', encodeURIComponent(String(assetId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'contractId' is not null or undefined
                        if (contractId === null || contractId === undefined) {
                        throw new Error('Required parameter contractId was null or undefined when calling removeAssetFromContract.');
                        }


                    if (typeof contractId === 'object') {
                        for( const [key,value] of Object.entries(contractId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['contractId'] = ObjectSerializer.serialize(contractId, "string");
                    }
                        // verify required parameter 'assetId' is not null or undefined
                        if (assetId === null || assetId === undefined) {
                        throw new Error('Required parameter assetId was null or undefined when calling removeAssetFromContract.');
                        }


                    if (typeof assetId === 'object') {
                        for( const [key,value] of Object.entries(assetId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['assetId'] = ObjectSerializer.serialize(assetId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'DELETE',
                    url: path,
                };
                return this.httpClient.request<any>(requestOptions);
        }
        }
