/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

    import { FiatAccount } from '../model/fiatAccount';
    import { RedeemFundsToLinkedDDARequest } from '../model/redeemFundsToLinkedDDARequest';
import {HttpClient} from '../utils/http-client';
import {Configuration, ConfigurationParameters} from '../utils/types/configuration';
import {ObjectSerializer} from "../model/models";
import { AxiosRequestConfig, AxiosResponse } from 'axios';


    export class FiatAccountsApi {
        private  configuration: Configuration;
        private  httpClient: HttpClient;

        constructor(private configurationParameters:ConfigurationParameters = {}) {
            this.configuration = new Configuration(configurationParameters)
            this.httpClient = new HttpClient(this.configuration);
        }

            /**
            * Deposits funds from the linked DDA.
                * @summary Deposit funds from DDA
                * @param accountId The ID of the fiat account to use
                * @param redeemFundsToLinkedDDARequest 
            */
        public async depositFundsFromLinkedDDA (accountId: string, redeemFundsToLinkedDDARequest?: RedeemFundsToLinkedDDARequest, ) : Promise<any> {
                const path = this.configuration.basePath + '/fiat_accounts/{accountId}/deposit_from_linked_dda'
                .replace('{' + 'accountId' + '}', encodeURIComponent(String(accountId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'accountId' is not null or undefined
                        if (accountId === null || accountId === undefined) {
                        throw new Error('Required parameter accountId was null or undefined when calling depositFundsFromLinkedDDA.');
                        }


                    if (typeof accountId === 'object') {
                        for( const [key,value] of Object.entries(accountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['accountId'] = ObjectSerializer.serialize(accountId, "string");
                    }

                    if (typeof redeemFundsToLinkedDDARequest === 'object') {
                        for( const [key,value] of Object.entries(redeemFundsToLinkedDDARequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['RedeemFundsToLinkedDDARequest'] = ObjectSerializer.serialize(redeemFundsToLinkedDDARequest, "RedeemFundsToLinkedDDARequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
            /**
            * Returns a fiat account by ID.
                * @summary Find a specific fiat account
                * @param accountId The ID of the fiat account to return
            */
        public async getFiatAccountById (accountId: string, ) : Promise<FiatAccount> {
                const path = this.configuration.basePath + '/fiat_accounts/{accountId}'
                .replace('{' + 'accountId' + '}', encodeURIComponent(String(accountId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'accountId' is not null or undefined
                        if (accountId === null || accountId === undefined) {
                        throw new Error('Required parameter accountId was null or undefined when calling getFiatAccountById.');
                        }


                    if (typeof accountId === 'object') {
                        for( const [key,value] of Object.entries(accountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['accountId'] = ObjectSerializer.serialize(accountId, "string");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<FiatAccount>(requestOptions);
        }
            /**
            * Returns all fiat accounts.
                * @summary List fiat accounts
            */
        public async getFiatAccounts () : Promise<Array<FiatAccount>> {
                const path = this.configuration.basePath + '/fiat_accounts';
                let params: any = {};
                let headers: any = {}

                let requestOptions: AxiosRequestConfig = {
                    method:'GET',
                    url: path,
                };
                return this.httpClient.request<Array<FiatAccount>>(requestOptions);
        }
            /**
            * Redeems funds to the linked DDA.
                * @summary Redeem funds to DDA
                * @param accountId The ID of the fiat account to use
                * @param redeemFundsToLinkedDDARequest 
            */
        public async redeemFundsToLinkedDDA (accountId: string, redeemFundsToLinkedDDARequest?: RedeemFundsToLinkedDDARequest, ) : Promise<any> {
                const path = this.configuration.basePath + '/fiat_accounts/{accountId}/redeem_to_linked_dda'
                .replace('{' + 'accountId' + '}', encodeURIComponent(String(accountId)));
                let params: any = {};
                let headers: any = {}
                        // verify required parameter 'accountId' is not null or undefined
                        if (accountId === null || accountId === undefined) {
                        throw new Error('Required parameter accountId was null or undefined when calling redeemFundsToLinkedDDA.');
                        }


                    if (typeof accountId === 'object') {
                        for( const [key,value] of Object.entries(accountId)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['accountId'] = ObjectSerializer.serialize(accountId, "string");
                    }

                    if (typeof redeemFundsToLinkedDDARequest === 'object') {
                        for( const [key,value] of Object.entries(redeemFundsToLinkedDDARequest)){
                            params[key] = ObjectSerializer.serialize(value, typeof value);
                        }
                    } else {
                            params['RedeemFundsToLinkedDDARequest'] = ObjectSerializer.serialize(redeemFundsToLinkedDDARequest, "RedeemFundsToLinkedDDARequest");
                    }

                let requestOptions: AxiosRequestConfig = {
                    method:'POST',
                    url: path,
                        data: params
                };
                return this.httpClient.request<any>(requestOptions);
        }
        }
