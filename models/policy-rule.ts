/* tslint:disable */
/* eslint-disable */
/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { AccountConfig } from './account-config';
// May contain unused imports in some cases
// @ts-ignore
import { AmountOverTimeConfig } from './amount-over-time-config';
// May contain unused imports in some cases
// @ts-ignore
import { AmountRange } from './amount-range';
// May contain unused imports in some cases
// @ts-ignore
import { AssetConfig } from './asset-config';
// May contain unused imports in some cases
// @ts-ignore
import { ContractMethodPattern } from './contract-method-pattern';
// May contain unused imports in some cases
// @ts-ignore
import { DerivationPathConfig } from './derivation-path-config';
// May contain unused imports in some cases
// @ts-ignore
import { DestinationConfig } from './destination-config';
// May contain unused imports in some cases
// @ts-ignore
import { InitiatorConfigPattern } from './initiator-config-pattern';
// May contain unused imports in some cases
// @ts-ignore
import { PolicyType } from './policy-type';
// May contain unused imports in some cases
// @ts-ignore
import { ProgramCallConfig } from './program-call-config';
// May contain unused imports in some cases
// @ts-ignore
import { ScreeningMetadataConfig } from './screening-metadata-config';
// May contain unused imports in some cases
// @ts-ignore
import { VerdictConfig } from './verdict-config';

/**
 * V2 Policy rule which is enforced on transactions
 * @export
 * @interface PolicyRule
 */
export interface PolicyRule {
    /**
     * Name of the policy rule
     * @type {string}
     * @memberof PolicyRule
     */
    'name': string;
    /**
     * Unique identifier for the policy rule
     * @type {string}
     * @memberof PolicyRule
     */
    'id': string;
    /**
     * Policy engine version
     * @type {string}
     * @memberof PolicyRule
     */
    'policyEngineVersion': PolicyRulePolicyEngineVersionEnum;
    /**
     * 
     * @type {PolicyType}
     * @memberof PolicyRule
     */
    'type': PolicyType;
    /**
     * 
     * @type {InitiatorConfigPattern}
     * @memberof PolicyRule
     */
    'initiator': InitiatorConfigPattern;
    /**
     * 
     * @type {AssetConfig}
     * @memberof PolicyRule
     */
    'asset': AssetConfig;
    /**
     * 
     * @type {AccountConfig}
     * @memberof PolicyRule
     */
    'source': AccountConfig;
    /**
     * 
     * @type {VerdictConfig}
     * @memberof PolicyRule
     */
    'verdict': VerdictConfig;
    /**
     * 
     * @type {PolicyType}
     * @memberof PolicyRule
     */
    'subType'?: PolicyType;
    /**
     * 
     * @type {DestinationConfig}
     * @memberof PolicyRule
     */
    'destination'?: DestinationConfig;
    /**
     * 
     * @type {AccountConfig}
     * @memberof PolicyRule
     */
    'account'?: AccountConfig;
    /**
     * 
     * @type {AmountOverTimeConfig}
     * @memberof PolicyRule
     */
    'amountOverTime'?: AmountOverTimeConfig;
    /**
     * 
     * @type {AmountRange}
     * @memberof PolicyRule
     */
    'amount'?: AmountRange;
    /**
     * External descriptor for the rule
     * @type {string}
     * @memberof PolicyRule
     */
    'externalDescriptor'?: string;
    /**
     * 
     * @type {ContractMethodPattern}
     * @memberof PolicyRule
     */
    'method'?: ContractMethodPattern;
    /**
     * Whether this is a global policy
     * @type {boolean}
     * @memberof PolicyRule
     */
    'isGlobalPolicy'?: boolean;
    /**
     * 
     * @type {ProgramCallConfig}
     * @memberof PolicyRule
     */
    'programCall'?: ProgramCallConfig;
    /**
     * 
     * @type {ScreeningMetadataConfig}
     * @memberof PolicyRule
     */
    'screeningMetadata'?: ScreeningMetadataConfig;
    /**
     * 
     * @type {AssetConfig}
     * @memberof PolicyRule
     */
    'quoteAsset'?: AssetConfig;
    /**
     * 
     * @type {AssetConfig}
     * @memberof PolicyRule
     */
    'baseAsset'?: AssetConfig;
    /**
     * 
     * @type {AmountRange}
     * @memberof PolicyRule
     */
    'quoteAmount'?: AmountRange;
    /**
     * 
     * @type {AmountRange}
     * @memberof PolicyRule
     */
    'baseAmount'?: AmountRange;
    /**
     * 
     * @type {DerivationPathConfig}
     * @memberof PolicyRule
     */
    'derivationPath'?: DerivationPathConfig;
    /**
     * Index for the policy rule
     * @type {number}
     * @memberof PolicyRule
     */
    'index'?: number;
}

export const PolicyRulePolicyEngineVersionEnum = {
    V2: 'v2'
} as const;

export type PolicyRulePolicyEngineVersionEnum = typeof PolicyRulePolicyEngineVersionEnum[keyof typeof PolicyRulePolicyEngineVersionEnum];


