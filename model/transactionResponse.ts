/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { AmlScreeningResult } from './amlScreeningResult';
import { AmountInfo } from './amountInfo';
import { AuthorizationInfo } from './authorizationInfo';
import { BlockInfo } from './blockInfo';
import { DestinationTransferPeerPathResponse } from './destinationTransferPeerPathResponse';
import { FeeInfo } from './feeInfo';
import { GetTransactionOperation } from './getTransactionOperation';
import { NetworkRecord } from './networkRecord';
import { RewardInfo } from './rewardInfo';
import { SignedMessage } from './signedMessage';
import { SourceTransferPeerPathResponse } from './sourceTransferPeerPathResponse';
import { SystemMessageInfo } from './systemMessageInfo';
import { TransactionResponseContractCallDecodedData } from './transactionResponseContractCallDecodedData';
import { TransactionResponseDestination } from './transactionResponseDestination';

export class TransactionResponse {
    /**
    * ID of the transaction.
    */
    'id'?: string;
    /**
    * Unique transaction ID provided by the user. Fireblocks highly recommends setting an `externalTxId` for every transaction created, to avoid submitting the same transaction twice.
    */
    'externalTxId'?: string;
    /**
    * The primary status of the transaction. For details, see [Primary transaction statuses](https://developers.fireblocks.com/reference/primary-transaction-statuses).
    */
    'status'?: string;
    /**
    * See [Transaction substatuses](https://developers.fireblocks.com/reference/transaction-substatuses) for the list of transaction sub statuses.
    */
    'subStatus'?: string;
    /**
    * The hash of the transaction on the blockchain.  * This parameter exists if at least one of the following conditions is met:       1. The transaction’s source type is `UNKNOWN`, `WHITELISTED_ADDRESS`, `NETWORK_CONNECTION`, `ONE_TIME_ADDRESS`, `FIAT_ACCOUNT` or `GAS_STATION`.       2. The transaction’s source type is `VAULT` and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these statuses prior to changing to `FAILED` or `REJECTED`. In some instances, transactions in status `BROADCASTING` will include the txHash as well.       3. The transaction’s source type is `EXCHANGE_ACCOUNT` and the transaction’s destination type is `VAULT`, and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these status prior to changing to `FAILED`.   * In addition, the following conditions must be met:      1. The asset is a crypto asset (not fiat).      2. The transaction operation is not RAW or `TYPED_MESSAGE`.
    */
    'txHash'?: string;
    'operation'?: GetTransactionOperation;
    /**
    * Custom note, not sent to the blockchain, that describes the transaction at your Fireblocks workspace.
    */
    'note'?: string;
    /**
    * The ID of the asset to transfer, for `TRANSFER`, `MINT`, `BURN`, `ENABLE_ASSET`,`STAKE` ,`UNSTAKE` or `WITHDRAW` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)
    */
    'assetId'?: string;
    'source'?: SourceTransferPeerPathResponse;
    /**
    * For account based assets only, the source address of the transaction. **Note:** If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the source address. In any other case, this parameter will be empty.
    */
    'sourceAddress'?: string;
    /**
    * Source address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group).
    */
    'tag'?: string;
    'destination'?: DestinationTransferPeerPathResponse;
    /**
    * The transaction’s destinations. **Note:** In case the transaction is sent to a single destination, the `destination` parameter is used instead of this.
    */
    'destinations'?: Array<TransactionResponseDestination>;
    /**
    * Address where the asset were transferred. Notes:   - For [Multi destination transactions](https://support.fireblocks.io/hc/en-us/articles/360018447980-Multi-destination-transactions), this parameter will be empty. In this case, you should refer to the destinations field.   - If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the destination address. In any other case, this parameter will be empty.
    */
    'destinationAddress'?: string;
    /**
    * Description of the address.
    */
    'destinationAddressDescription'?: string;
    /**
    * Destination address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group).
    */
    'destinationTag'?: string;
    'contractCallDecodedData'?: TransactionResponseContractCallDecodedData;
    'amountInfo'?: AmountInfo;
    /**
    * For transactions initiated via this Fireblocks workspace, when set to `true`, the fee is deducted from the requested amount.
    */
    'treatAsGrossAmount'?: boolean;
    'feeInfo'?: FeeInfo;
    /**
    * The asset which was withdrawn to pay the transaction fee, for example ETH for EVM-based blockchains, BTC for Tether Omni.
    */
    'feeCurrency'?: string;
    /**
    * In case a single transaction resulted with multiple transfers, for example a result of a contract call, then this parameter specifies each transfer that took place on the blockchain. In case of a single transfer transaction, this parameter is empty.
    */
    'networkRecords'?: Array<NetworkRecord>;
    /**
    * The transaction’s creation date and time, in unix timestamp.
    */
    'createdAt'?: number;
    /**
    * The transaction’s last update date and time, in unix timestamp.
    */
    'lastUpdated'?: number;
    /**
    * User ID of the initiator of the transaction.
    */
    'createdBy'?: string;
    /**
    * User ID’s of the signers of the transaction.
    */
    'signedBy'?: Array<string>;
    /**
    * User ID of the user that rejected the transaction (in case it was rejected).
    */
    'rejectedBy'?: string;
    'authorizationInfo'?: AuthorizationInfo;
    /**
    * If the transaction originated from an exchange, this is the ID of this transaction at the exchange.
    */
    'exchangeTxId'?: string;
    /**
    * The ID for AML providers to associate the owner of funds with transactions.
    */
    'customerRefId'?: string;
    'amlScreeningResult'?: AmlScreeningResult;
    /**
    * Additional protocol / operation specific key-value parameters:  For UTXO-based blockchain input selection, add the key `inputsSelection` with the value set the [input selection structure.](https://developers.fireblocks.com/reference/transaction-objects#inputsselection) The inputs can be retrieved from the [Retrieve Unspent Inputs endpoint.](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid-assetid-unspent-inputs)  For `RAW` operations, add the key `rawMessageData` with the value set to the [raw message data structure.](https://developers.fireblocks.com/reference/raw-signing-objects#rawmessagedata)  For `CONTRACT_CALL` operations, add the key `contractCallData` with the value set to the Ethereum smart contract Application Binary Interface (ABI) payload. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions. 
    */
    'extraParameters'?: object;
    'signedMessages'?: SignedMessage;
    /**
    * The number of confirmations of the transaction. The number will increase until the transaction will be considered completed according to the confirmation policy.
    */
    'numOfConfirmations'?: number;
    'blockInfo'?: BlockInfo;
    /**
    * For UTXO based assets this is the vOut, for Ethereum based, this is the index of the event of the contract call.  **Note:** This field is not returned if a transaction uses the `destinations` object with more than one value.
    */
    'index'?: number;
    'rewardInfo'?: RewardInfo;
    'systemMessages'?: SystemMessageInfo;
    'addressType'?: TransactionResponse.AddressTypeEnum;
    /**
    * The amount requested by the user. Deprecated - please use the `amountInfo` field for accuracy.
    */
    'requestedAmount'?: number;
    /**
    * If the transfer is a withdrawal from an exchange, the actual amount that was requested to be transferred. Otherwise, the requested amount. Deprecated - please use the `amountInfo` field for accuracy.
    */
    'amount'?: number;
    /**
    * The net amount of the transaction, after fee deduction. Deprecated - please use the `amountInfo` field for accuracy.
    */
    'netAmount'?: number;
    /**
    * The USD value of the requested amount. Deprecated - please use the `amountInfo` field for accuracy.
    */
    'amountUSD'?: number | null;
    /**
    * The total fee deducted by the exchange from the actual requested amount (`serviceFee` = `amount` - `netAmount`). Deprecated - please use the `feeInfo` field for accuracy.
    */
    'serviceFee'?: number;
    /**
    * Deprecated - please use the `feeInfo` field for accuracy.
    */
    'fee'?: number;
    /**
    * The fee paid to the network. Deprecated - please use the `feeInfo` field for accuracy.
    */
    'networkFee'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "externalTxId",
            "baseName": "externalTxId",
            "type": "string"
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "string"
        },
        {
            "name": "subStatus",
            "baseName": "subStatus",
            "type": "string"
        },
        {
            "name": "txHash",
            "baseName": "txHash",
            "type": "string"
        },
        {
            "name": "operation",
            "baseName": "operation",
            "type": "GetTransactionOperation"
        },
        {
            "name": "note",
            "baseName": "note",
            "type": "string"
        },
        {
            "name": "assetId",
            "baseName": "assetId",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "SourceTransferPeerPathResponse"
        },
        {
            "name": "sourceAddress",
            "baseName": "sourceAddress",
            "type": "string"
        },
        {
            "name": "tag",
            "baseName": "tag",
            "type": "string"
        },
        {
            "name": "destination",
            "baseName": "destination",
            "type": "DestinationTransferPeerPathResponse"
        },
        {
            "name": "destinations",
            "baseName": "destinations",
            "type": "Array<TransactionResponseDestination>"
        },
        {
            "name": "destinationAddress",
            "baseName": "destinationAddress",
            "type": "string"
        },
        {
            "name": "destinationAddressDescription",
            "baseName": "destinationAddressDescription",
            "type": "string"
        },
        {
            "name": "destinationTag",
            "baseName": "destinationTag",
            "type": "string"
        },
        {
            "name": "contractCallDecodedData",
            "baseName": "contractCallDecodedData",
            "type": "TransactionResponseContractCallDecodedData"
        },
        {
            "name": "amountInfo",
            "baseName": "amountInfo",
            "type": "AmountInfo"
        },
        {
            "name": "treatAsGrossAmount",
            "baseName": "treatAsGrossAmount",
            "type": "boolean"
        },
        {
            "name": "feeInfo",
            "baseName": "feeInfo",
            "type": "FeeInfo"
        },
        {
            "name": "feeCurrency",
            "baseName": "feeCurrency",
            "type": "string"
        },
        {
            "name": "networkRecords",
            "baseName": "networkRecords",
            "type": "Array<NetworkRecord>"
        },
        {
            "name": "createdAt",
            "baseName": "createdAt",
            "type": "number"
        },
        {
            "name": "lastUpdated",
            "baseName": "lastUpdated",
            "type": "number"
        },
        {
            "name": "createdBy",
            "baseName": "createdBy",
            "type": "string"
        },
        {
            "name": "signedBy",
            "baseName": "signedBy",
            "type": "Array<string>"
        },
        {
            "name": "rejectedBy",
            "baseName": "rejectedBy",
            "type": "string"
        },
        {
            "name": "authorizationInfo",
            "baseName": "authorizationInfo",
            "type": "AuthorizationInfo"
        },
        {
            "name": "exchangeTxId",
            "baseName": "exchangeTxId",
            "type": "string"
        },
        {
            "name": "customerRefId",
            "baseName": "customerRefId",
            "type": "string"
        },
        {
            "name": "amlScreeningResult",
            "baseName": "amlScreeningResult",
            "type": "AmlScreeningResult"
        },
        {
            "name": "extraParameters",
            "baseName": "extraParameters",
            "type": "object"
        },
        {
            "name": "signedMessages",
            "baseName": "signedMessages",
            "type": "SignedMessage"
        },
        {
            "name": "numOfConfirmations",
            "baseName": "numOfConfirmations",
            "type": "number"
        },
        {
            "name": "blockInfo",
            "baseName": "blockInfo",
            "type": "BlockInfo"
        },
        {
            "name": "index",
            "baseName": "index",
            "type": "number"
        },
        {
            "name": "rewardInfo",
            "baseName": "rewardInfo",
            "type": "RewardInfo"
        },
        {
            "name": "systemMessages",
            "baseName": "systemMessages",
            "type": "SystemMessageInfo"
        },
        {
            "name": "addressType",
            "baseName": "addressType",
            "type": "TransactionResponse.AddressTypeEnum"
        },
        {
            "name": "requestedAmount",
            "baseName": "requestedAmount",
            "type": "number"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "number"
        },
        {
            "name": "netAmount",
            "baseName": "netAmount",
            "type": "number"
        },
        {
            "name": "amountUSD",
            "baseName": "amountUSD",
            "type": "number"
        },
        {
            "name": "serviceFee",
            "baseName": "serviceFee",
            "type": "number"
        },
        {
            "name": "fee",
            "baseName": "fee",
            "type": "number"
        },
        {
            "name": "networkFee",
            "baseName": "networkFee",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return TransactionResponse.attributeTypeMap;
    }
}

export namespace TransactionResponse {
    export enum AddressTypeEnum {
        Whitelisted = <any> 'WHITELISTED',
        OneTime = <any> 'ONE_TIME'
    }
}
