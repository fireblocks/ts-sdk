/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.5.5
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { DestinationTransferPeerPath } from './destinationTransferPeerPath';
import { TransactionOperation } from './transactionOperation';
import { TransactionRequestAmount } from './transactionRequestAmount';
import { TransactionRequestDestination } from './transactionRequestDestination';
import { TransactionRequestFee } from './transactionRequestFee';
import { TransactionRequestFeePayerInfo } from './transactionRequestFeePayerInfo';
import { TransactionRequestGasLimit } from './transactionRequestGasLimit';
import { TransactionRequestGasPrice } from './transactionRequestGasPrice';
import { TransactionRequestNetworkStaking } from './transactionRequestNetworkStaking';
import { TransactionRequestPriorityFee } from './transactionRequestPriorityFee';
import { TransferPeerPath } from './transferPeerPath';

export class TransactionRequest {
    'assetId'?: string;
    'source'?: TransferPeerPath;
    'destination'?: DestinationTransferPeerPath;
    'amount'?: TransactionRequestAmount;
    'fee'?: TransactionRequestFee;
    'feeLevel'?: TransactionRequest.FeeLevelEnum;
    'priorityFee'?: TransactionRequestPriorityFee;
    'failOnLowFee'?: boolean;
    /**
    * - For ETH based assets only, must be provided when using the priorityFee parameter. This will be used to limit the fee max possible fee (according to eip-1559). Value is in gwei. - For other assets, it fails a transaction when the automatically selected fee is higher than the provided value. - A numeric value representation is required.
    */
    'maxFee'?: string;
    'gasPrice'?: TransactionRequestGasPrice;
    'gasLimit'?: TransactionRequestGasLimit;
    'networkFee'?: TransactionRequestGasLimit;
    'note'?: string;
    'autoStaking'?: boolean;
    'networkStaking'?: TransactionRequestNetworkStaking;
    'cpuStaking'?: TransactionRequestNetworkStaking;
    'extraParameters'?: object;
    'operation'?: TransactionOperation;
    'customerRefId'?: string;
    'replaceTxByHash'?: string;
    'externalTxId'?: string;
    'destinations'?: Array<TransactionRequestDestination>;
    'treatAsGrossAmount'?: boolean;
    'forceSweep'?: boolean;
    'feePayerInfo'?: TransactionRequestFeePayerInfo;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "assetId",
            "baseName": "assetId",
            "type": "string"
        },
        {
            "name": "source",
            "baseName": "source",
            "type": "TransferPeerPath"
        },
        {
            "name": "destination",
            "baseName": "destination",
            "type": "DestinationTransferPeerPath"
        },
        {
            "name": "amount",
            "baseName": "amount",
            "type": "TransactionRequestAmount"
        },
        {
            "name": "fee",
            "baseName": "fee",
            "type": "TransactionRequestFee"
        },
        {
            "name": "feeLevel",
            "baseName": "feeLevel",
            "type": "TransactionRequest.FeeLevelEnum"
        },
        {
            "name": "priorityFee",
            "baseName": "priorityFee",
            "type": "TransactionRequestPriorityFee"
        },
        {
            "name": "failOnLowFee",
            "baseName": "failOnLowFee",
            "type": "boolean"
        },
        {
            "name": "maxFee",
            "baseName": "maxFee",
            "type": "string"
        },
        {
            "name": "gasPrice",
            "baseName": "gasPrice",
            "type": "TransactionRequestGasPrice"
        },
        {
            "name": "gasLimit",
            "baseName": "gasLimit",
            "type": "TransactionRequestGasLimit"
        },
        {
            "name": "networkFee",
            "baseName": "networkFee",
            "type": "TransactionRequestGasLimit"
        },
        {
            "name": "note",
            "baseName": "note",
            "type": "string"
        },
        {
            "name": "autoStaking",
            "baseName": "autoStaking",
            "type": "boolean"
        },
        {
            "name": "networkStaking",
            "baseName": "networkStaking",
            "type": "TransactionRequestNetworkStaking"
        },
        {
            "name": "cpuStaking",
            "baseName": "cpuStaking",
            "type": "TransactionRequestNetworkStaking"
        },
        {
            "name": "extraParameters",
            "baseName": "extraParameters",
            "type": "object"
        },
        {
            "name": "operation",
            "baseName": "operation",
            "type": "TransactionOperation"
        },
        {
            "name": "customerRefId",
            "baseName": "customerRefId",
            "type": "string"
        },
        {
            "name": "replaceTxByHash",
            "baseName": "replaceTxByHash",
            "type": "string"
        },
        {
            "name": "externalTxId",
            "baseName": "externalTxId",
            "type": "string"
        },
        {
            "name": "destinations",
            "baseName": "destinations",
            "type": "Array<TransactionRequestDestination>"
        },
        {
            "name": "treatAsGrossAmount",
            "baseName": "treatAsGrossAmount",
            "type": "boolean"
        },
        {
            "name": "forceSweep",
            "baseName": "forceSweep",
            "type": "boolean"
        },
        {
            "name": "feePayerInfo",
            "baseName": "feePayerInfo",
            "type": "TransactionRequestFeePayerInfo"
        }    ];

    static getAttributeTypeMap() {
        return TransactionRequest.attributeTypeMap;
    }
}

export namespace TransactionRequest {
    export enum FeeLevelEnum {
        Low = <any> 'LOW',
        Medium = <any> 'MEDIUM',
        High = <any> 'HIGH'
    }
}
