/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { version } from "../package.json";
import { AxiosManager } from '../network/axiosManager';
import { BearerTokenProvider } from '../network/bearerTokenProvider';

// Mocking dependencies
jest.mock('../network/bearerTokenProvider', () => {
    return {
        BearerTokenProvider: jest.fn().mockImplementation(() => {
            return {
                getToken: jest.fn().mockReturnValue('mocked token'),
            };
        }),
    };
});

let mockAxiosRequestInterceptor : any;
let mockAxiosResponseInterceptor : any;
jest.mock('axios', () => {
    mockAxiosRequestInterceptor = jest.fn();
    mockAxiosResponseInterceptor = jest.fn();
    return {
        create: () => {
            return {
                interceptors: {
                    request: {eject: jest.fn(), use: mockAxiosRequestInterceptor},
                    response: {eject: jest.fn(), use: mockAxiosResponseInterceptor},
                },
            };
        },
    };
});



describe('AxiosManager Tests', () => {
    let axiosManager: AxiosManager;

    beforeEach(() => {
        axiosManager = new AxiosManager('apiKey', 'secretKey');
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    describe('Constructor tests', () => {
        it('Should create an instance of BearerTokenProvider', () => {
            expect(BearerTokenProvider).toHaveBeenCalledWith('apiKey', 'secretKey');
        });

        it('Should set request interceptor', async () => {
            expect(mockAxiosRequestInterceptor).toHaveBeenCalled();
        });

        it('Should set response interceptor', () => {
            expect(mockAxiosResponseInterceptor).toHaveBeenCalled();
        });
    });

    describe('GetHeaders tests', () => {

        describe('Default', () => {

            it('Should return fireblocks headers as expected', () => {
                const config = { method: 'GET', url: 'http://example.com', data: {} };
                const headers = axiosManager.getHeaders(config as any);
                expect(headers).toEqual(expect.objectContaining({
                    'X-API-Key': 'apiKey',
                    'Authorization': 'Bearer mocked token',
                    'User-Agent': expect.stringContaining('@fireblocks/ts-sdk/'),
                    'Content-Type': 'application/json'
                }));
            });
        });

        describe('UserAgent Header', () => {

            it('Should return user-agent header starting with package name when default configuration is used', () => {
                const config = { method: 'GET', url: 'http://example.com', data: {} };
                const headers = axiosManager.getHeaders(config as any);
                const isStartingWithPackageName = headers['User-Agent'].startsWith(`@fireblocks/ts-sdk/${version}`);
                expect(isStartingWithPackageName).toEqual(true);
            });

            it('Should return user-agent header with configured userAgent when userAgent option is used', () => {
                axiosManager = new AxiosManager('apiKey', 'secretKey', { userAgent: 'my-user-agent' });
                const config = { method: 'GET', url: 'http://example.com', data: {} };
                const headers = axiosManager.getHeaders(config as any);
                const isStartingWithInputUserAgent = headers['User-Agent'].startsWith('my-user-agent');
                expect(isStartingWithInputUserAgent).toEqual(true);
            });

            it('Should return headers when isAnonymousPlatform set to true', () => {
                axiosManager = new AxiosManager('apiKey', 'secretKey', { isAnonymousPlatform: true });
                const config = { method: 'GET', url: 'http://example.com', data: {} };
                const headers = axiosManager.getHeaders(config as any);
                expect(headers['User-Agent']).toEqual(`@fireblocks/ts-sdk/${version}`);
            });
        });

        describe('ApiKey Header', () => {

            it('Should return empty string when api key is missing', () => {
                axiosManager = new AxiosManager(undefined as any, 'secretKey', );
                const config = { method: 'GET', url: 'http://example.com', data: {} };
                const headers = axiosManager.getHeaders(config as any);
                expect(headers['X-API-Key']).toEqual("");
            });

            it('Should return empty string when api key is empty string as well', () => {
                axiosManager = new AxiosManager("", 'secretKey', );
                const config = { method: 'GET', url: 'http://example.com', data: {} };
                const headers = axiosManager.getHeaders(config as any);
                expect(headers['X-API-Key']).toEqual("");
            });
        });
    });
});
