/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Fireblocks  } from '../client/client';
import { AdminQuorumApi,
ApiUserApi,
AssetsApi,
AuditLogsApi,
BlockchainsAssetsApi,
ComplianceApi,
ComplianceScreeningConfigurationApi,
ConsoleUserApi,
ContractsApi,
ExchangeAccountsApi,
ExternalWalletsApi,
FiatAccountsApi,
GasStationsApi,
InternalWalletsApi,
JobManagementApi,
NFTsApi,
NetworkConnectionsApi,
OTABetaApi,
OffExchangesApi,
PaymentsPayoutApi,
PolicyEditorBetaApi,
ResetDeviceApi,
SmartTransferApi,
StakingBetaApi,
TransactionsApi,
TravelRuleBetaApi,
UserGroupsBetaApi,
UsersApi,
VaultsApi,
Web3ConnectionsApi,
WebhooksApi,
WhitelistIpAddressesApi,
WorkspaceApi,
WorkspaceStatusBetaApi
} from '../api';
import { AxiosRequestConfig, AxiosResponse } from "axios";
import { convertToFireblocksResponse } from "../response/fireblocksResponse";
import { Configuration } from "../configuration";

let mockAdminQuorumApi: jest.Mock;
let mockApiUserApi: jest.Mock;
let mockAssetsApi: jest.Mock;
let mockAuditLogsApi: jest.Mock;
let mockBlockchainsAssetsApi: jest.Mock;
let mockComplianceApi: jest.Mock;
let mockComplianceScreeningConfigurationApi: jest.Mock;
let mockConsoleUserApi: jest.Mock;
let mockContractsApi: jest.Mock;
let mockExchangeAccountsApi: jest.Mock;
let mockExternalWalletsApi: jest.Mock;
let mockFiatAccountsApi: jest.Mock;
let mockGasStationsApi: jest.Mock;
let mockInternalWalletsApi: jest.Mock;
let mockJobManagementApi: jest.Mock;
let mockNFTsApi: jest.Mock;
let mockNetworkConnectionsApi: jest.Mock;
let mockOTABetaApi: jest.Mock;
let mockOffExchangesApi: jest.Mock;
let mockPaymentsPayoutApi: jest.Mock;
let mockPolicyEditorBetaApi: jest.Mock;
let mockResetDeviceApi: jest.Mock;
let mockSmartTransferApi: jest.Mock;
let mockStakingBetaApi: jest.Mock;
let mockTransactionsApi: jest.Mock;
let mockTravelRuleBetaApi: jest.Mock;
let mockUserGroupsBetaApi: jest.Mock;
let mockUsersApi: jest.Mock;
let mockVaultsApi: jest.Mock;
let mockWeb3ConnectionsApi: jest.Mock;
let mockWebhooksApi: jest.Mock;
let mockWhitelistIpAddressesApi: jest.Mock;
let mockWorkspaceApi: jest.Mock;
let mockWorkspaceStatusBetaApi: jest.Mock;

jest.mock('../api', () => {
    mockAdminQuorumApi = jest.fn();
    mockApiUserApi = jest.fn();
    mockAssetsApi = jest.fn();
    mockAuditLogsApi = jest.fn();
    mockBlockchainsAssetsApi = jest.fn();
    mockComplianceApi = jest.fn();
    mockComplianceScreeningConfigurationApi = jest.fn();
    mockConsoleUserApi = jest.fn();
    mockContractsApi = jest.fn();
    mockExchangeAccountsApi = jest.fn();
    mockExternalWalletsApi = jest.fn();
    mockFiatAccountsApi = jest.fn();
    mockGasStationsApi = jest.fn();
    mockInternalWalletsApi = jest.fn();
    mockJobManagementApi = jest.fn();
    mockNFTsApi = jest.fn();
    mockNetworkConnectionsApi = jest.fn();
    mockOTABetaApi = jest.fn();
    mockOffExchangesApi = jest.fn();
    mockPaymentsPayoutApi = jest.fn();
    mockPolicyEditorBetaApi = jest.fn();
    mockResetDeviceApi = jest.fn();
    mockSmartTransferApi = jest.fn();
    mockStakingBetaApi = jest.fn();
    mockTransactionsApi = jest.fn();
    mockTravelRuleBetaApi = jest.fn();
    mockUserGroupsBetaApi = jest.fn();
    mockUsersApi = jest.fn();
    mockVaultsApi = jest.fn();
    mockWeb3ConnectionsApi = jest.fn();
    mockWebhooksApi = jest.fn();
    mockWhitelistIpAddressesApi = jest.fn();
    mockWorkspaceApi = jest.fn();
    mockWorkspaceStatusBetaApi = jest.fn();
    const actual = jest.requireActual('../api');
    return {
        ...actual,
        AdminQuorumApi: mockAdminQuorumApi,
        ApiUserApi: mockApiUserApi,
        AssetsApi: mockAssetsApi,
        AuditLogsApi: mockAuditLogsApi,
        BlockchainsAssetsApi: mockBlockchainsAssetsApi,
        ComplianceApi: mockComplianceApi,
        ComplianceScreeningConfigurationApi: mockComplianceScreeningConfigurationApi,
        ConsoleUserApi: mockConsoleUserApi,
        ContractsApi: mockContractsApi,
        ExchangeAccountsApi: mockExchangeAccountsApi,
        ExternalWalletsApi: mockExternalWalletsApi,
        FiatAccountsApi: mockFiatAccountsApi,
        GasStationsApi: mockGasStationsApi,
        InternalWalletsApi: mockInternalWalletsApi,
        JobManagementApi: mockJobManagementApi,
        NFTsApi: mockNFTsApi,
        NetworkConnectionsApi: mockNetworkConnectionsApi,
        OTABetaApi: mockOTABetaApi,
        OffExchangesApi: mockOffExchangesApi,
        PaymentsPayoutApi: mockPaymentsPayoutApi,
        PolicyEditorBetaApi: mockPolicyEditorBetaApi,
        ResetDeviceApi: mockResetDeviceApi,
        SmartTransferApi: mockSmartTransferApi,
        StakingBetaApi: mockStakingBetaApi,
        TransactionsApi: mockTransactionsApi,
        TravelRuleBetaApi: mockTravelRuleBetaApi,
        UserGroupsBetaApi: mockUserGroupsBetaApi,
        UsersApi: mockUsersApi,
        VaultsApi: mockVaultsApi,
        Web3ConnectionsApi: mockWeb3ConnectionsApi,
        WebhooksApi: mockWebhooksApi,
        WhitelistIpAddressesApi: mockWhitelistIpAddressesApi,
        WorkspaceApi: mockWorkspaceApi,
        WorkspaceStatusBetaApi: mockWorkspaceStatusBetaApi,
    };
});

const mockedResponse: AxiosResponse = {
    data: 'Mocked data',
    status: 200,
    statusText: 'OK',
    headers: {},
    config: {} as AxiosRequestConfig as any,
};

let mockAxios: any;

jest.mock("../network/axiosManager", () => {
    mockAxios = {
        request: jest.fn((config: AxiosRequestConfig) => {
            return Promise.resolve(mockedResponse);
        }), // Mocking the request method to return the mocked response
        defaults: jest.fn()
    };
    return {
    AxiosManager: jest.fn().mockReturnValue({
        axios: mockAxios
    })
}
});


describe("Fireblocks Client Tests", () => {
    let fireblocks: Fireblocks;

    beforeEach(() => {
        fireblocks = new Fireblocks({
            apiKey: "my-api-key",
            basePath: "http://mock-server",
            secretKey: "secretKey"
        });
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    describe('Api getters tests', () => {
        const expectedConfig = new Configuration({ basePath: "http://mock-server" });

        it('Should return AdminQuorumApi', async () => {
            expect(fireblocks.adminQuorum).toBeInstanceOf(AdminQuorumApi);
            expect(mockAdminQuorumApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return ApiUserApi', async () => {
            expect(fireblocks.apiUser).toBeInstanceOf(ApiUserApi);
            expect(mockApiUserApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return AssetsApi', async () => {
            expect(fireblocks.assets).toBeInstanceOf(AssetsApi);
            expect(mockAssetsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return AuditLogsApi', async () => {
            expect(fireblocks.auditLogs).toBeInstanceOf(AuditLogsApi);
            expect(mockAuditLogsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return BlockchainsAssetsApi', async () => {
            expect(fireblocks.blockchainsAssets).toBeInstanceOf(BlockchainsAssetsApi);
            expect(mockBlockchainsAssetsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return ComplianceApi', async () => {
            expect(fireblocks.compliance).toBeInstanceOf(ComplianceApi);
            expect(mockComplianceApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return ComplianceScreeningConfigurationApi', async () => {
            expect(fireblocks.complianceScreeningConfiguration).toBeInstanceOf(ComplianceScreeningConfigurationApi);
            expect(mockComplianceScreeningConfigurationApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return ConsoleUserApi', async () => {
            expect(fireblocks.consoleUser).toBeInstanceOf(ConsoleUserApi);
            expect(mockConsoleUserApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return ContractsApi', async () => {
            expect(fireblocks.contracts).toBeInstanceOf(ContractsApi);
            expect(mockContractsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return ExchangeAccountsApi', async () => {
            expect(fireblocks.exchangeAccounts).toBeInstanceOf(ExchangeAccountsApi);
            expect(mockExchangeAccountsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return ExternalWalletsApi', async () => {
            expect(fireblocks.externalWallets).toBeInstanceOf(ExternalWalletsApi);
            expect(mockExternalWalletsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return FiatAccountsApi', async () => {
            expect(fireblocks.fiatAccounts).toBeInstanceOf(FiatAccountsApi);
            expect(mockFiatAccountsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return GasStationsApi', async () => {
            expect(fireblocks.gasStations).toBeInstanceOf(GasStationsApi);
            expect(mockGasStationsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return InternalWalletsApi', async () => {
            expect(fireblocks.internalWallets).toBeInstanceOf(InternalWalletsApi);
            expect(mockInternalWalletsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return JobManagementApi', async () => {
            expect(fireblocks.jobManagement).toBeInstanceOf(JobManagementApi);
            expect(mockJobManagementApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return NFTsApi', async () => {
            expect(fireblocks.nFTs).toBeInstanceOf(NFTsApi);
            expect(mockNFTsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return NetworkConnectionsApi', async () => {
            expect(fireblocks.networkConnections).toBeInstanceOf(NetworkConnectionsApi);
            expect(mockNetworkConnectionsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return OTABetaApi', async () => {
            expect(fireblocks.oTABeta).toBeInstanceOf(OTABetaApi);
            expect(mockOTABetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return OffExchangesApi', async () => {
            expect(fireblocks.offExchanges).toBeInstanceOf(OffExchangesApi);
            expect(mockOffExchangesApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return PaymentsPayoutApi', async () => {
            expect(fireblocks.paymentsPayout).toBeInstanceOf(PaymentsPayoutApi);
            expect(mockPaymentsPayoutApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return PolicyEditorBetaApi', async () => {
            expect(fireblocks.policyEditorBeta).toBeInstanceOf(PolicyEditorBetaApi);
            expect(mockPolicyEditorBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return ResetDeviceApi', async () => {
            expect(fireblocks.resetDevice).toBeInstanceOf(ResetDeviceApi);
            expect(mockResetDeviceApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return SmartTransferApi', async () => {
            expect(fireblocks.smartTransfer).toBeInstanceOf(SmartTransferApi);
            expect(mockSmartTransferApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return StakingBetaApi', async () => {
            expect(fireblocks.stakingBeta).toBeInstanceOf(StakingBetaApi);
            expect(mockStakingBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return TransactionsApi', async () => {
            expect(fireblocks.transactions).toBeInstanceOf(TransactionsApi);
            expect(mockTransactionsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return TravelRuleBetaApi', async () => {
            expect(fireblocks.travelRuleBeta).toBeInstanceOf(TravelRuleBetaApi);
            expect(mockTravelRuleBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return UserGroupsBetaApi', async () => {
            expect(fireblocks.userGroupsBeta).toBeInstanceOf(UserGroupsBetaApi);
            expect(mockUserGroupsBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return UsersApi', async () => {
            expect(fireblocks.users).toBeInstanceOf(UsersApi);
            expect(mockUsersApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return VaultsApi', async () => {
            expect(fireblocks.vaults).toBeInstanceOf(VaultsApi);
            expect(mockVaultsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return Web3ConnectionsApi', async () => {
            expect(fireblocks.web3Connections).toBeInstanceOf(Web3ConnectionsApi);
            expect(mockWeb3ConnectionsApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return WebhooksApi', async () => {
            expect(fireblocks.webhooks).toBeInstanceOf(WebhooksApi);
            expect(mockWebhooksApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return WhitelistIpAddressesApi', async () => {
            expect(fireblocks.whitelistIpAddresses).toBeInstanceOf(WhitelistIpAddressesApi);
            expect(mockWhitelistIpAddressesApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return WorkspaceApi', async () => {
            expect(fireblocks.workspace).toBeInstanceOf(WorkspaceApi);
            expect(mockWorkspaceApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });
        it('Should return WorkspaceStatusBetaApi', async () => {
            expect(fireblocks.workspaceStatusBeta).toBeInstanceOf(WorkspaceStatusBetaApi);
            expect(mockWorkspaceStatusBetaApi).toHaveBeenCalledWith(expectedConfig, undefined, mockAxios);
        });

    });

});
