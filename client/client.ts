/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ConfigurationOptions  } from './clientConfiguration';
import { Configuration } from '../configuration';
import { ApiUserApi, 
         AssetsApi, 
         AuditLogsApi, 
         BlockchainsAssetsApi, 
         ComplianceApi, 
         ComplianceScreeningConfigurationApi, 
         ConsoleUserApi, 
         ContractInteractionsApi, 
         ContractTemplatesApi, 
         ContractsApi, 
         CosignersBetaApi, 
         DeployedContractsApi, 
         ExchangeAccountsApi, 
         ExternalWalletsApi, 
         FiatAccountsApi, 
         GasStationsApi, 
         InternalWalletsApi, 
         JobManagementApi, 
         KeyLinkBetaApi, 
         NFTsApi, 
         NetworkConnectionsApi, 
         OTABetaApi, 
         OffExchangesApi, 
         PaymentsPayoutApi, 
         PolicyEditorBetaApi, 
         ResetDeviceApi, 
         SmartTransferApi, 
         StakingBetaApi, 
         TokenizationApi, 
         TransactionsApi, 
         TravelRuleBetaApi, 
         UserGroupsBetaApi, 
         UsersApi, 
         VaultsApi, 
         Web3ConnectionsApi, 
         WebhooksApi, 
         WhitelistIpAddressesApi, 
         WorkspaceStatusBetaApi
         } from '../api';
import { AxiosManager } from "../network/axiosManager";


export class Fireblocks {
    private readonly config: Configuration;
    private readonly axiosManager: AxiosManager
    private _apiUser?: ApiUserApi;
    private _assets?: AssetsApi;
    private _auditLogs?: AuditLogsApi;
    private _blockchainsAssets?: BlockchainsAssetsApi;
    private _compliance?: ComplianceApi;
    private _complianceScreeningConfiguration?: ComplianceScreeningConfigurationApi;
    private _consoleUser?: ConsoleUserApi;
    private _contractInteractions?: ContractInteractionsApi;
    private _contractTemplates?: ContractTemplatesApi;
    private _contracts?: ContractsApi;
    private _cosignersBeta?: CosignersBetaApi;
    private _deployedContracts?: DeployedContractsApi;
    private _exchangeAccounts?: ExchangeAccountsApi;
    private _externalWallets?: ExternalWalletsApi;
    private _fiatAccounts?: FiatAccountsApi;
    private _gasStations?: GasStationsApi;
    private _internalWallets?: InternalWalletsApi;
    private _jobManagement?: JobManagementApi;
    private _keyLinkBeta?: KeyLinkBetaApi;
    private _nfts?: NFTsApi;
    private _networkConnections?: NetworkConnectionsApi;
    private _otaBeta?: OTABetaApi;
    private _offExchanges?: OffExchangesApi;
    private _paymentsPayout?: PaymentsPayoutApi;
    private _policyEditorBeta?: PolicyEditorBetaApi;
    private _resetDevice?: ResetDeviceApi;
    private _smartTransfer?: SmartTransferApi;
    private _stakingBeta?: StakingBetaApi;
    private _tokenization?: TokenizationApi;
    private _transactions?: TransactionsApi;
    private _travelRuleBeta?: TravelRuleBetaApi;
    private _userGroupsBeta?: UserGroupsBetaApi;
    private _users?: UsersApi;
    private _vaults?: VaultsApi;
    private _web3Connections?: Web3ConnectionsApi;
    private _webhooks?: WebhooksApi;
    private _whitelistIpAddresses?: WhitelistIpAddressesApi;
    private _workspaceStatusBeta?: WorkspaceStatusBetaApi;


    constructor(conf: ConfigurationOptions = {}) {
        let apiKey = conf.apiKey || process.env.FIREBLOCKS_API_KEY;
        if (!apiKey ) {
            throw new Error("apiKey is required either in the configuration or as environment variable FIREBLOCKS_API_KEY");
        }

        let secretKey = conf.secretKey || process.env.FIREBLOCKS_SECRET_KEY;
        if (!secretKey ) {
            throw new Error("secretKey is required either in the configuration or as environment variable FIREBLOCKS_SECRET_KEY");
        }

        let basePath = conf.basePath || process.env.FIREBLOCKS_BASE_PATH;
        if (!basePath) {
            throw new Error("basePath is required either in the configuration or as environment variable FIREBLOCKS_BASE_PATH");
        }
        this.config = new Configuration({ basePath, baseOptions: conf.additionalOptions?.baseOptions });
        this.axiosManager = new AxiosManager(apiKey, secretKey, conf?.additionalOptions);
    }

    get apiUser(): ApiUserApi {
        return this._apiUser ?? new ApiUserApi(this.config, undefined, this.axiosManager.axios);
    }
    get assets(): AssetsApi {
        return this._assets ?? new AssetsApi(this.config, undefined, this.axiosManager.axios);
    }
    get auditLogs(): AuditLogsApi {
        return this._auditLogs ?? new AuditLogsApi(this.config, undefined, this.axiosManager.axios);
    }
    get blockchainsAssets(): BlockchainsAssetsApi {
        return this._blockchainsAssets ?? new BlockchainsAssetsApi(this.config, undefined, this.axiosManager.axios);
    }
    get compliance(): ComplianceApi {
        return this._compliance ?? new ComplianceApi(this.config, undefined, this.axiosManager.axios);
    }
    get complianceScreeningConfiguration(): ComplianceScreeningConfigurationApi {
        return this._complianceScreeningConfiguration ?? new ComplianceScreeningConfigurationApi(this.config, undefined, this.axiosManager.axios);
    }
    get consoleUser(): ConsoleUserApi {
        return this._consoleUser ?? new ConsoleUserApi(this.config, undefined, this.axiosManager.axios);
    }
    get contractInteractions(): ContractInteractionsApi {
        return this._contractInteractions ?? new ContractInteractionsApi(this.config, undefined, this.axiosManager.axios);
    }
    get contractTemplates(): ContractTemplatesApi {
        return this._contractTemplates ?? new ContractTemplatesApi(this.config, undefined, this.axiosManager.axios);
    }
    get contracts(): ContractsApi {
        return this._contracts ?? new ContractsApi(this.config, undefined, this.axiosManager.axios);
    }
    get cosignersBeta(): CosignersBetaApi {
        return this._cosignersBeta ?? new CosignersBetaApi(this.config, undefined, this.axiosManager.axios);
    }
    get deployedContracts(): DeployedContractsApi {
        return this._deployedContracts ?? new DeployedContractsApi(this.config, undefined, this.axiosManager.axios);
    }
    get exchangeAccounts(): ExchangeAccountsApi {
        return this._exchangeAccounts ?? new ExchangeAccountsApi(this.config, undefined, this.axiosManager.axios);
    }
    get externalWallets(): ExternalWalletsApi {
        return this._externalWallets ?? new ExternalWalletsApi(this.config, undefined, this.axiosManager.axios);
    }
    get fiatAccounts(): FiatAccountsApi {
        return this._fiatAccounts ?? new FiatAccountsApi(this.config, undefined, this.axiosManager.axios);
    }
    get gasStations(): GasStationsApi {
        return this._gasStations ?? new GasStationsApi(this.config, undefined, this.axiosManager.axios);
    }
    get internalWallets(): InternalWalletsApi {
        return this._internalWallets ?? new InternalWalletsApi(this.config, undefined, this.axiosManager.axios);
    }
    get jobManagement(): JobManagementApi {
        return this._jobManagement ?? new JobManagementApi(this.config, undefined, this.axiosManager.axios);
    }
    get keyLinkBeta(): KeyLinkBetaApi {
        return this._keyLinkBeta ?? new KeyLinkBetaApi(this.config, undefined, this.axiosManager.axios);
    }
    get nfts(): NFTsApi {
        return this._nfts ?? new NFTsApi(this.config, undefined, this.axiosManager.axios);
    }
    get networkConnections(): NetworkConnectionsApi {
        return this._networkConnections ?? new NetworkConnectionsApi(this.config, undefined, this.axiosManager.axios);
    }
    get otaBeta(): OTABetaApi {
        return this._otaBeta ?? new OTABetaApi(this.config, undefined, this.axiosManager.axios);
    }
    get offExchanges(): OffExchangesApi {
        return this._offExchanges ?? new OffExchangesApi(this.config, undefined, this.axiosManager.axios);
    }
    get paymentsPayout(): PaymentsPayoutApi {
        return this._paymentsPayout ?? new PaymentsPayoutApi(this.config, undefined, this.axiosManager.axios);
    }
    get policyEditorBeta(): PolicyEditorBetaApi {
        return this._policyEditorBeta ?? new PolicyEditorBetaApi(this.config, undefined, this.axiosManager.axios);
    }
    get resetDevice(): ResetDeviceApi {
        return this._resetDevice ?? new ResetDeviceApi(this.config, undefined, this.axiosManager.axios);
    }
    get smartTransfer(): SmartTransferApi {
        return this._smartTransfer ?? new SmartTransferApi(this.config, undefined, this.axiosManager.axios);
    }
    get stakingBeta(): StakingBetaApi {
        return this._stakingBeta ?? new StakingBetaApi(this.config, undefined, this.axiosManager.axios);
    }
    get tokenization(): TokenizationApi {
        return this._tokenization ?? new TokenizationApi(this.config, undefined, this.axiosManager.axios);
    }
    get transactions(): TransactionsApi {
        return this._transactions ?? new TransactionsApi(this.config, undefined, this.axiosManager.axios);
    }
    get travelRuleBeta(): TravelRuleBetaApi {
        return this._travelRuleBeta ?? new TravelRuleBetaApi(this.config, undefined, this.axiosManager.axios);
    }
    get userGroupsBeta(): UserGroupsBetaApi {
        return this._userGroupsBeta ?? new UserGroupsBetaApi(this.config, undefined, this.axiosManager.axios);
    }
    get users(): UsersApi {
        return this._users ?? new UsersApi(this.config, undefined, this.axiosManager.axios);
    }
    get vaults(): VaultsApi {
        return this._vaults ?? new VaultsApi(this.config, undefined, this.axiosManager.axios);
    }
    get web3Connections(): Web3ConnectionsApi {
        return this._web3Connections ?? new Web3ConnectionsApi(this.config, undefined, this.axiosManager.axios);
    }
    get webhooks(): WebhooksApi {
        return this._webhooks ?? new WebhooksApi(this.config, undefined, this.axiosManager.axios);
    }
    get whitelistIpAddresses(): WhitelistIpAddressesApi {
        return this._whitelistIpAddresses ?? new WhitelistIpAddressesApi(this.config, undefined, this.axiosManager.axios);
    }
    get workspaceStatusBeta(): WorkspaceStatusBetaApi {
        return this._workspaceStatusBeta ?? new WorkspaceStatusBetaApi(this.config, undefined, this.axiosManager.axios);
    }
}

